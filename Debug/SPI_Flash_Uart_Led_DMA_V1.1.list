
SPI_Flash_Uart_Led_DMA_V1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009170  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  08009320  08009320  00019320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095f0  080095f0  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080095f0  080095f0  000195f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095f8  080095f8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095f8  080095f8  000195f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095fc  080095fc  000195fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08009600  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          000042f4  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000437c  2000437c  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016cb7  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ea5  00000000  00000000  00036d6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e00  00000000  00000000  00039c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ce8  00000000  00000000  0003aa18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025c62  00000000  00000000  0003b700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012820  00000000  00000000  00061362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d742a  00000000  00000000  00073b82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014afac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004324  00000000  00000000  0014b000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009308 	.word	0x08009308

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	08009308 	.word	0x08009308

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b96e 	b.w	8000d70 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	468c      	mov	ip, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	f040 8083 	bne.w	8000bc2 <__udivmoddi4+0x116>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4617      	mov	r7, r2
 8000ac0:	d947      	bls.n	8000b52 <__udivmoddi4+0xa6>
 8000ac2:	fab2 f282 	clz	r2, r2
 8000ac6:	b142      	cbz	r2, 8000ada <__udivmoddi4+0x2e>
 8000ac8:	f1c2 0020 	rsb	r0, r2, #32
 8000acc:	fa24 f000 	lsr.w	r0, r4, r0
 8000ad0:	4091      	lsls	r1, r2
 8000ad2:	4097      	lsls	r7, r2
 8000ad4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ad8:	4094      	lsls	r4, r2
 8000ada:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ade:	0c23      	lsrs	r3, r4, #16
 8000ae0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ae4:	fa1f fe87 	uxth.w	lr, r7
 8000ae8:	fb08 c116 	mls	r1, r8, r6, ip
 8000aec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000af0:	fb06 f10e 	mul.w	r1, r6, lr
 8000af4:	4299      	cmp	r1, r3
 8000af6:	d909      	bls.n	8000b0c <__udivmoddi4+0x60>
 8000af8:	18fb      	adds	r3, r7, r3
 8000afa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000afe:	f080 8119 	bcs.w	8000d34 <__udivmoddi4+0x288>
 8000b02:	4299      	cmp	r1, r3
 8000b04:	f240 8116 	bls.w	8000d34 <__udivmoddi4+0x288>
 8000b08:	3e02      	subs	r6, #2
 8000b0a:	443b      	add	r3, r7
 8000b0c:	1a5b      	subs	r3, r3, r1
 8000b0e:	b2a4      	uxth	r4, r4
 8000b10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b14:	fb08 3310 	mls	r3, r8, r0, r3
 8000b18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b20:	45a6      	cmp	lr, r4
 8000b22:	d909      	bls.n	8000b38 <__udivmoddi4+0x8c>
 8000b24:	193c      	adds	r4, r7, r4
 8000b26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b2a:	f080 8105 	bcs.w	8000d38 <__udivmoddi4+0x28c>
 8000b2e:	45a6      	cmp	lr, r4
 8000b30:	f240 8102 	bls.w	8000d38 <__udivmoddi4+0x28c>
 8000b34:	3802      	subs	r0, #2
 8000b36:	443c      	add	r4, r7
 8000b38:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b3c:	eba4 040e 	sub.w	r4, r4, lr
 8000b40:	2600      	movs	r6, #0
 8000b42:	b11d      	cbz	r5, 8000b4c <__udivmoddi4+0xa0>
 8000b44:	40d4      	lsrs	r4, r2
 8000b46:	2300      	movs	r3, #0
 8000b48:	e9c5 4300 	strd	r4, r3, [r5]
 8000b4c:	4631      	mov	r1, r6
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	b902      	cbnz	r2, 8000b56 <__udivmoddi4+0xaa>
 8000b54:	deff      	udf	#255	; 0xff
 8000b56:	fab2 f282 	clz	r2, r2
 8000b5a:	2a00      	cmp	r2, #0
 8000b5c:	d150      	bne.n	8000c00 <__udivmoddi4+0x154>
 8000b5e:	1bcb      	subs	r3, r1, r7
 8000b60:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b64:	fa1f f887 	uxth.w	r8, r7
 8000b68:	2601      	movs	r6, #1
 8000b6a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b6e:	0c21      	lsrs	r1, r4, #16
 8000b70:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b78:	fb08 f30c 	mul.w	r3, r8, ip
 8000b7c:	428b      	cmp	r3, r1
 8000b7e:	d907      	bls.n	8000b90 <__udivmoddi4+0xe4>
 8000b80:	1879      	adds	r1, r7, r1
 8000b82:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b86:	d202      	bcs.n	8000b8e <__udivmoddi4+0xe2>
 8000b88:	428b      	cmp	r3, r1
 8000b8a:	f200 80e9 	bhi.w	8000d60 <__udivmoddi4+0x2b4>
 8000b8e:	4684      	mov	ip, r0
 8000b90:	1ac9      	subs	r1, r1, r3
 8000b92:	b2a3      	uxth	r3, r4
 8000b94:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b98:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b9c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ba0:	fb08 f800 	mul.w	r8, r8, r0
 8000ba4:	45a0      	cmp	r8, r4
 8000ba6:	d907      	bls.n	8000bb8 <__udivmoddi4+0x10c>
 8000ba8:	193c      	adds	r4, r7, r4
 8000baa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x10a>
 8000bb0:	45a0      	cmp	r8, r4
 8000bb2:	f200 80d9 	bhi.w	8000d68 <__udivmoddi4+0x2bc>
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	eba4 0408 	sub.w	r4, r4, r8
 8000bbc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bc0:	e7bf      	b.n	8000b42 <__udivmoddi4+0x96>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d909      	bls.n	8000bda <__udivmoddi4+0x12e>
 8000bc6:	2d00      	cmp	r5, #0
 8000bc8:	f000 80b1 	beq.w	8000d2e <__udivmoddi4+0x282>
 8000bcc:	2600      	movs	r6, #0
 8000bce:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd2:	4630      	mov	r0, r6
 8000bd4:	4631      	mov	r1, r6
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	fab3 f683 	clz	r6, r3
 8000bde:	2e00      	cmp	r6, #0
 8000be0:	d14a      	bne.n	8000c78 <__udivmoddi4+0x1cc>
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d302      	bcc.n	8000bec <__udivmoddi4+0x140>
 8000be6:	4282      	cmp	r2, r0
 8000be8:	f200 80b8 	bhi.w	8000d5c <__udivmoddi4+0x2b0>
 8000bec:	1a84      	subs	r4, r0, r2
 8000bee:	eb61 0103 	sbc.w	r1, r1, r3
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	468c      	mov	ip, r1
 8000bf6:	2d00      	cmp	r5, #0
 8000bf8:	d0a8      	beq.n	8000b4c <__udivmoddi4+0xa0>
 8000bfa:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bfe:	e7a5      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000c00:	f1c2 0320 	rsb	r3, r2, #32
 8000c04:	fa20 f603 	lsr.w	r6, r0, r3
 8000c08:	4097      	lsls	r7, r2
 8000c0a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c0e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c12:	40d9      	lsrs	r1, r3
 8000c14:	4330      	orrs	r0, r6
 8000c16:	0c03      	lsrs	r3, r0, #16
 8000c18:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c1c:	fa1f f887 	uxth.w	r8, r7
 8000c20:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c28:	fb06 f108 	mul.w	r1, r6, r8
 8000c2c:	4299      	cmp	r1, r3
 8000c2e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x19c>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c3a:	f080 808d 	bcs.w	8000d58 <__udivmoddi4+0x2ac>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 808a 	bls.w	8000d58 <__udivmoddi4+0x2ac>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b281      	uxth	r1, r0
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c58:	fb00 f308 	mul.w	r3, r0, r8
 8000c5c:	428b      	cmp	r3, r1
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0x1c4>
 8000c60:	1879      	adds	r1, r7, r1
 8000c62:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c66:	d273      	bcs.n	8000d50 <__udivmoddi4+0x2a4>
 8000c68:	428b      	cmp	r3, r1
 8000c6a:	d971      	bls.n	8000d50 <__udivmoddi4+0x2a4>
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	4439      	add	r1, r7
 8000c70:	1acb      	subs	r3, r1, r3
 8000c72:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c76:	e778      	b.n	8000b6a <__udivmoddi4+0xbe>
 8000c78:	f1c6 0c20 	rsb	ip, r6, #32
 8000c7c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c80:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c84:	431c      	orrs	r4, r3
 8000c86:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c8e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c92:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c96:	431f      	orrs	r7, r3
 8000c98:	0c3b      	lsrs	r3, r7, #16
 8000c9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c9e:	fa1f f884 	uxth.w	r8, r4
 8000ca2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ca6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000caa:	fb09 fa08 	mul.w	sl, r9, r8
 8000cae:	458a      	cmp	sl, r1
 8000cb0:	fa02 f206 	lsl.w	r2, r2, r6
 8000cb4:	fa00 f306 	lsl.w	r3, r0, r6
 8000cb8:	d908      	bls.n	8000ccc <__udivmoddi4+0x220>
 8000cba:	1861      	adds	r1, r4, r1
 8000cbc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cc0:	d248      	bcs.n	8000d54 <__udivmoddi4+0x2a8>
 8000cc2:	458a      	cmp	sl, r1
 8000cc4:	d946      	bls.n	8000d54 <__udivmoddi4+0x2a8>
 8000cc6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cca:	4421      	add	r1, r4
 8000ccc:	eba1 010a 	sub.w	r1, r1, sl
 8000cd0:	b2bf      	uxth	r7, r7
 8000cd2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cda:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cde:	fb00 f808 	mul.w	r8, r0, r8
 8000ce2:	45b8      	cmp	r8, r7
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x24a>
 8000ce6:	19e7      	adds	r7, r4, r7
 8000ce8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cec:	d22e      	bcs.n	8000d4c <__udivmoddi4+0x2a0>
 8000cee:	45b8      	cmp	r8, r7
 8000cf0:	d92c      	bls.n	8000d4c <__udivmoddi4+0x2a0>
 8000cf2:	3802      	subs	r0, #2
 8000cf4:	4427      	add	r7, r4
 8000cf6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cfa:	eba7 0708 	sub.w	r7, r7, r8
 8000cfe:	fba0 8902 	umull	r8, r9, r0, r2
 8000d02:	454f      	cmp	r7, r9
 8000d04:	46c6      	mov	lr, r8
 8000d06:	4649      	mov	r1, r9
 8000d08:	d31a      	bcc.n	8000d40 <__udivmoddi4+0x294>
 8000d0a:	d017      	beq.n	8000d3c <__udivmoddi4+0x290>
 8000d0c:	b15d      	cbz	r5, 8000d26 <__udivmoddi4+0x27a>
 8000d0e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d12:	eb67 0701 	sbc.w	r7, r7, r1
 8000d16:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d1a:	40f2      	lsrs	r2, r6
 8000d1c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d20:	40f7      	lsrs	r7, r6
 8000d22:	e9c5 2700 	strd	r2, r7, [r5]
 8000d26:	2600      	movs	r6, #0
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e70b      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e9      	b.n	8000b0c <__udivmoddi4+0x60>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6fd      	b.n	8000b38 <__udivmoddi4+0x8c>
 8000d3c:	4543      	cmp	r3, r8
 8000d3e:	d2e5      	bcs.n	8000d0c <__udivmoddi4+0x260>
 8000d40:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d44:	eb69 0104 	sbc.w	r1, r9, r4
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7df      	b.n	8000d0c <__udivmoddi4+0x260>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e7d2      	b.n	8000cf6 <__udivmoddi4+0x24a>
 8000d50:	4660      	mov	r0, ip
 8000d52:	e78d      	b.n	8000c70 <__udivmoddi4+0x1c4>
 8000d54:	4681      	mov	r9, r0
 8000d56:	e7b9      	b.n	8000ccc <__udivmoddi4+0x220>
 8000d58:	4666      	mov	r6, ip
 8000d5a:	e775      	b.n	8000c48 <__udivmoddi4+0x19c>
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	e74a      	b.n	8000bf6 <__udivmoddi4+0x14a>
 8000d60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d64:	4439      	add	r1, r7
 8000d66:	e713      	b.n	8000b90 <__udivmoddi4+0xe4>
 8000d68:	3802      	subs	r0, #2
 8000d6a:	443c      	add	r4, r7
 8000d6c:	e724      	b.n	8000bb8 <__udivmoddi4+0x10c>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_idiv0>:
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop

08000d74 <ff_getCapacity>:
  * @param	*free_byte :[OUT] kByte of free Capacity
  * @param  *total_byte:[OUT] kByte of total Capacity
  * @retval DRESULT: Operation result
  */
FRESULT ff_getCapacity (const TCHAR* path, DWORD* free_byte, DWORD* total_byte)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08e      	sub	sp, #56	; 0x38
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
	FRESULT fRes = FR_OK;
 8000d80:	2300      	movs	r3, #0
 8000d82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	DWORD fre_clust;
	DWORD sect_size = _MIN_SS;
 8000d86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d8a:	633b      	str	r3, [r7, #48]	; 0x30
	double fre_sect, tot_sect, coef;
	FATFS *fs;

    fRes = f_getfree(path, &fre_clust, &fs);
 8000d8c:	f107 0210 	add.w	r2, r7, #16
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	4619      	mov	r1, r3
 8000d96:	68f8      	ldr	r0, [r7, #12]
 8000d98:	f006 ffd5 	bl	8007d46 <f_getfree>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (fRes != FR_OK)
 8000da2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d002      	beq.n	8000db0 <ff_getCapacity+0x3c>
    {
    	return fRes;
 8000daa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000dae:	e048      	b.n	8000e42 <ff_getCapacity+0xce>
    }

#if _MAX_SS != _MIN_SS
    sect_size = fs->ssize;
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	899b      	ldrh	r3, [r3, #12]
 8000db4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

    /* Get total sectors and free sectors */
    tot_sect = (fs->n_fatent - 2) * fs->csize;
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	3b02      	subs	r3, #2
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	8952      	ldrh	r2, [r2, #10]
 8000dc0:	fb02 f303 	mul.w	r3, r2, r3
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fbad 	bl	8000524 <__aeabi_ui2d>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	460b      	mov	r3, r1
 8000dce:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    fre_sect = fre_clust * fs->csize;
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	895b      	ldrh	r3, [r3, #10]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	fb03 f302 	mul.w	r3, r3, r2
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fba0 	bl	8000524 <__aeabi_ui2d>
 8000de4:	4602      	mov	r2, r0
 8000de6:	460b      	mov	r3, r1
 8000de8:	e9c7 2308 	strd	r2, r3, [r7, #32]

    coef = ((double)sect_size)/(1024.0);
 8000dec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000dee:	f7ff fb99 	bl	8000524 <__aeabi_ui2d>
 8000df2:	f04f 0200 	mov.w	r2, #0
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <ff_getCapacity+0xd8>)
 8000df8:	f7ff fd38 	bl	800086c <__aeabi_ddiv>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	460b      	mov	r3, r1
 8000e00:	e9c7 2306 	strd	r2, r3, [r7, #24]

    *total_byte = tot_sect * coef;
 8000e04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000e08:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000e0c:	f7ff fc04 	bl	8000618 <__aeabi_dmul>
 8000e10:	4602      	mov	r2, r0
 8000e12:	460b      	mov	r3, r1
 8000e14:	4610      	mov	r0, r2
 8000e16:	4619      	mov	r1, r3
 8000e18:	f7ff fe10 	bl	8000a3c <__aeabi_d2uiz>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	601a      	str	r2, [r3, #0]
    *free_byte  = fre_sect * coef;
 8000e22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000e26:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000e2a:	f7ff fbf5 	bl	8000618 <__aeabi_dmul>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	460b      	mov	r3, r1
 8000e32:	4610      	mov	r0, r2
 8000e34:	4619      	mov	r1, r3
 8000e36:	f7ff fe01 	bl	8000a3c <__aeabi_d2uiz>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	601a      	str	r2, [r3, #0]

    return FR_OK;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3738      	adds	r7, #56	; 0x38
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40900000 	.word	0x40900000

08000e50 <ff_scanDisk>:
  *		// ff_scanDisk(path)
  * @param	*path  :[IN]  Start node to be scanned
  * @retval DRESULT: Operation result
  */
FRESULT ff_scanDisk (TCHAR* path)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b090      	sub	sp, #64	; 0x40
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
    DIR dir;
    UINT i;
    static FILINFO fno;


    res = f_opendir(&dir, path);                       	   /* Open the directory */
 8000e58:	f107 0308 	add.w	r3, r7, #8
 8000e5c:	6879      	ldr	r1, [r7, #4]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f006 fe9b 	bl	8007b9a <f_opendir>
 8000e64:	4603      	mov	r3, r0
 8000e66:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (res == FR_OK) {
 8000e6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d13e      	bne.n	8000ef0 <ff_scanDisk+0xa0>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000e72:	f107 0308 	add.w	r3, r7, #8
 8000e76:	4921      	ldr	r1, [pc, #132]	; (8000efc <ff_scanDisk+0xac>)
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f006 ff27 	bl	8007ccc <f_readdir>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8000e84:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d12c      	bne.n	8000ee6 <ff_scanDisk+0x96>
 8000e8c:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <ff_scanDisk+0xac>)
 8000e8e:	7a5b      	ldrb	r3, [r3, #9]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d028      	beq.n	8000ee6 <ff_scanDisk+0x96>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 8000e94:	4b19      	ldr	r3, [pc, #100]	; (8000efc <ff_scanDisk+0xac>)
 8000e96:	7a1b      	ldrb	r3, [r3, #8]
 8000e98:	f003 0310 	and.w	r3, r3, #16
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d01b      	beq.n	8000ed8 <ff_scanDisk+0x88>
                i = strlen(path);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff f9a5 	bl	80001f0 <strlen>
 8000ea6:	63b8      	str	r0, [r7, #56]	; 0x38
                sprintf(&path[i], "/%s", fno.fname);
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000eac:	4413      	add	r3, r2
 8000eae:	4a14      	ldr	r2, [pc, #80]	; (8000f00 <ff_scanDisk+0xb0>)
 8000eb0:	4914      	ldr	r1, [pc, #80]	; (8000f04 <ff_scanDisk+0xb4>)
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f007 f918 	bl	80080e8 <siprintf>
                res = ff_scanDisk(path);                    /* Enter the directory */
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff ffc9 	bl	8000e50 <ff_scanDisk>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                if (res != FR_OK) break;
 8000ec4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d10b      	bne.n	8000ee4 <ff_scanDisk+0x94>
                path[i] = 0;
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ed0:	4413      	add	r3, r2
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
 8000ed6:	e7cc      	b.n	8000e72 <ff_scanDisk+0x22>
            } else {                                       /* It is a file. */
                printf("%s/%s\n", path, fno.fname);
 8000ed8:	4a09      	ldr	r2, [pc, #36]	; (8000f00 <ff_scanDisk+0xb0>)
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	480a      	ldr	r0, [pc, #40]	; (8000f08 <ff_scanDisk+0xb8>)
 8000ede:	f007 f875 	bl	8007fcc <iprintf>
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000ee2:	e7c6      	b.n	8000e72 <ff_scanDisk+0x22>
                if (res != FR_OK) break;
 8000ee4:	bf00      	nop
            }
        }
        f_closedir(&dir);
 8000ee6:	f107 0308 	add.w	r3, r7, #8
 8000eea:	4618      	mov	r0, r3
 8000eec:	f006 fec8 	bl	8007c80 <f_closedir>
    }

    return res;
 8000ef0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3740      	adds	r7, #64	; 0x40
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200000a4 	.word	0x200000a4
 8000f00:	200000ad 	.word	0x200000ad
 8000f04:	08009320 	.word	0x08009320
 8000f08:	08009324 	.word	0x08009324

08000f0c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, 100);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	2364      	movs	r3, #100	; 0x64
 8000f1e:	68b9      	ldr	r1, [r7, #8]
 8000f20:	4803      	ldr	r0, [pc, #12]	; (8000f30 <_write+0x24>)
 8000f22:	f003 fca8 	bl	8004876 <HAL_UART_Transmit>
	return len;
 8000f26:	687b      	ldr	r3, [r7, #4]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200011f4 	.word	0x200011f4

08000f34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b0b6      	sub	sp, #216	; 0xd8
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3a:	f001 fa3d 	bl	80023b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3e:	f000 f8cd 	bl	80010dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f42:	f000 f9bd 	bl	80012c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f46:	f000 f993 	bl	8001270 <MX_DMA_Init>
  MX_SPI5_Init();
 8000f4a:	f000 f931 	bl	80011b0 <MX_SPI5_Init>
  MX_USART1_UART_Init();
 8000f4e:	f000 f965 	bl	800121c <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000f52:	f003 ff59 	bl	8004e08 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  FRESULT fres;
  fres = f_mount(&w25qxxx_fs, "0:", 1);
 8000f56:	2201      	movs	r2, #1
 8000f58:	4951      	ldr	r1, [pc, #324]	; (80010a0 <main+0x16c>)
 8000f5a:	4852      	ldr	r0, [pc, #328]	; (80010a4 <main+0x170>)
 8000f5c:	f005 fe4c 	bl	8006bf8 <f_mount>
 8000f60:	4603      	mov	r3, r0
 8000f62:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  if (fres == FR_OK)
 8000f66:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	f040 808a 	bne.w	8001084 <main+0x150>
  {
	  printf("  spi flash w25qxxx mount ok...\r\n");
 8000f70:	484d      	ldr	r0, [pc, #308]	; (80010a8 <main+0x174>)
 8000f72:	f007 f8b1 	bl	80080d8 <puts>

	  DWORD free_byte[1], total_byte[1];
	  fres = ff_getCapacity("0:", free_byte, total_byte);
 8000f76:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8000f7a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4847      	ldr	r0, [pc, #284]	; (80010a0 <main+0x16c>)
 8000f82:	f7ff fef7 	bl	8000d74 <ff_getCapacity>
 8000f86:	4603      	mov	r3, r0
 8000f88:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	  if (fres == FR_OK)
 8000f8c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d122      	bne.n	8000fda <main+0xa6>
	  {
		  printf("  total capacity : %ld KiByte\r\n", total_byte[0]);
 8000f94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4844      	ldr	r0, [pc, #272]	; (80010ac <main+0x178>)
 8000f9c:	f007 f816 	bl	8007fcc <iprintf>
		  printf("  free  capacity : %ld KiByte\r\n", free_byte[0]);
 8000fa0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4842      	ldr	r0, [pc, #264]	; (80010b0 <main+0x17c>)
 8000fa8:	f007 f810 	bl	8007fcc <iprintf>

		  TCHAR path[50] = "0:";
 8000fac:	f643 2330 	movw	r3, #14896	; 0x3a30
 8000fb0:	603b      	str	r3, [r7, #0]
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	222e      	movs	r2, #46	; 0x2e
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f006 ffff 	bl	8007fbc <memset>
		  fres = ff_scanDisk(path);
 8000fbe:	463b      	mov	r3, r7
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff ff45 	bl	8000e50 <ff_scanDisk>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
		  if (fres == FR_OK)
 8000fcc:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d102      	bne.n	8000fda <main+0xa6>
		  {
			  printf("----- scan spi flash -----\r\n");
 8000fd4:	4837      	ldr	r0, [pc, #220]	; (80010b4 <main+0x180>)
 8000fd6:	f007 f87f 	bl	80080d8 <puts>
		  }
	  }

	  fres = f_open(&w25qxxx_fp, "0:/DEMO.TXT", FA_OPEN_EXISTING|FA_READ|FA_WRITE);
 8000fda:	2203      	movs	r2, #3
 8000fdc:	4936      	ldr	r1, [pc, #216]	; (80010b8 <main+0x184>)
 8000fde:	4837      	ldr	r0, [pc, #220]	; (80010bc <main+0x188>)
 8000fe0:	f005 fe50 	bl	8006c84 <f_open>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	  if(fres == FR_OK)
 8000fea:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d144      	bne.n	800107c <main+0x148>
	  {
		  printf("open 0:/DEMO.TXT file ok...\r\n");
 8000ff2:	4833      	ldr	r0, [pc, #204]	; (80010c0 <main+0x18c>)
 8000ff4:	f007 f870 	bl	80080d8 <puts>

		  uint8_t buff[200];
		  UINT br[1];
		  fres = f_lseek(&w25qxxx_fp, 0);
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4830      	ldr	r0, [pc, #192]	; (80010bc <main+0x188>)
 8000ffc:	f006 fba9 	bl	8007752 <f_lseek>
 8001000:	4603      	mov	r3, r0
 8001002:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
		  fres = f_read(&w25qxxx_fp, buff, f_size(&w25qxxx_fp), br);
 8001006:	4b2d      	ldr	r3, [pc, #180]	; (80010bc <main+0x188>)
 8001008:	68da      	ldr	r2, [r3, #12]
 800100a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800100e:	4639      	mov	r1, r7
 8001010:	482a      	ldr	r0, [pc, #168]	; (80010bc <main+0x188>)
 8001012:	f006 f803 	bl	800701c <f_read>
 8001016:	4603      	mov	r3, r0
 8001018:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
		  (fres == FR_OK)? printf("read 0:/DEMO.TXT file ok...\r\n"): printf("read 0:/DEMO.TXT file error...\r\n");
 800101c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8001020:	2b00      	cmp	r3, #0
 8001022:	d103      	bne.n	800102c <main+0xf8>
 8001024:	4827      	ldr	r0, [pc, #156]	; (80010c4 <main+0x190>)
 8001026:	f006 ffd1 	bl	8007fcc <iprintf>
 800102a:	e002      	b.n	8001032 <main+0xfe>
 800102c:	4826      	ldr	r0, [pc, #152]	; (80010c8 <main+0x194>)
 800102e:	f006 ffcd 	bl	8007fcc <iprintf>

		  fres = f_lseek(&w25qxxx_fp, f_size(&w25qxxx_fp));
 8001032:	4b22      	ldr	r3, [pc, #136]	; (80010bc <main+0x188>)
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	4619      	mov	r1, r3
 8001038:	4820      	ldr	r0, [pc, #128]	; (80010bc <main+0x188>)
 800103a:	f006 fb8a 	bl	8007752 <f_lseek>
 800103e:	4603      	mov	r3, r0
 8001040:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
		  fres = f_write(&w25qxxx_fp, "add info", 9, br);
 8001044:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001048:	2209      	movs	r2, #9
 800104a:	4920      	ldr	r1, [pc, #128]	; (80010cc <main+0x198>)
 800104c:	481b      	ldr	r0, [pc, #108]	; (80010bc <main+0x188>)
 800104e:	f006 f944 	bl	80072da <f_write>
 8001052:	4603      	mov	r3, r0
 8001054:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
		  if (fres == FR_OK)
 8001058:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800105c:	2b00      	cmp	r3, #0
 800105e:	d114      	bne.n	800108a <main+0x156>
		  {
			  fres = f_close(&w25qxxx_fp);
 8001060:	4816      	ldr	r0, [pc, #88]	; (80010bc <main+0x188>)
 8001062:	f006 fb4c 	bl	80076fe <f_close>
 8001066:	4603      	mov	r3, r0
 8001068:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
			  if (fres == FR_OK)
 800106c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8001070:	2b00      	cmp	r3, #0
 8001072:	d10a      	bne.n	800108a <main+0x156>
				  printf("write data ok...\r\n");
 8001074:	4816      	ldr	r0, [pc, #88]	; (80010d0 <main+0x19c>)
 8001076:	f007 f82f 	bl	80080d8 <puts>
 800107a:	e006      	b.n	800108a <main+0x156>
		  }
	  }
	  else {
		printf("open 0:/DEMO.TXT file error...\r\n");
 800107c:	4815      	ldr	r0, [pc, #84]	; (80010d4 <main+0x1a0>)
 800107e:	f007 f82b 	bl	80080d8 <puts>
 8001082:	e002      	b.n	800108a <main+0x156>
	}

  }
  else
	  printf("  spi flash w25qxxx mount ok...\r\n");
 8001084:	4808      	ldr	r0, [pc, #32]	; (80010a8 <main+0x174>)
 8001086:	f007 f827 	bl	80080d8 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LD3_Blue_GPIO_Port, LD3_Blue_Pin);
 800108a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800108e:	4812      	ldr	r0, [pc, #72]	; (80010d8 <main+0x1a4>)
 8001090:	f002 f891 	bl	80031b6 <HAL_GPIO_TogglePin>
	  HAL_Delay(300);
 8001094:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001098:	f001 fa00 	bl	800249c <HAL_Delay>
	  HAL_GPIO_TogglePin(LD3_Blue_GPIO_Port, LD3_Blue_Pin);
 800109c:	e7f5      	b.n	800108a <main+0x156>
 800109e:	bf00      	nop
 80010a0:	0800932c 	.word	0x0800932c
 80010a4:	20000108 	.word	0x20000108
 80010a8:	08009330 	.word	0x08009330
 80010ac:	08009354 	.word	0x08009354
 80010b0:	08009374 	.word	0x08009374
 80010b4:	08009394 	.word	0x08009394
 80010b8:	080093b0 	.word	0x080093b0
 80010bc:	20001298 	.word	0x20001298
 80010c0:	080093bc 	.word	0x080093bc
 80010c4:	080093dc 	.word	0x080093dc
 80010c8:	080093fc 	.word	0x080093fc
 80010cc:	08009420 	.word	0x08009420
 80010d0:	0800942c 	.word	0x0800942c
 80010d4:	08009440 	.word	0x08009440
 80010d8:	40021c00 	.word	0x40021c00

080010dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b094      	sub	sp, #80	; 0x50
 80010e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e2:	f107 0320 	add.w	r3, r7, #32
 80010e6:	2230      	movs	r2, #48	; 0x30
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f006 ff66 	bl	8007fbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001100:	2300      	movs	r3, #0
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	4b28      	ldr	r3, [pc, #160]	; (80011a8 <SystemClock_Config+0xcc>)
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	4a27      	ldr	r2, [pc, #156]	; (80011a8 <SystemClock_Config+0xcc>)
 800110a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800110e:	6413      	str	r3, [r2, #64]	; 0x40
 8001110:	4b25      	ldr	r3, [pc, #148]	; (80011a8 <SystemClock_Config+0xcc>)
 8001112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800111c:	2300      	movs	r3, #0
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	4b22      	ldr	r3, [pc, #136]	; (80011ac <SystemClock_Config+0xd0>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a21      	ldr	r2, [pc, #132]	; (80011ac <SystemClock_Config+0xd0>)
 8001126:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800112a:	6013      	str	r3, [r2, #0]
 800112c:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <SystemClock_Config+0xd0>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001138:	2301      	movs	r3, #1
 800113a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800113c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001142:	2302      	movs	r3, #2
 8001144:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001146:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800114a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800114c:	2319      	movs	r3, #25
 800114e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001150:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001154:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001156:	2302      	movs	r3, #2
 8001158:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800115a:	2304      	movs	r3, #4
 800115c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800115e:	f107 0320 	add.w	r3, r7, #32
 8001162:	4618      	mov	r0, r3
 8001164:	f002 f842 	bl	80031ec <HAL_RCC_OscConfig>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800116e:	f000 f90f 	bl	8001390 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001172:	230f      	movs	r3, #15
 8001174:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001176:	2302      	movs	r3, #2
 8001178:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800117e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001182:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001184:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001188:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800118a:	f107 030c 	add.w	r3, r7, #12
 800118e:	2105      	movs	r1, #5
 8001190:	4618      	mov	r0, r3
 8001192:	f002 faa3 	bl	80036dc <HAL_RCC_ClockConfig>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800119c:	f000 f8f8 	bl	8001390 <Error_Handler>
  }
}
 80011a0:	bf00      	nop
 80011a2:	3750      	adds	r7, #80	; 0x50
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40007000 	.word	0x40007000

080011b0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80011b4:	4b17      	ldr	r3, [pc, #92]	; (8001214 <MX_SPI5_Init+0x64>)
 80011b6:	4a18      	ldr	r2, [pc, #96]	; (8001218 <MX_SPI5_Init+0x68>)
 80011b8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80011ba:	4b16      	ldr	r3, [pc, #88]	; (8001214 <MX_SPI5_Init+0x64>)
 80011bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011c0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80011c2:	4b14      	ldr	r3, [pc, #80]	; (8001214 <MX_SPI5_Init+0x64>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <MX_SPI5_Init+0x64>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <MX_SPI5_Init+0x64>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011d4:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <MX_SPI5_Init+0x64>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <MX_SPI5_Init+0x64>)
 80011dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011e0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011e2:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <MX_SPI5_Init+0x64>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011e8:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <MX_SPI5_Init+0x64>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <MX_SPI5_Init+0x64>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011f4:	4b07      	ldr	r3, [pc, #28]	; (8001214 <MX_SPI5_Init+0x64>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <MX_SPI5_Init+0x64>)
 80011fc:	220a      	movs	r2, #10
 80011fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001200:	4804      	ldr	r0, [pc, #16]	; (8001214 <MX_SPI5_Init+0x64>)
 8001202:	f002 fc3b 	bl	8003a7c <HAL_SPI_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800120c:	f000 f8c0 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	2000113c 	.word	0x2000113c
 8001218:	40015000 	.word	0x40015000

0800121c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001220:	4b11      	ldr	r3, [pc, #68]	; (8001268 <MX_USART1_UART_Init+0x4c>)
 8001222:	4a12      	ldr	r2, [pc, #72]	; (800126c <MX_USART1_UART_Init+0x50>)
 8001224:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <MX_USART1_UART_Init+0x4c>)
 8001228:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800122c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <MX_USART1_UART_Init+0x4c>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <MX_USART1_UART_Init+0x4c>)
 8001236:	2200      	movs	r2, #0
 8001238:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800123a:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <MX_USART1_UART_Init+0x4c>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001240:	4b09      	ldr	r3, [pc, #36]	; (8001268 <MX_USART1_UART_Init+0x4c>)
 8001242:	220c      	movs	r2, #12
 8001244:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <MX_USART1_UART_Init+0x4c>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <MX_USART1_UART_Init+0x4c>)
 800124e:	2200      	movs	r2, #0
 8001250:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <MX_USART1_UART_Init+0x4c>)
 8001254:	f003 fac2 	bl	80047dc <HAL_UART_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800125e:	f000 f897 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	200011f4 	.word	0x200011f4
 800126c:	40011000 	.word	0x40011000

08001270 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	4b10      	ldr	r3, [pc, #64]	; (80012bc <MX_DMA_Init+0x4c>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a0f      	ldr	r2, [pc, #60]	; (80012bc <MX_DMA_Init+0x4c>)
 8001280:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b0d      	ldr	r3, [pc, #52]	; (80012bc <MX_DMA_Init+0x4c>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2100      	movs	r1, #0
 8001296:	203b      	movs	r0, #59	; 0x3b
 8001298:	f001 f9ff 	bl	800269a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800129c:	203b      	movs	r0, #59	; 0x3b
 800129e:	f001 fa18 	bl	80026d2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2100      	movs	r1, #0
 80012a6:	203c      	movs	r0, #60	; 0x3c
 80012a8:	f001 f9f7 	bl	800269a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80012ac:	203c      	movs	r0, #60	; 0x3c
 80012ae:	f001 fa10 	bl	80026d2 <HAL_NVIC_EnableIRQ>

}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800

080012c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b088      	sub	sp, #32
 80012c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c6:	f107 030c 	add.w	r3, r7, #12
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
 80012d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	4b2a      	ldr	r3, [pc, #168]	; (8001384 <MX_GPIO_Init+0xc4>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a29      	ldr	r2, [pc, #164]	; (8001384 <MX_GPIO_Init+0xc4>)
 80012e0:	f043 0320 	orr.w	r3, r3, #32
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b27      	ldr	r3, [pc, #156]	; (8001384 <MX_GPIO_Init+0xc4>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0320 	and.w	r3, r3, #32
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	4b23      	ldr	r3, [pc, #140]	; (8001384 <MX_GPIO_Init+0xc4>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a22      	ldr	r2, [pc, #136]	; (8001384 <MX_GPIO_Init+0xc4>)
 80012fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b20      	ldr	r3, [pc, #128]	; (8001384 <MX_GPIO_Init+0xc4>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	603b      	str	r3, [r7, #0]
 8001312:	4b1c      	ldr	r3, [pc, #112]	; (8001384 <MX_GPIO_Init+0xc4>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a1b      	ldr	r2, [pc, #108]	; (8001384 <MX_GPIO_Init+0xc4>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b19      	ldr	r3, [pc, #100]	; (8001384 <MX_GPIO_Init+0xc4>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	603b      	str	r3, [r7, #0]
 8001328:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI5_CS_GPIO_Port, SPI5_CS_Pin, GPIO_PIN_SET);
 800132a:	2201      	movs	r2, #1
 800132c:	2140      	movs	r1, #64	; 0x40
 800132e:	4816      	ldr	r0, [pc, #88]	; (8001388 <MX_GPIO_Init+0xc8>)
 8001330:	f001 ff28 	bl	8003184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LD__Red_Pin|LD2_Green_Pin|LD3_Blue_Pin, GPIO_PIN_SET);
 8001334:	2201      	movs	r2, #1
 8001336:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800133a:	4814      	ldr	r0, [pc, #80]	; (800138c <MX_GPIO_Init+0xcc>)
 800133c:	f001 ff22 	bl	8003184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI5_CS_Pin */
  GPIO_InitStruct.Pin = SPI5_CS_Pin;
 8001340:	2340      	movs	r3, #64	; 0x40
 8001342:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001344:	2301      	movs	r3, #1
 8001346:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2300      	movs	r3, #0
 800134e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI5_CS_GPIO_Port, &GPIO_InitStruct);
 8001350:	f107 030c 	add.w	r3, r7, #12
 8001354:	4619      	mov	r1, r3
 8001356:	480c      	ldr	r0, [pc, #48]	; (8001388 <MX_GPIO_Init+0xc8>)
 8001358:	f001 fd68 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD__Red_Pin LD2_Green_Pin LD3_Blue_Pin */
  GPIO_InitStruct.Pin = LD__Red_Pin|LD2_Green_Pin|LD3_Blue_Pin;
 800135c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001360:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001362:	2301      	movs	r3, #1
 8001364:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136a:	2300      	movs	r3, #0
 800136c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800136e:	f107 030c 	add.w	r3, r7, #12
 8001372:	4619      	mov	r1, r3
 8001374:	4805      	ldr	r0, [pc, #20]	; (800138c <MX_GPIO_Init+0xcc>)
 8001376:	f001 fd59 	bl	8002e2c <HAL_GPIO_Init>

}
 800137a:	bf00      	nop
 800137c:	3720      	adds	r7, #32
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40023800 	.word	0x40023800
 8001388:	40021400 	.word	0x40021400
 800138c:	40021c00 	.word	0x40021c00

08001390 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001394:	b672      	cpsid	i
}
 8001396:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001398:	e7fe      	b.n	8001398 <Error_Handler+0x8>
	...

0800139c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <HAL_MspInit+0x4c>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013aa:	4a0f      	ldr	r2, [pc, #60]	; (80013e8 <HAL_MspInit+0x4c>)
 80013ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013b0:	6453      	str	r3, [r2, #68]	; 0x44
 80013b2:	4b0d      	ldr	r3, [pc, #52]	; (80013e8 <HAL_MspInit+0x4c>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	603b      	str	r3, [r7, #0]
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <HAL_MspInit+0x4c>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	4a08      	ldr	r2, [pc, #32]	; (80013e8 <HAL_MspInit+0x4c>)
 80013c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013cc:	6413      	str	r3, [r2, #64]	; 0x40
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_MspInit+0x4c>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d6:	603b      	str	r3, [r7, #0]
 80013d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800

080013ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	; 0x28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a4c      	ldr	r2, [pc, #304]	; (800153c <HAL_SPI_MspInit+0x150>)
 800140a:	4293      	cmp	r3, r2
 800140c:	f040 8091 	bne.w	8001532 <HAL_SPI_MspInit+0x146>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001410:	2300      	movs	r3, #0
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	4b4a      	ldr	r3, [pc, #296]	; (8001540 <HAL_SPI_MspInit+0x154>)
 8001416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001418:	4a49      	ldr	r2, [pc, #292]	; (8001540 <HAL_SPI_MspInit+0x154>)
 800141a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800141e:	6453      	str	r3, [r2, #68]	; 0x44
 8001420:	4b47      	ldr	r3, [pc, #284]	; (8001540 <HAL_SPI_MspInit+0x154>)
 8001422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001424:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800142c:	2300      	movs	r3, #0
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	4b43      	ldr	r3, [pc, #268]	; (8001540 <HAL_SPI_MspInit+0x154>)
 8001432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001434:	4a42      	ldr	r2, [pc, #264]	; (8001540 <HAL_SPI_MspInit+0x154>)
 8001436:	f043 0320 	orr.w	r3, r3, #32
 800143a:	6313      	str	r3, [r2, #48]	; 0x30
 800143c:	4b40      	ldr	r3, [pc, #256]	; (8001540 <HAL_SPI_MspInit+0x154>)
 800143e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001440:	f003 0320 	and.w	r3, r3, #32
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001448:	f44f 7360 	mov.w	r3, #896	; 0x380
 800144c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144e:	2302      	movs	r3, #2
 8001450:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001456:	2303      	movs	r3, #3
 8001458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800145a:	2305      	movs	r3, #5
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800145e:	f107 0314 	add.w	r3, r7, #20
 8001462:	4619      	mov	r1, r3
 8001464:	4837      	ldr	r0, [pc, #220]	; (8001544 <HAL_SPI_MspInit+0x158>)
 8001466:	f001 fce1 	bl	8002e2c <HAL_GPIO_Init>

    /* SPI5 DMA Init */
    /* SPI5_RX Init */
    hdma_spi5_rx.Instance = DMA2_Stream3;
 800146a:	4b37      	ldr	r3, [pc, #220]	; (8001548 <HAL_SPI_MspInit+0x15c>)
 800146c:	4a37      	ldr	r2, [pc, #220]	; (800154c <HAL_SPI_MspInit+0x160>)
 800146e:	601a      	str	r2, [r3, #0]
    hdma_spi5_rx.Init.Channel = DMA_CHANNEL_2;
 8001470:	4b35      	ldr	r3, [pc, #212]	; (8001548 <HAL_SPI_MspInit+0x15c>)
 8001472:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001476:	605a      	str	r2, [r3, #4]
    hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001478:	4b33      	ldr	r3, [pc, #204]	; (8001548 <HAL_SPI_MspInit+0x15c>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
    hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800147e:	4b32      	ldr	r3, [pc, #200]	; (8001548 <HAL_SPI_MspInit+0x15c>)
 8001480:	2200      	movs	r2, #0
 8001482:	60da      	str	r2, [r3, #12]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001484:	4b30      	ldr	r3, [pc, #192]	; (8001548 <HAL_SPI_MspInit+0x15c>)
 8001486:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800148a:	611a      	str	r2, [r3, #16]
    hdma_spi5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800148c:	4b2e      	ldr	r3, [pc, #184]	; (8001548 <HAL_SPI_MspInit+0x15c>)
 800148e:	2200      	movs	r2, #0
 8001490:	615a      	str	r2, [r3, #20]
    hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001492:	4b2d      	ldr	r3, [pc, #180]	; (8001548 <HAL_SPI_MspInit+0x15c>)
 8001494:	2200      	movs	r2, #0
 8001496:	619a      	str	r2, [r3, #24]
    hdma_spi5_rx.Init.Mode = DMA_NORMAL;
 8001498:	4b2b      	ldr	r3, [pc, #172]	; (8001548 <HAL_SPI_MspInit+0x15c>)
 800149a:	2200      	movs	r2, #0
 800149c:	61da      	str	r2, [r3, #28]
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_LOW;
 800149e:	4b2a      	ldr	r3, [pc, #168]	; (8001548 <HAL_SPI_MspInit+0x15c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	621a      	str	r2, [r3, #32]
    hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014a4:	4b28      	ldr	r3, [pc, #160]	; (8001548 <HAL_SPI_MspInit+0x15c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 80014aa:	4827      	ldr	r0, [pc, #156]	; (8001548 <HAL_SPI_MspInit+0x15c>)
 80014ac:	f001 f92c 	bl	8002708 <HAL_DMA_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 80014b6:	f7ff ff6b 	bl	8001390 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi5_rx);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a22      	ldr	r2, [pc, #136]	; (8001548 <HAL_SPI_MspInit+0x15c>)
 80014be:	64da      	str	r2, [r3, #76]	; 0x4c
 80014c0:	4a21      	ldr	r2, [pc, #132]	; (8001548 <HAL_SPI_MspInit+0x15c>)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI5_TX Init */
    hdma_spi5_tx.Instance = DMA2_Stream4;
 80014c6:	4b22      	ldr	r3, [pc, #136]	; (8001550 <HAL_SPI_MspInit+0x164>)
 80014c8:	4a22      	ldr	r2, [pc, #136]	; (8001554 <HAL_SPI_MspInit+0x168>)
 80014ca:	601a      	str	r2, [r3, #0]
    hdma_spi5_tx.Init.Channel = DMA_CHANNEL_2;
 80014cc:	4b20      	ldr	r3, [pc, #128]	; (8001550 <HAL_SPI_MspInit+0x164>)
 80014ce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80014d2:	605a      	str	r2, [r3, #4]
    hdma_spi5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014d4:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <HAL_SPI_MspInit+0x164>)
 80014d6:	2240      	movs	r2, #64	; 0x40
 80014d8:	609a      	str	r2, [r3, #8]
    hdma_spi5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014da:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <HAL_SPI_MspInit+0x164>)
 80014dc:	2200      	movs	r2, #0
 80014de:	60da      	str	r2, [r3, #12]
    hdma_spi5_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014e0:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <HAL_SPI_MspInit+0x164>)
 80014e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014e6:	611a      	str	r2, [r3, #16]
    hdma_spi5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014e8:	4b19      	ldr	r3, [pc, #100]	; (8001550 <HAL_SPI_MspInit+0x164>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	615a      	str	r2, [r3, #20]
    hdma_spi5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014ee:	4b18      	ldr	r3, [pc, #96]	; (8001550 <HAL_SPI_MspInit+0x164>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]
    hdma_spi5_tx.Init.Mode = DMA_NORMAL;
 80014f4:	4b16      	ldr	r3, [pc, #88]	; (8001550 <HAL_SPI_MspInit+0x164>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	61da      	str	r2, [r3, #28]
    hdma_spi5_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <HAL_SPI_MspInit+0x164>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	621a      	str	r2, [r3, #32]
    hdma_spi5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001500:	4b13      	ldr	r3, [pc, #76]	; (8001550 <HAL_SPI_MspInit+0x164>)
 8001502:	2200      	movs	r2, #0
 8001504:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi5_tx) != HAL_OK)
 8001506:	4812      	ldr	r0, [pc, #72]	; (8001550 <HAL_SPI_MspInit+0x164>)
 8001508:	f001 f8fe 	bl	8002708 <HAL_DMA_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 8001512:	f7ff ff3d 	bl	8001390 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi5_tx);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a0d      	ldr	r2, [pc, #52]	; (8001550 <HAL_SPI_MspInit+0x164>)
 800151a:	649a      	str	r2, [r3, #72]	; 0x48
 800151c:	4a0c      	ldr	r2, [pc, #48]	; (8001550 <HAL_SPI_MspInit+0x164>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI5 interrupt Init */
    HAL_NVIC_SetPriority(SPI5_IRQn, 0, 0);
 8001522:	2200      	movs	r2, #0
 8001524:	2100      	movs	r1, #0
 8001526:	2055      	movs	r0, #85	; 0x55
 8001528:	f001 f8b7 	bl	800269a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 800152c:	2055      	movs	r0, #85	; 0x55
 800152e:	f001 f8d0 	bl	80026d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001532:	bf00      	nop
 8001534:	3728      	adds	r7, #40	; 0x28
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40015000 	.word	0x40015000
 8001540:	40023800 	.word	0x40023800
 8001544:	40021400 	.word	0x40021400
 8001548:	20001194 	.word	0x20001194
 800154c:	40026458 	.word	0x40026458
 8001550:	20001238 	.word	0x20001238
 8001554:	40026470 	.word	0x40026470

08001558 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	; 0x28
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a19      	ldr	r2, [pc, #100]	; (80015dc <HAL_UART_MspInit+0x84>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d12c      	bne.n	80015d4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	4b18      	ldr	r3, [pc, #96]	; (80015e0 <HAL_UART_MspInit+0x88>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	4a17      	ldr	r2, [pc, #92]	; (80015e0 <HAL_UART_MspInit+0x88>)
 8001584:	f043 0310 	orr.w	r3, r3, #16
 8001588:	6453      	str	r3, [r2, #68]	; 0x44
 800158a:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <HAL_UART_MspInit+0x88>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158e:	f003 0310 	and.w	r3, r3, #16
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <HAL_UART_MspInit+0x88>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a10      	ldr	r2, [pc, #64]	; (80015e0 <HAL_UART_MspInit+0x88>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <HAL_UART_MspInit+0x88>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80015b2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b8:	2302      	movs	r3, #2
 80015ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c0:	2303      	movs	r3, #3
 80015c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015c4:	2307      	movs	r3, #7
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	4619      	mov	r1, r3
 80015ce:	4805      	ldr	r0, [pc, #20]	; (80015e4 <HAL_UART_MspInit+0x8c>)
 80015d0:	f001 fc2c 	bl	8002e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80015d4:	bf00      	nop
 80015d6:	3728      	adds	r7, #40	; 0x28
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40011000 	.word	0x40011000
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40020000 	.word	0x40020000

080015e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015ec:	e7fe      	b.n	80015ec <NMI_Handler+0x4>

080015ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015f2:	e7fe      	b.n	80015f2 <HardFault_Handler+0x4>

080015f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <MemManage_Handler+0x4>

080015fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015fe:	e7fe      	b.n	80015fe <BusFault_Handler+0x4>

08001600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001604:	e7fe      	b.n	8001604 <UsageFault_Handler+0x4>

08001606 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001634:	f000 ff12 	bl	800245c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}

0800163c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_rx);
 8001640:	4802      	ldr	r0, [pc, #8]	; (800164c <DMA2_Stream3_IRQHandler+0x10>)
 8001642:	f001 f989 	bl	8002958 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20001194 	.word	0x20001194

08001650 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_tx);
 8001654:	4802      	ldr	r0, [pc, #8]	; (8001660 <DMA2_Stream4_IRQHandler+0x10>)
 8001656:	f001 f97f 	bl	8002958 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20001238 	.word	0x20001238

08001664 <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 8001668:	4802      	ldr	r0, [pc, #8]	; (8001674 <SPI5_IRQHandler+0x10>)
 800166a:	f002 fd11 	bl	8004090 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	2000113c 	.word	0x2000113c

08001678 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	e00a      	b.n	80016a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800168a:	f3af 8000 	nop.w
 800168e:	4601      	mov	r1, r0
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	1c5a      	adds	r2, r3, #1
 8001694:	60ba      	str	r2, [r7, #8]
 8001696:	b2ca      	uxtb	r2, r1
 8001698:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	3301      	adds	r3, #1
 800169e:	617b      	str	r3, [r7, #20]
 80016a0:	697a      	ldr	r2, [r7, #20]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	dbf0      	blt.n	800168a <_read+0x12>
	}

return len;
 80016a8:	687b      	ldr	r3, [r7, #4]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3718      	adds	r7, #24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b083      	sub	sp, #12
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
	return -1;
 80016ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016be:	4618      	mov	r0, r3
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b083      	sub	sp, #12
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
 80016d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016da:	605a      	str	r2, [r3, #4]
	return 0;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <_isatty>:

int _isatty(int file)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
	return 1;
 80016f2:	2301      	movs	r3, #1
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
	return 0;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
	...

0800171c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001724:	4a14      	ldr	r2, [pc, #80]	; (8001778 <_sbrk+0x5c>)
 8001726:	4b15      	ldr	r3, [pc, #84]	; (800177c <_sbrk+0x60>)
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001730:	4b13      	ldr	r3, [pc, #76]	; (8001780 <_sbrk+0x64>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d102      	bne.n	800173e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <_sbrk+0x64>)
 800173a:	4a12      	ldr	r2, [pc, #72]	; (8001784 <_sbrk+0x68>)
 800173c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800173e:	4b10      	ldr	r3, [pc, #64]	; (8001780 <_sbrk+0x64>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4413      	add	r3, r2
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	429a      	cmp	r2, r3
 800174a:	d207      	bcs.n	800175c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800174c:	f006 fc0c 	bl	8007f68 <__errno>
 8001750:	4603      	mov	r3, r0
 8001752:	220c      	movs	r2, #12
 8001754:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001756:	f04f 33ff 	mov.w	r3, #4294967295
 800175a:	e009      	b.n	8001770 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800175c:	4b08      	ldr	r3, [pc, #32]	; (8001780 <_sbrk+0x64>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001762:	4b07      	ldr	r3, [pc, #28]	; (8001780 <_sbrk+0x64>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4413      	add	r3, r2
 800176a:	4a05      	ldr	r2, [pc, #20]	; (8001780 <_sbrk+0x64>)
 800176c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800176e:	68fb      	ldr	r3, [r7, #12]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3718      	adds	r7, #24
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20030000 	.word	0x20030000
 800177c:	00000400 	.word	0x00000400
 8001780:	200000bc 	.word	0x200000bc
 8001784:	20004380 	.word	0x20004380

08001788 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <SystemInit+0x20>)
 800178e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001792:	4a05      	ldr	r2, [pc, #20]	; (80017a8 <SystemInit+0x20>)
 8001794:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001798:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <W25Qxxx_SPI>:
  * @brief spi transmit and receive
  * @param data: [in] transmit data
  * @retval return received data [Byte]
  */
static uint8_t W25Qxxx_SPI(uint8_t data)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;

	HAL_SPI_TransmitReceive_DMA(&hspi_flash, &data, &ret, 1);
 80017b6:	f107 020f 	add.w	r2, r7, #15
 80017ba:	1df9      	adds	r1, r7, #7
 80017bc:	2301      	movs	r3, #1
 80017be:	4811      	ldr	r0, [pc, #68]	; (8001804 <W25Qxxx_SPI+0x58>)
 80017c0:	f002 fb64 	bl	8003e8c <HAL_SPI_TransmitReceive_DMA>

	uint32_t endTick = 0, startTick = HAL_GetTick();
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]
 80017c8:	f000 fe5c 	bl	8002484 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]
	do {
		endTick = HAL_GetTick();
 80017ce:	f000 fe59 	bl	8002484 <HAL_GetTick>
 80017d2:	6178      	str	r0, [r7, #20]
	} while ((WriteReadStatus==0) && (endTick-startTick)<SPI_FLASH_TIMEOUT);
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <W25Qxxx_SPI+0x5c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d106      	bne.n	80017ea <W25Qxxx_SPI+0x3e>
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	f247 522f 	movw	r2, #29999	; 0x752f
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d9f1      	bls.n	80017ce <W25Qxxx_SPI+0x22>
	if (WriteReadStatus)
 80017ea:	4b07      	ldr	r3, [pc, #28]	; (8001808 <W25Qxxx_SPI+0x5c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d002      	beq.n	80017f8 <W25Qxxx_SPI+0x4c>
		WriteReadStatus = 0;
 80017f2:	4b05      	ldr	r3, [pc, #20]	; (8001808 <W25Qxxx_SPI+0x5c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
	return ret;
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	2000113c 	.word	0x2000113c
 8001808:	200000c8 	.word	0x200000c8

0800180c <W25Qxxx_SPI_Tx>:
  * @brief spi transmit
  * @param *pData: [in] transmit data
  * @param Size:   [in] size of data
  */
static void W25Qxxx_SPI_Tx(uint8_t *pData, uint16_t Size)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	460b      	mov	r3, r1
 8001816:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit_DMA(&hspi_flash, pData, Size);
 8001818:	887b      	ldrh	r3, [r7, #2]
 800181a:	461a      	mov	r2, r3
 800181c:	6879      	ldr	r1, [r7, #4]
 800181e:	4810      	ldr	r0, [pc, #64]	; (8001860 <W25Qxxx_SPI_Tx+0x54>)
 8001820:	f002 f9b6 	bl	8003b90 <HAL_SPI_Transmit_DMA>

	uint32_t endTick = 0, startTick = HAL_GetTick();
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	f000 fe2c 	bl	8002484 <HAL_GetTick>
 800182c:	60b8      	str	r0, [r7, #8]
	do {
		endTick = HAL_GetTick();
 800182e:	f000 fe29 	bl	8002484 <HAL_GetTick>
 8001832:	60f8      	str	r0, [r7, #12]
	} while ((WriteStatus==0) && (endTick-startTick)<SPI_FLASH_TIMEOUT);
 8001834:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <W25Qxxx_SPI_Tx+0x58>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d106      	bne.n	800184a <W25Qxxx_SPI_Tx+0x3e>
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	f247 522f 	movw	r2, #29999	; 0x752f
 8001846:	4293      	cmp	r3, r2
 8001848:	d9f1      	bls.n	800182e <W25Qxxx_SPI_Tx+0x22>
	if (WriteStatus)
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <W25Qxxx_SPI_Tx+0x58>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d002      	beq.n	8001858 <W25Qxxx_SPI_Tx+0x4c>
		WriteStatus = 0;
 8001852:	4b04      	ldr	r3, [pc, #16]	; (8001864 <W25Qxxx_SPI_Tx+0x58>)
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
}
 8001858:	bf00      	nop
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	2000113c 	.word	0x2000113c
 8001864:	200000c0 	.word	0x200000c0

08001868 <W25Qxxx_SPI_Rx>:
  * @param *pData: [in] receive data
  * @param Size:   [in] size of data
  * @retval HAL status
  */
static HAL_StatusTypeDef W25Qxxx_SPI_Rx(uint8_t *pData, uint16_t Size)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef sta = HAL_OK;
 8001874:	2300      	movs	r3, #0
 8001876:	75fb      	strb	r3, [r7, #23]
	sta = HAL_SPI_Receive_DMA(&hspi_flash, pData, Size);
 8001878:	887b      	ldrh	r3, [r7, #2]
 800187a:	461a      	mov	r2, r3
 800187c:	6879      	ldr	r1, [r7, #4]
 800187e:	4816      	ldr	r0, [pc, #88]	; (80018d8 <W25Qxxx_SPI_Rx+0x70>)
 8001880:	f002 fa3c 	bl	8003cfc <HAL_SPI_Receive_DMA>
 8001884:	4603      	mov	r3, r0
 8001886:	75fb      	strb	r3, [r7, #23]

	uint32_t endTick = 0, startTick = HAL_GetTick();
 8001888:	2300      	movs	r3, #0
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	f000 fdfa 	bl	8002484 <HAL_GetTick>
 8001890:	60f8      	str	r0, [r7, #12]
	do {
		endTick = HAL_GetTick();
 8001892:	f000 fdf7 	bl	8002484 <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]
	} while ((ReadStatus==0) && (endTick-startTick)<SPI_FLASH_TIMEOUT);
 8001898:	4b10      	ldr	r3, [pc, #64]	; (80018dc <W25Qxxx_SPI_Rx+0x74>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d106      	bne.n	80018ae <W25Qxxx_SPI_Rx+0x46>
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	f247 522f 	movw	r2, #29999	; 0x752f
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d9f1      	bls.n	8001892 <W25Qxxx_SPI_Rx+0x2a>

	if ((endTick-startTick)>=SPI_FLASH_TIMEOUT)
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	f247 522f 	movw	r2, #29999	; 0x752f
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d901      	bls.n	80018c0 <W25Qxxx_SPI_Rx+0x58>
		return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e007      	b.n	80018d0 <W25Qxxx_SPI_Rx+0x68>

	if (ReadStatus)
 80018c0:	4b06      	ldr	r3, [pc, #24]	; (80018dc <W25Qxxx_SPI_Rx+0x74>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d002      	beq.n	80018ce <W25Qxxx_SPI_Rx+0x66>
		ReadStatus = 0;
 80018c8:	4b04      	ldr	r3, [pc, #16]	; (80018dc <W25Qxxx_SPI_Rx+0x74>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]

	return sta;
 80018ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	2000113c 	.word	0x2000113c
 80018dc:	200000c4 	.word	0x200000c4

080018e0 <W25Qxxx_Enable>:
  * 	Used before other operations
  * @param  none
  * @retval none
  */
static void W25Qxxx_Enable(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CS_PORT, SPI_CS_PIN, GPIO_PIN_RESET);
 80018e4:	2200      	movs	r2, #0
 80018e6:	2140      	movs	r1, #64	; 0x40
 80018e8:	4802      	ldr	r0, [pc, #8]	; (80018f4 <W25Qxxx_Enable+0x14>)
 80018ea:	f001 fc4b 	bl	8003184 <HAL_GPIO_WritePin>
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40021400 	.word	0x40021400

080018f8 <W25Qxxx_Disable>:
  * 	Used after other operations
  * @param  none
  * @retval none
  */
static void W25Qxxx_Disable(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CS_PORT, SPI_CS_PIN, GPIO_PIN_SET);
 80018fc:	2201      	movs	r2, #1
 80018fe:	2140      	movs	r1, #64	; 0x40
 8001900:	4802      	ldr	r0, [pc, #8]	; (800190c <W25Qxxx_Disable+0x14>)
 8001902:	f001 fc3f 	bl	8003184 <HAL_GPIO_WritePin>
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40021400 	.word	0x40021400

08001910 <W25Qxxx_Power_Up>:


static void W25Qxxx_Power_Up(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
	W25Qxxx_Enable();
 8001914:	f7ff ffe4 	bl	80018e0 <W25Qxxx_Enable>

	W25Qxxx_SPI(CMD_Device_ID);
 8001918:	20ab      	movs	r0, #171	; 0xab
 800191a:	f7ff ff47 	bl	80017ac <W25Qxxx_SPI>
	W25Qxxx_SPI(CMD_DUMMY);
 800191e:	2000      	movs	r0, #0
 8001920:	f7ff ff44 	bl	80017ac <W25Qxxx_SPI>
	W25Qxxx_SPI(CMD_DUMMY);
 8001924:	2000      	movs	r0, #0
 8001926:	f7ff ff41 	bl	80017ac <W25Qxxx_SPI>
	W25Qxxx_SPI(CMD_DUMMY);
 800192a:	2000      	movs	r0, #0
 800192c:	f7ff ff3e 	bl	80017ac <W25Qxxx_SPI>
	W25Qxxx_Device_ID = W25Qxxx_SPI(CMD_DUMMY);
 8001930:	2000      	movs	r0, #0
 8001932:	f7ff ff3b 	bl	80017ac <W25Qxxx_SPI>
 8001936:	4603      	mov	r3, r0
 8001938:	461a      	mov	r2, r3
 800193a:	4b03      	ldr	r3, [pc, #12]	; (8001948 <W25Qxxx_Power_Up+0x38>)
 800193c:	701a      	strb	r2, [r3, #0]

	W25Qxxx_Disable();
 800193e:	f7ff ffdb 	bl	80018f8 <W25Qxxx_Disable>
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200022dc 	.word	0x200022dc

0800194c <W25Qxxx_Read_Manu_Dev_ID>:

/** ############################################################################################
  * @brief get W25Qxxx Manufacturer + Device ID [16-bit]
  */
static void W25Qxxx_Read_Manu_Dev_ID(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
	uint16_t Temp0 = 0, Temp1 = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	80fb      	strh	r3, [r7, #6]
 8001956:	2300      	movs	r3, #0
 8001958:	80bb      	strh	r3, [r7, #4]

	W25Qxxx_Enable();
 800195a:	f7ff ffc1 	bl	80018e0 <W25Qxxx_Enable>

	W25Qxxx_SPI(CMD_Manufacture_ID);
 800195e:	2090      	movs	r0, #144	; 0x90
 8001960:	f7ff ff24 	bl	80017ac <W25Qxxx_SPI>
	W25Qxxx_SPI(CMD_DUMMY);
 8001964:	2000      	movs	r0, #0
 8001966:	f7ff ff21 	bl	80017ac <W25Qxxx_SPI>
	W25Qxxx_SPI(CMD_DUMMY);
 800196a:	2000      	movs	r0, #0
 800196c:	f7ff ff1e 	bl	80017ac <W25Qxxx_SPI>
	W25Qxxx_SPI(CMD_DUMMY);
 8001970:	2000      	movs	r0, #0
 8001972:	f7ff ff1b 	bl	80017ac <W25Qxxx_SPI>
	Temp0 = W25Qxxx_SPI(CMD_DUMMY);
 8001976:	2000      	movs	r0, #0
 8001978:	f7ff ff18 	bl	80017ac <W25Qxxx_SPI>
 800197c:	4603      	mov	r3, r0
 800197e:	80fb      	strh	r3, [r7, #6]
	Temp1 = W25Qxxx_SPI(CMD_DUMMY);
 8001980:	2000      	movs	r0, #0
 8001982:	f7ff ff13 	bl	80017ac <W25Qxxx_SPI>
 8001986:	4603      	mov	r3, r0
 8001988:	80bb      	strh	r3, [r7, #4]

	W25Qxxx_Disable();
 800198a:	f7ff ffb5 	bl	80018f8 <W25Qxxx_Disable>
	W25Qxxx_Manufacturer_Device_ID = (Temp0 << 8) | Temp1;
 800198e:	88fb      	ldrh	r3, [r7, #6]
 8001990:	021b      	lsls	r3, r3, #8
 8001992:	b21a      	sxth	r2, r3
 8001994:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001998:	4313      	orrs	r3, r2
 800199a:	b21b      	sxth	r3, r3
 800199c:	b29a      	uxth	r2, r3
 800199e:	4b03      	ldr	r3, [pc, #12]	; (80019ac <W25Qxxx_Read_Manu_Dev_ID+0x60>)
 80019a0:	801a      	strh	r2, [r3, #0]
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	200022f0 	.word	0x200022f0

080019b0 <W25Qxxx_Read_JEDEC_ID>:

/** ############################################################################################
  * @brief get W25Qxxx JEDEC ID [24-bit]
  */
static void W25Qxxx_Read_JEDEC_ID(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
	uint32_t JEDEC_ID = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	2300      	movs	r3, #0
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	2300      	movs	r3, #0
 80019c0:	607b      	str	r3, [r7, #4]
 80019c2:	2300      	movs	r3, #0
 80019c4:	603b      	str	r3, [r7, #0]

	W25Qxxx_Enable();
 80019c6:	f7ff ff8b 	bl	80018e0 <W25Qxxx_Enable>

	W25Qxxx_SPI(CMD_JEDEC_ID);
 80019ca:	209f      	movs	r0, #159	; 0x9f
 80019cc:	f7ff feee 	bl	80017ac <W25Qxxx_SPI>
	Temp0 = W25Qxxx_SPI(CMD_DUMMY);
 80019d0:	2000      	movs	r0, #0
 80019d2:	f7ff feeb 	bl	80017ac <W25Qxxx_SPI>
 80019d6:	4603      	mov	r3, r0
 80019d8:	60bb      	str	r3, [r7, #8]
	Temp1 = W25Qxxx_SPI(CMD_DUMMY);
 80019da:	2000      	movs	r0, #0
 80019dc:	f7ff fee6 	bl	80017ac <W25Qxxx_SPI>
 80019e0:	4603      	mov	r3, r0
 80019e2:	607b      	str	r3, [r7, #4]
	Temp2 = W25Qxxx_SPI(CMD_DUMMY);
 80019e4:	2000      	movs	r0, #0
 80019e6:	f7ff fee1 	bl	80017ac <W25Qxxx_SPI>
 80019ea:	4603      	mov	r3, r0
 80019ec:	603b      	str	r3, [r7, #0]

	W25Qxxx_Disable();
 80019ee:	f7ff ff83 	bl	80018f8 <W25Qxxx_Disable>
	JEDEC_ID = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	041a      	lsls	r2, r3, #16
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	021b      	lsls	r3, r3, #8
 80019fa:	4313      	orrs	r3, r2
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	60fb      	str	r3, [r7, #12]
	W25Qxxx_JEDEC_ID = JEDEC_ID;
 8001a02:	4a03      	ldr	r2, [pc, #12]	; (8001a10 <W25Qxxx_Read_JEDEC_ID+0x60>)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	6013      	str	r3, [r2, #0]
}
 8001a08:	bf00      	nop
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	200022d0 	.word	0x200022d0

08001a14 <W25Qxxx_Read_Unique_ID>:

/** ############################################################################################
  * @brief  get W25Qxxx Unique ID [64-bit 8Byte-array]
  */
static void W25Qxxx_Read_Unique_ID(void)
{
 8001a14:	b590      	push	{r4, r7, lr}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
	W25Qxxx_Enable();
 8001a1a:	f7ff ff61 	bl	80018e0 <W25Qxxx_Enable>

	W25Qxxx_SPI(CMD_Unique_ID);
 8001a1e:	204b      	movs	r0, #75	; 0x4b
 8001a20:	f7ff fec4 	bl	80017ac <W25Qxxx_SPI>
	for (uint8_t i = 0; i < 4; i++)
 8001a24:	2300      	movs	r3, #0
 8001a26:	71fb      	strb	r3, [r7, #7]
 8001a28:	e005      	b.n	8001a36 <W25Qxxx_Read_Unique_ID+0x22>
		W25Qxxx_SPI(CMD_DUMMY);
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	f7ff febe 	bl	80017ac <W25Qxxx_SPI>
	for (uint8_t i = 0; i < 4; i++)
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	3301      	adds	r3, #1
 8001a34:	71fb      	strb	r3, [r7, #7]
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	2b03      	cmp	r3, #3
 8001a3a:	d9f6      	bls.n	8001a2a <W25Qxxx_Read_Unique_ID+0x16>
	for (uint8_t i = 0; i < 8; i++)
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	71bb      	strb	r3, [r7, #6]
 8001a40:	e00a      	b.n	8001a58 <W25Qxxx_Read_Unique_ID+0x44>
		W25Qxxx_UniqID[i] = W25Qxxx_SPI(CMD_DUMMY);
 8001a42:	79bc      	ldrb	r4, [r7, #6]
 8001a44:	2000      	movs	r0, #0
 8001a46:	f7ff feb1 	bl	80017ac <W25Qxxx_SPI>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <W25Qxxx_Read_Unique_ID+0x58>)
 8001a50:	551a      	strb	r2, [r3, r4]
	for (uint8_t i = 0; i < 8; i++)
 8001a52:	79bb      	ldrb	r3, [r7, #6]
 8001a54:	3301      	adds	r3, #1
 8001a56:	71bb      	strb	r3, [r7, #6]
 8001a58:	79bb      	ldrb	r3, [r7, #6]
 8001a5a:	2b07      	cmp	r3, #7
 8001a5c:	d9f1      	bls.n	8001a42 <W25Qxxx_Read_Unique_ID+0x2e>

	W25Qxxx_Disable();
 8001a5e:	f7ff ff4b 	bl	80018f8 <W25Qxxx_Disable>
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd90      	pop	{r4, r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	200022d4 	.word	0x200022d4

08001a70 <W25Qxxx_Write_Enable>:
	instruction is entered by driving /CS low, shifting the instruction code “06h” into the Data Input (DI) pin on
	the rising edge of CLK, and then driving /CS high.
  * @param  none
  */
static void W25Qxxx_Write_Enable(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
	W25Qxxx_Enable();
 8001a74:	f7ff ff34 	bl	80018e0 <W25Qxxx_Enable>

	W25Qxxx_SPI(CMD_Write_Enable);
 8001a78:	2006      	movs	r0, #6
 8001a7a:	f7ff fe97 	bl	80017ac <W25Qxxx_SPI>

	W25Qxxx_Disable();
 8001a7e:	f7ff ff3b 	bl	80018f8 <W25Qxxx_Disable>
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <W25Qxxx_WaitForWriteEnd>:
/** ############################################################################################
  * @brief detect SR1-bit0 BUSY bit
  *
  */
static int8_t W25Qxxx_WaitForWriteEnd(void)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b084      	sub	sp, #16
 8001a8a:	af00      	add	r7, sp, #0
	W25Qxxx_Enable();
 8001a8c:	f7ff ff28 	bl	80018e0 <W25Qxxx_Enable>

	uint32_t sTime = HAL_GetTick();
 8001a90:	f000 fcf8 	bl	8002484 <HAL_GetTick>
 8001a94:	60f8      	str	r0, [r7, #12]
	uint32_t useTime = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	60bb      	str	r3, [r7, #8]
	uint8_t reg_res;
	W25Qxxx_SPI(CMD_Reg_1_Read);
 8001a9a:	2005      	movs	r0, #5
 8001a9c:	f7ff fe86 	bl	80017ac <W25Qxxx_SPI>
	do
	{
		reg_res = W25Qxxx_SPI(CMD_DUMMY);
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	f7ff fe83 	bl	80017ac <W25Qxxx_SPI>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	71fb      	strb	r3, [r7, #7]

		useTime = HAL_GetTick() - sTime;
 8001aaa:	f000 fceb 	bl	8002484 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	60bb      	str	r3, [r7, #8]
	} while (((reg_res & SR1_S0_BUSY) == SR1_S0_BUSY) && (useTime < SPI_FLASH_TIMEOUT));
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d004      	beq.n	8001aca <W25Qxxx_WaitForWriteEnd+0x44>
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	f247 522f 	movw	r2, #29999	; 0x752f
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d9ea      	bls.n	8001aa0 <W25Qxxx_WaitForWriteEnd+0x1a>

	W25Qxxx_Disable();
 8001aca:	f7ff ff15 	bl	80018f8 <W25Qxxx_Disable>

	if (useTime >= SPI_FLASH_TIMEOUT)	// timeOut return 1
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	f247 522f 	movw	r2, #29999	; 0x752f
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d901      	bls.n	8001adc <W25Qxxx_WaitForWriteEnd+0x56>
		return 1;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e000      	b.n	8001ade <W25Qxxx_WaitForWriteEnd+0x58>
	return 0;	// passed return 0
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <W25Qxxx_SectorToPage>:
/** ############################################################################################
  * @brief  sector convert to pageAddr
  * @retval return pageAddr
  */
static uint32_t W25Qxxx_SectorToPage(uint32_t SectorAddress)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
	return (SectorAddress * W25Qxxx_SectorSize) / W25Qxxx_PageSize;
 8001af0:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <W25Qxxx_SectorToPage+0x28>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	fb02 f303 	mul.w	r3, r2, r3
 8001afa:	4a06      	ldr	r2, [pc, #24]	; (8001b14 <W25Qxxx_SectorToPage+0x2c>)
 8001afc:	8812      	ldrh	r2, [r2, #0]
 8001afe:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	200022f4 	.word	0x200022f4
 8001b14:	200022c8 	.word	0x200022c8

08001b18 <W25Qxxx_Read_REG_x>:
  * @brief  Read Status Register-1, 2, 3(05h, 35h, 15h)
  * @param  reg_x: [in] 1,2,3
  * @retval retrun SR_x value [Byte]
  */
uint8_t W25Qxxx_Read_REG_x(uint8_t reg_x)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	71fb      	strb	r3, [r7, #7]
	W25Qxxx_Enable();
 8001b22:	f7ff fedd 	bl	80018e0 <W25Qxxx_Enable>

	uint8_t res;

	switch(reg_x)
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	2b03      	cmp	r3, #3
 8001b2a:	d018      	beq.n	8001b5e <W25Qxxx_Read_REG_x+0x46>
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	dc1f      	bgt.n	8001b70 <W25Qxxx_Read_REG_x+0x58>
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d002      	beq.n	8001b3a <W25Qxxx_Read_REG_x+0x22>
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d009      	beq.n	8001b4c <W25Qxxx_Read_REG_x+0x34>
		case 3:	// reg 3
			W25Qxxx_SPI(CMD_Reg_3_Read);
			res = W25Qxxx_SPI(CMD_DUMMY);
			break;
		default:
			break;
 8001b38:	e01a      	b.n	8001b70 <W25Qxxx_Read_REG_x+0x58>
			W25Qxxx_SPI(CMD_Reg_1_Read);
 8001b3a:	2005      	movs	r0, #5
 8001b3c:	f7ff fe36 	bl	80017ac <W25Qxxx_SPI>
			res = W25Qxxx_SPI(CMD_DUMMY);
 8001b40:	2000      	movs	r0, #0
 8001b42:	f7ff fe33 	bl	80017ac <W25Qxxx_SPI>
 8001b46:	4603      	mov	r3, r0
 8001b48:	73fb      	strb	r3, [r7, #15]
			break;
 8001b4a:	e012      	b.n	8001b72 <W25Qxxx_Read_REG_x+0x5a>
			W25Qxxx_SPI(CMD_Reg_2_Read);
 8001b4c:	2035      	movs	r0, #53	; 0x35
 8001b4e:	f7ff fe2d 	bl	80017ac <W25Qxxx_SPI>
			res = W25Qxxx_SPI(CMD_DUMMY);
 8001b52:	2000      	movs	r0, #0
 8001b54:	f7ff fe2a 	bl	80017ac <W25Qxxx_SPI>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	73fb      	strb	r3, [r7, #15]
			break;
 8001b5c:	e009      	b.n	8001b72 <W25Qxxx_Read_REG_x+0x5a>
			W25Qxxx_SPI(CMD_Reg_3_Read);
 8001b5e:	2015      	movs	r0, #21
 8001b60:	f7ff fe24 	bl	80017ac <W25Qxxx_SPI>
			res = W25Qxxx_SPI(CMD_DUMMY);
 8001b64:	2000      	movs	r0, #0
 8001b66:	f7ff fe21 	bl	80017ac <W25Qxxx_SPI>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	73fb      	strb	r3, [r7, #15]
			break;
 8001b6e:	e000      	b.n	8001b72 <W25Qxxx_Read_REG_x+0x5a>
			break;
 8001b70:	bf00      	nop
	}

	W25Qxxx_Disable();
 8001b72:	f7ff fec1 	bl	80018f8 <W25Qxxx_Disable>

	return res;
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <W25Qxxx_Init>:
/** ############################################################################################
  * @brief W25Qxxx Init global static variable
  * @retval status 0:passed  1:failed
  */
uint8_t W25Qxxx_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
	while (HAL_GetTick() < 20)
 8001b86:	e002      	b.n	8001b8e <W25Qxxx_Init+0xe>
		HAL_Delay(1);
 8001b88:	2001      	movs	r0, #1
 8001b8a:	f000 fc87 	bl	800249c <HAL_Delay>
	while (HAL_GetTick() < 20)
 8001b8e:	f000 fc79 	bl	8002484 <HAL_GetTick>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b13      	cmp	r3, #19
 8001b96:	d9f7      	bls.n	8001b88 <W25Qxxx_Init+0x8>
	W25Qxxx_Disable();
 8001b98:	f7ff feae 	bl	80018f8 <W25Qxxx_Disable>
	HAL_Delay(20);
 8001b9c:	2014      	movs	r0, #20
 8001b9e:	f000 fc7d 	bl	800249c <HAL_Delay>

	W25Qxxx_Power_Up();
 8001ba2:	f7ff feb5 	bl	8001910 <W25Qxxx_Power_Up>
	W25Qxxx_Read_Manu_Dev_ID();
 8001ba6:	f7ff fed1 	bl	800194c <W25Qxxx_Read_Manu_Dev_ID>
	W25Qxxx_Read_JEDEC_ID();
 8001baa:	f7ff ff01 	bl	80019b0 <W25Qxxx_Read_JEDEC_ID>

	switch (W25Qxxx_JEDEC_ID & 0x000000FF)
 8001bae:	4b57      	ldr	r3, [pc, #348]	; (8001d0c <W25Qxxx_Init+0x18c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	3b11      	subs	r3, #17
 8001bb6:	2b0f      	cmp	r3, #15
 8001bb8:	d86b      	bhi.n	8001c92 <W25Qxxx_Init+0x112>
 8001bba:	a201      	add	r2, pc, #4	; (adr r2, 8001bc0 <W25Qxxx_Init+0x40>)
 8001bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc0:	08001c85 	.word	0x08001c85
 8001bc4:	08001c77 	.word	0x08001c77
 8001bc8:	08001c69 	.word	0x08001c69
 8001bcc:	08001c5b 	.word	0x08001c5b
 8001bd0:	08001c4d 	.word	0x08001c4d
 8001bd4:	08001c3f 	.word	0x08001c3f
 8001bd8:	08001c31 	.word	0x08001c31
 8001bdc:	08001c21 	.word	0x08001c21
 8001be0:	08001c11 	.word	0x08001c11
 8001be4:	08001c93 	.word	0x08001c93
 8001be8:	08001c93 	.word	0x08001c93
 8001bec:	08001c93 	.word	0x08001c93
 8001bf0:	08001c93 	.word	0x08001c93
 8001bf4:	08001c93 	.word	0x08001c93
 8001bf8:	08001c93 	.word	0x08001c93
 8001bfc:	08001c01 	.word	0x08001c01
	{
	case 0x20: // 	W25Q512
		W25Qxxx_ID = W25Q512;
 8001c00:	4b43      	ldr	r3, [pc, #268]	; (8001d10 <W25Qxxx_Init+0x190>)
 8001c02:	220a      	movs	r2, #10
 8001c04:	701a      	strb	r2, [r3, #0]
		W25Qxxx_BlockCount = 1024;
 8001c06:	4b43      	ldr	r3, [pc, #268]	; (8001d14 <W25Qxxx_Init+0x194>)
 8001c08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c0c:	601a      	str	r2, [r3, #0]
		break;
 8001c0e:	e042      	b.n	8001c96 <W25Qxxx_Init+0x116>
	case 0x19: // 	W25Q256
		W25Qxxx_ID = W25Q256;
 8001c10:	4b3f      	ldr	r3, [pc, #252]	; (8001d10 <W25Qxxx_Init+0x190>)
 8001c12:	2209      	movs	r2, #9
 8001c14:	701a      	strb	r2, [r3, #0]
		W25Qxxx_BlockCount = 512;
 8001c16:	4b3f      	ldr	r3, [pc, #252]	; (8001d14 <W25Qxxx_Init+0x194>)
 8001c18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c1c:	601a      	str	r2, [r3, #0]
		break;
 8001c1e:	e03a      	b.n	8001c96 <W25Qxxx_Init+0x116>
	case 0x18: // 	W25Q128
		W25Qxxx_ID = W25Q128;
 8001c20:	4b3b      	ldr	r3, [pc, #236]	; (8001d10 <W25Qxxx_Init+0x190>)
 8001c22:	2208      	movs	r2, #8
 8001c24:	701a      	strb	r2, [r3, #0]
		W25Qxxx_BlockCount = 256;
 8001c26:	4b3b      	ldr	r3, [pc, #236]	; (8001d14 <W25Qxxx_Init+0x194>)
 8001c28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c2c:	601a      	str	r2, [r3, #0]
		break;
 8001c2e:	e032      	b.n	8001c96 <W25Qxxx_Init+0x116>
	case 0x17: //	W25Q64
		W25Qxxx_ID = W25Q64;
 8001c30:	4b37      	ldr	r3, [pc, #220]	; (8001d10 <W25Qxxx_Init+0x190>)
 8001c32:	2207      	movs	r2, #7
 8001c34:	701a      	strb	r2, [r3, #0]
		W25Qxxx_BlockCount = 128;
 8001c36:	4b37      	ldr	r3, [pc, #220]	; (8001d14 <W25Qxxx_Init+0x194>)
 8001c38:	2280      	movs	r2, #128	; 0x80
 8001c3a:	601a      	str	r2, [r3, #0]
		break;
 8001c3c:	e02b      	b.n	8001c96 <W25Qxxx_Init+0x116>
	case 0x16: //	W25Q32
		W25Qxxx_ID = W25Q32;
 8001c3e:	4b34      	ldr	r3, [pc, #208]	; (8001d10 <W25Qxxx_Init+0x190>)
 8001c40:	2206      	movs	r2, #6
 8001c42:	701a      	strb	r2, [r3, #0]
		W25Qxxx_BlockCount = 64;
 8001c44:	4b33      	ldr	r3, [pc, #204]	; (8001d14 <W25Qxxx_Init+0x194>)
 8001c46:	2240      	movs	r2, #64	; 0x40
 8001c48:	601a      	str	r2, [r3, #0]
		break;
 8001c4a:	e024      	b.n	8001c96 <W25Qxxx_Init+0x116>
	case 0x15: //	W25Q16
		W25Qxxx_ID = W25Q16;
 8001c4c:	4b30      	ldr	r3, [pc, #192]	; (8001d10 <W25Qxxx_Init+0x190>)
 8001c4e:	2205      	movs	r2, #5
 8001c50:	701a      	strb	r2, [r3, #0]
		W25Qxxx_BlockCount = 32;
 8001c52:	4b30      	ldr	r3, [pc, #192]	; (8001d14 <W25Qxxx_Init+0x194>)
 8001c54:	2220      	movs	r2, #32
 8001c56:	601a      	str	r2, [r3, #0]
		break;
 8001c58:	e01d      	b.n	8001c96 <W25Qxxx_Init+0x116>
	case 0x14: //	W25Q80
		W25Qxxx_ID = W25Q80;
 8001c5a:	4b2d      	ldr	r3, [pc, #180]	; (8001d10 <W25Qxxx_Init+0x190>)
 8001c5c:	2204      	movs	r2, #4
 8001c5e:	701a      	strb	r2, [r3, #0]
		W25Qxxx_BlockCount = 16;
 8001c60:	4b2c      	ldr	r3, [pc, #176]	; (8001d14 <W25Qxxx_Init+0x194>)
 8001c62:	2210      	movs	r2, #16
 8001c64:	601a      	str	r2, [r3, #0]
		break;
 8001c66:	e016      	b.n	8001c96 <W25Qxxx_Init+0x116>
	case 0x13: //	W25Q40
		W25Qxxx_ID = W25Q40;
 8001c68:	4b29      	ldr	r3, [pc, #164]	; (8001d10 <W25Qxxx_Init+0x190>)
 8001c6a:	2203      	movs	r2, #3
 8001c6c:	701a      	strb	r2, [r3, #0]
		W25Qxxx_BlockCount = 8;
 8001c6e:	4b29      	ldr	r3, [pc, #164]	; (8001d14 <W25Qxxx_Init+0x194>)
 8001c70:	2208      	movs	r2, #8
 8001c72:	601a      	str	r2, [r3, #0]
		break;
 8001c74:	e00f      	b.n	8001c96 <W25Qxxx_Init+0x116>
	case 0x12: //	W25Q20
		W25Qxxx_ID = W25Q20;
 8001c76:	4b26      	ldr	r3, [pc, #152]	; (8001d10 <W25Qxxx_Init+0x190>)
 8001c78:	2202      	movs	r2, #2
 8001c7a:	701a      	strb	r2, [r3, #0]
		W25Qxxx_BlockCount = 4;
 8001c7c:	4b25      	ldr	r3, [pc, #148]	; (8001d14 <W25Qxxx_Init+0x194>)
 8001c7e:	2204      	movs	r2, #4
 8001c80:	601a      	str	r2, [r3, #0]
		break;
 8001c82:	e008      	b.n	8001c96 <W25Qxxx_Init+0x116>
	case 0x11: //	W25Q10
		W25Qxxx_ID = W25Q10;
 8001c84:	4b22      	ldr	r3, [pc, #136]	; (8001d10 <W25Qxxx_Init+0x190>)
 8001c86:	2201      	movs	r2, #1
 8001c88:	701a      	strb	r2, [r3, #0]
		W25Qxxx_BlockCount = 2;
 8001c8a:	4b22      	ldr	r3, [pc, #136]	; (8001d14 <W25Qxxx_Init+0x194>)
 8001c8c:	2202      	movs	r2, #2
 8001c8e:	601a      	str	r2, [r3, #0]
		break;
 8001c90:	e001      	b.n	8001c96 <W25Qxxx_Init+0x116>
	default:
		return 1;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e035      	b.n	8001d02 <W25Qxxx_Init+0x182>
	}
	W25Qxxx_PageSize = 256;					// 256  Byte
 8001c96:	4b20      	ldr	r3, [pc, #128]	; (8001d18 <W25Qxxx_Init+0x198>)
 8001c98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c9c:	801a      	strh	r2, [r3, #0]
	W25Qxxx_SectorSize = 0x1000;			// 4096 Byte
 8001c9e:	4b1f      	ldr	r3, [pc, #124]	; (8001d1c <W25Qxxx_Init+0x19c>)
 8001ca0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ca4:	601a      	str	r2, [r3, #0]
	W25Qxxx_SectorCount = W25Qxxx_BlockCount * 16;
 8001ca6:	4b1b      	ldr	r3, [pc, #108]	; (8001d14 <W25Qxxx_Init+0x194>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	011b      	lsls	r3, r3, #4
 8001cac:	4a1c      	ldr	r2, [pc, #112]	; (8001d20 <W25Qxxx_Init+0x1a0>)
 8001cae:	6013      	str	r3, [r2, #0]
	W25Qxxx_PageCount = (W25Qxxx_SectorCount * W25Qxxx_SectorSize) / W25Qxxx_PageSize;
 8001cb0:	4b1b      	ldr	r3, [pc, #108]	; (8001d20 <W25Qxxx_Init+0x1a0>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a19      	ldr	r2, [pc, #100]	; (8001d1c <W25Qxxx_Init+0x19c>)
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	fb02 f303 	mul.w	r3, r2, r3
 8001cbc:	4a16      	ldr	r2, [pc, #88]	; (8001d18 <W25Qxxx_Init+0x198>)
 8001cbe:	8812      	ldrh	r2, [r2, #0]
 8001cc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8001cc4:	4a17      	ldr	r2, [pc, #92]	; (8001d24 <W25Qxxx_Init+0x1a4>)
 8001cc6:	6013      	str	r3, [r2, #0]
	W25Qxxx_BlockSize = W25Qxxx_SectorSize * 16;
 8001cc8:	4b14      	ldr	r3, [pc, #80]	; (8001d1c <W25Qxxx_Init+0x19c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	011b      	lsls	r3, r3, #4
 8001cce:	4a16      	ldr	r2, [pc, #88]	; (8001d28 <W25Qxxx_Init+0x1a8>)
 8001cd0:	6013      	str	r3, [r2, #0]
	W25Qxxx_CapacityInKiloByte = (W25Qxxx_SectorCount * W25Qxxx_SectorSize) / 1024;
 8001cd2:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <W25Qxxx_Init+0x1a0>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a11      	ldr	r2, [pc, #68]	; (8001d1c <W25Qxxx_Init+0x19c>)
 8001cd8:	6812      	ldr	r2, [r2, #0]
 8001cda:	fb02 f303 	mul.w	r3, r2, r3
 8001cde:	0a9b      	lsrs	r3, r3, #10
 8001ce0:	4a12      	ldr	r2, [pc, #72]	; (8001d2c <W25Qxxx_Init+0x1ac>)
 8001ce2:	6013      	str	r3, [r2, #0]
	W25Qxxx_Read_Unique_ID();
 8001ce4:	f7ff fe96 	bl	8001a14 <W25Qxxx_Read_Unique_ID>

	uint8_t regVal = W25Qxxx_Read_REG_x(1);
 8001ce8:	2001      	movs	r0, #1
 8001cea:	f7ff ff15 	bl	8001b18 <W25Qxxx_Read_REG_x>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	71fb      	strb	r3, [r7, #7]

	if ((regVal&SR1_S0_BUSY) == SR1_S0_BUSY)
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <W25Qxxx_Init+0x180>
		return 1;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e000      	b.n	8001d02 <W25Qxxx_Init+0x182>

	return 0;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	200022d0 	.word	0x200022d0
 8001d10:	200022e8 	.word	0x200022e8
 8001d14:	200022cc 	.word	0x200022cc
 8001d18:	200022c8 	.word	0x200022c8
 8001d1c:	200022f4 	.word	0x200022f4
 8001d20:	200022ec 	.word	0x200022ec
 8001d24:	200022f8 	.word	0x200022f8
 8001d28:	200022e0 	.word	0x200022e0
 8001d2c:	200022e4 	.word	0x200022e4

08001d30 <W25Qxxx_EraseSector>:
  * @brief  Sector erase 4KB
  * @param  SectorAddr: [in] 0 ~ W25Qxxx_SectorCount-1
  * @retval status 0:passed  1:failed
  */
uint8_t W25Qxxx_EraseSector(uint32_t SectorAddr)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
	if (W25Qxxx_ID == 0)
 8001d38:	4b1e      	ldr	r3, [pc, #120]	; (8001db4 <W25Qxxx_EraseSector+0x84>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d101      	bne.n	8001d44 <W25Qxxx_EraseSector+0x14>
		return 1;		// w25qxx Unknown
 8001d40:	2301      	movs	r3, #1
 8001d42:	e032      	b.n	8001daa <W25Qxxx_EraseSector+0x7a>

	W25Qxxx_WaitForWriteEnd();
 8001d44:	f7ff fe9f 	bl	8001a86 <W25Qxxx_WaitForWriteEnd>

	SectorAddr = SectorAddr * W25Qxxx_SectorSize;
 8001d48:	4b1b      	ldr	r3, [pc, #108]	; (8001db8 <W25Qxxx_EraseSector+0x88>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	fb02 f303 	mul.w	r3, r2, r3
 8001d52:	607b      	str	r3, [r7, #4]
	W25Qxxx_Write_Enable();
 8001d54:	f7ff fe8c 	bl	8001a70 <W25Qxxx_Write_Enable>

	W25Qxxx_Enable();
 8001d58:	f7ff fdc2 	bl	80018e0 <W25Qxxx_Enable>
	if (W25Qxxx_ID >= W25Q256)
 8001d5c:	4b15      	ldr	r3, [pc, #84]	; (8001db4 <W25Qxxx_EraseSector+0x84>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b08      	cmp	r3, #8
 8001d62:	d909      	bls.n	8001d78 <W25Qxxx_EraseSector+0x48>
	{
		W25Qxxx_SPI(CMD_Erase_Sector_4_Byte_Addr);
 8001d64:	2021      	movs	r0, #33	; 0x21
 8001d66:	f7ff fd21 	bl	80017ac <W25Qxxx_SPI>
		W25Qxxx_SPI((SectorAddr & 0xFF000000) >> 24);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	0e1b      	lsrs	r3, r3, #24
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff fd1b 	bl	80017ac <W25Qxxx_SPI>
 8001d76:	e002      	b.n	8001d7e <W25Qxxx_EraseSector+0x4e>
	}
	else
	{
		W25Qxxx_SPI(CMD_Erase_Sector);
 8001d78:	2020      	movs	r0, #32
 8001d7a:	f7ff fd17 	bl	80017ac <W25Qxxx_SPI>
	}
	W25Qxxx_SPI((SectorAddr & 0xFF0000) >> 16);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	0c1b      	lsrs	r3, r3, #16
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff fd11 	bl	80017ac <W25Qxxx_SPI>
	W25Qxxx_SPI((SectorAddr & 0xFF00) >> 8);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	0a1b      	lsrs	r3, r3, #8
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff fd0b 	bl	80017ac <W25Qxxx_SPI>
	W25Qxxx_SPI( SectorAddr & 0xFF);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff fd06 	bl	80017ac <W25Qxxx_SPI>
	W25Qxxx_Disable();
 8001da0:	f7ff fdaa 	bl	80018f8 <W25Qxxx_Disable>

	W25Qxxx_WaitForWriteEnd();
 8001da4:	f7ff fe6f 	bl	8001a86 <W25Qxxx_WaitForWriteEnd>

	return 0;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	200022e8 	.word	0x200022e8
 8001db8:	200022f4 	.word	0x200022f4

08001dbc <W25Qxxx_WritePage>:
  * @param Page_Address: [in] page address (0 - W25Qxxx_PageCount-1)
  * @param OffsetInByte: [in] offset address
  * @retval status 0:passed  1:failed
  */
uint8_t W25Qxxx_WritePage(const uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
 8001dc8:	603b      	str	r3, [r7, #0]
	if (W25Qxxx_ID == 0)
 8001dca:	4b2c      	ldr	r3, [pc, #176]	; (8001e7c <W25Qxxx_WritePage+0xc0>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <W25Qxxx_WritePage+0x1a>
		return 1;		// w25qxx Unknown
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e04e      	b.n	8001e74 <W25Qxxx_WritePage+0xb8>

	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > W25Qxxx_PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4413      	add	r3, r2
 8001ddc:	4a28      	ldr	r2, [pc, #160]	; (8001e80 <W25Qxxx_WritePage+0xc4>)
 8001dde:	8812      	ldrh	r2, [r2, #0]
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d802      	bhi.n	8001dea <W25Qxxx_WritePage+0x2e>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d105      	bne.n	8001df6 <W25Qxxx_WritePage+0x3a>
		NumByteToWrite_up_to_PageSize = W25Qxxx_PageSize - OffsetInByte;
 8001dea:	4b25      	ldr	r3, [pc, #148]	; (8001e80 <W25Qxxx_WritePage+0xc4>)
 8001dec:	881b      	ldrh	r3, [r3, #0]
 8001dee:	461a      	mov	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	603b      	str	r3, [r7, #0]

	W25Qxxx_WaitForWriteEnd();
 8001df6:	f7ff fe46 	bl	8001a86 <W25Qxxx_WaitForWriteEnd>

	W25Qxxx_Write_Enable();
 8001dfa:	f7ff fe39 	bl	8001a70 <W25Qxxx_Write_Enable>

	W25Qxxx_Enable();
 8001dfe:	f7ff fd6f 	bl	80018e0 <W25Qxxx_Enable>

	Page_Address = (Page_Address * W25Qxxx_PageSize) + OffsetInByte;
 8001e02:	4b1f      	ldr	r3, [pc, #124]	; (8001e80 <W25Qxxx_WritePage+0xc4>)
 8001e04:	881b      	ldrh	r3, [r3, #0]
 8001e06:	461a      	mov	r2, r3
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	fb03 f302 	mul.w	r3, r3, r2
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	4413      	add	r3, r2
 8001e12:	60bb      	str	r3, [r7, #8]
	if (W25Qxxx_ID >= W25Q256)
 8001e14:	4b19      	ldr	r3, [pc, #100]	; (8001e7c <W25Qxxx_WritePage+0xc0>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b08      	cmp	r3, #8
 8001e1a:	d909      	bls.n	8001e30 <W25Qxxx_WritePage+0x74>
	{
		W25Qxxx_SPI(CMD_Page_Program_4_Byte_Addr);
 8001e1c:	2012      	movs	r0, #18
 8001e1e:	f7ff fcc5 	bl	80017ac <W25Qxxx_SPI>
		W25Qxxx_SPI((Page_Address & 0xFF000000) >> 24);
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	0e1b      	lsrs	r3, r3, #24
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff fcbf 	bl	80017ac <W25Qxxx_SPI>
 8001e2e:	e002      	b.n	8001e36 <W25Qxxx_WritePage+0x7a>
	}
	else
	{
		W25Qxxx_SPI(CMD_Page_Program);
 8001e30:	2002      	movs	r0, #2
 8001e32:	f7ff fcbb 	bl	80017ac <W25Qxxx_SPI>
	}
	W25Qxxx_SPI((Page_Address & 0xFF0000) >> 16);
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	0c1b      	lsrs	r3, r3, #16
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff fcb5 	bl	80017ac <W25Qxxx_SPI>
	W25Qxxx_SPI((Page_Address & 0xFF00) >> 8);
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	0a1b      	lsrs	r3, r3, #8
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff fcaf 	bl	80017ac <W25Qxxx_SPI>
	W25Qxxx_SPI(Page_Address & 0xFF);
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff fcaa 	bl	80017ac <W25Qxxx_SPI>
//	HAL_SPI_Transmit(&hspi_flash, (uint8_t *)pBuffer, NumByteToWrite_up_to_PageSize, SPI_FLASH_TIMEOUT);
	W25Qxxx_SPI_Tx((uint8_t *)pBuffer, NumByteToWrite_up_to_PageSize);
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f7ff fcd4 	bl	800180c <W25Qxxx_SPI_Tx>

	W25Qxxx_Disable();
 8001e64:	f7ff fd48 	bl	80018f8 <W25Qxxx_Disable>

	W25Qxxx_WaitForWriteEnd();
 8001e68:	f7ff fe0d 	bl	8001a86 <W25Qxxx_WaitForWriteEnd>

	HAL_Delay(1);
 8001e6c:	2001      	movs	r0, #1
 8001e6e:	f000 fb15 	bl	800249c <HAL_Delay>

	return 0;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	200022e8 	.word	0x200022e8
 8001e80:	200022c8 	.word	0x200022c8

08001e84 <W25Qxxx_WriteSector>:
  * @param OffsetInByte: [in] offset byte number
  * @param NumByteToWrite_up_to_SectorSize: [in] Byte data number
  * @retval status 0:passed  1:failed
  */
uint8_t W25Qxxx_WriteSector(const uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b088      	sub	sp, #32
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
 8001e90:	603b      	str	r3, [r7, #0]
	if (W25Qxxx_ID == 0)
 8001e92:	4b33      	ldr	r3, [pc, #204]	; (8001f60 <W25Qxxx_WriteSector+0xdc>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <W25Qxxx_WriteSector+0x1a>
		return 1;		// w25qxx Unknown
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e05c      	b.n	8001f58 <W25Qxxx_WriteSector+0xd4>

	if ((NumByteToWrite_up_to_SectorSize > W25Qxxx_SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8001e9e:	4b31      	ldr	r3, [pc, #196]	; (8001f64 <W25Qxxx_WriteSector+0xe0>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d802      	bhi.n	8001eae <W25Qxxx_WriteSector+0x2a>
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d102      	bne.n	8001eb4 <W25Qxxx_WriteSector+0x30>
		NumByteToWrite_up_to_SectorSize = W25Qxxx_SectorSize;
 8001eae:	4b2d      	ldr	r3, [pc, #180]	; (8001f64 <W25Qxxx_WriteSector+0xe0>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	603b      	str	r3, [r7, #0]

	if (OffsetInByte >= W25Qxxx_SectorSize)
 8001eb4:	4b2b      	ldr	r3, [pc, #172]	; (8001f64 <W25Qxxx_WriteSector+0xe0>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d301      	bcc.n	8001ec2 <W25Qxxx_WriteSector+0x3e>
	{
		return 1;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e04a      	b.n	8001f58 <W25Qxxx_WriteSector+0xd4>
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > W25Qxxx_SectorSize)
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	441a      	add	r2, r3
 8001ec8:	4b26      	ldr	r3, [pc, #152]	; (8001f64 <W25Qxxx_WriteSector+0xe0>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d905      	bls.n	8001edc <W25Qxxx_WriteSector+0x58>
		BytesToWrite = W25Qxxx_SectorSize - OffsetInByte;
 8001ed0:	4b24      	ldr	r3, [pc, #144]	; (8001f64 <W25Qxxx_WriteSector+0xe0>)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	61bb      	str	r3, [r7, #24]
 8001eda:	e001      	b.n	8001ee0 <W25Qxxx_WriteSector+0x5c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	61bb      	str	r3, [r7, #24]

	StartPage = W25Qxxx_SectorToPage(Sector_Address) + (OffsetInByte / W25Qxxx_PageSize);
 8001ee0:	68b8      	ldr	r0, [r7, #8]
 8001ee2:	f7ff fe01 	bl	8001ae8 <W25Qxxx_SectorToPage>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	4b1f      	ldr	r3, [pc, #124]	; (8001f68 <W25Qxxx_WriteSector+0xe4>)
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	4619      	mov	r1, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ef4:	4413      	add	r3, r2
 8001ef6:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % W25Qxxx_PageSize;
 8001ef8:	4b1b      	ldr	r3, [pc, #108]	; (8001f68 <W25Qxxx_WriteSector+0xe4>)
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	461a      	mov	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	fbb3 f1f2 	udiv	r1, r3, r2
 8001f04:	fb02 f201 	mul.w	r2, r2, r1
 8001f08:	1a9b      	subs	r3, r3, r2
 8001f0a:	617b      	str	r3, [r7, #20]
	do
	{
		uint8_t res = W25Qxxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	69f9      	ldr	r1, [r7, #28]
 8001f12:	68f8      	ldr	r0, [r7, #12]
 8001f14:	f7ff ff52 	bl	8001dbc <W25Qxxx_WritePage>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	74fb      	strb	r3, [r7, #19]
		if (res != 0)
 8001f1c:	7cfb      	ldrb	r3, [r7, #19]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <W25Qxxx_WriteSector+0xa2>
			return 1;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e018      	b.n	8001f58 <W25Qxxx_WriteSector+0xd4>
		StartPage++;
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= W25Qxxx_PageSize - LocalOffset;
 8001f2c:	4b0e      	ldr	r3, [pc, #56]	; (8001f68 <W25Qxxx_WriteSector+0xe4>)
 8001f2e:	881b      	ldrh	r3, [r3, #0]
 8001f30:	461a      	mov	r2, r3
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	1a9a      	subs	r2, r3, r2
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	4413      	add	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
		pBuffer += W25Qxxx_PageSize - LocalOffset;
 8001f3c:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <W25Qxxx_WriteSector+0xe4>)
 8001f3e:	881b      	ldrh	r3, [r3, #0]
 8001f40:	461a      	mov	r2, r3
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	4413      	add	r3, r2
 8001f4a:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	dcda      	bgt.n	8001f0c <W25Qxxx_WriteSector+0x88>

	return 0;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3720      	adds	r7, #32
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	200022e8 	.word	0x200022e8
 8001f64:	200022f4 	.word	0x200022f4
 8001f68:	200022c8 	.word	0x200022c8

08001f6c <W25Qxxx_ReadPage>:
  * @param OffsetInByte: [in] offset byte number   [0 --- offset ------ 255]
  * @param NumByteToRead_up_to_PageSize: [in] read byte number  max 256Bytes
  * @retval status 0:passed   1:failed
  */
uint8_t W25Qxxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
 8001f78:	603b      	str	r3, [r7, #0]
	if (W25Qxxx_ID == 0)
 8001f7a:	4b2e      	ldr	r3, [pc, #184]	; (8002034 <W25Qxxx_ReadPage+0xc8>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <W25Qxxx_ReadPage+0x1a>
		return 1;		// w25qxx Unknown
 8001f82:	2301      	movs	r3, #1
 8001f84:	e051      	b.n	800202a <W25Qxxx_ReadPage+0xbe>

	if ((NumByteToRead_up_to_PageSize > W25Qxxx_PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8001f86:	4b2c      	ldr	r3, [pc, #176]	; (8002038 <W25Qxxx_ReadPage+0xcc>)
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d802      	bhi.n	8001f98 <W25Qxxx_ReadPage+0x2c>
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d102      	bne.n	8001f9e <W25Qxxx_ReadPage+0x32>
		NumByteToRead_up_to_PageSize = W25Qxxx_PageSize;
 8001f98:	4b27      	ldr	r3, [pc, #156]	; (8002038 <W25Qxxx_ReadPage+0xcc>)
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > W25Qxxx_PageSize)
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	4a24      	ldr	r2, [pc, #144]	; (8002038 <W25Qxxx_ReadPage+0xcc>)
 8001fa6:	8812      	ldrh	r2, [r2, #0]
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d905      	bls.n	8001fb8 <W25Qxxx_ReadPage+0x4c>
		NumByteToRead_up_to_PageSize = W25Qxxx_PageSize - OffsetInByte;
 8001fac:	4b22      	ldr	r3, [pc, #136]	; (8002038 <W25Qxxx_ReadPage+0xcc>)
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	603b      	str	r3, [r7, #0]

	Page_Address = Page_Address * W25Qxxx_PageSize + OffsetInByte;
 8001fb8:	4b1f      	ldr	r3, [pc, #124]	; (8002038 <W25Qxxx_ReadPage+0xcc>)
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	fb03 f302 	mul.w	r3, r3, r2
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	60bb      	str	r3, [r7, #8]

	W25Qxxx_Enable();
 8001fca:	f7ff fc89 	bl	80018e0 <W25Qxxx_Enable>
	if (W25Qxxx_ID >= W25Q256)
 8001fce:	4b19      	ldr	r3, [pc, #100]	; (8002034 <W25Qxxx_ReadPage+0xc8>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	2b08      	cmp	r3, #8
 8001fd4:	d909      	bls.n	8001fea <W25Qxxx_ReadPage+0x7e>
	{
		W25Qxxx_SPI(CMD_Fast_Read_4_Byte_Addr);
 8001fd6:	200c      	movs	r0, #12
 8001fd8:	f7ff fbe8 	bl	80017ac <W25Qxxx_SPI>
		W25Qxxx_SPI((Page_Address & 0xFF000000) >> 24);
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	0e1b      	lsrs	r3, r3, #24
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff fbe2 	bl	80017ac <W25Qxxx_SPI>
 8001fe8:	e002      	b.n	8001ff0 <W25Qxxx_ReadPage+0x84>
	}
	else
	{
		W25Qxxx_SPI(CMD_Fast_Read);
 8001fea:	200b      	movs	r0, #11
 8001fec:	f7ff fbde 	bl	80017ac <W25Qxxx_SPI>
	}
	W25Qxxx_SPI((Page_Address & 0xFF0000) >> 16);
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	0c1b      	lsrs	r3, r3, #16
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff fbd8 	bl	80017ac <W25Qxxx_SPI>
	W25Qxxx_SPI((Page_Address & 0xFF00) >> 8);
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	0a1b      	lsrs	r3, r3, #8
 8002000:	b2db      	uxtb	r3, r3
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff fbd2 	bl	80017ac <W25Qxxx_SPI>
	W25Qxxx_SPI(Page_Address & 0xFF);
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	b2db      	uxtb	r3, r3
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff fbcd 	bl	80017ac <W25Qxxx_SPI>
	W25Qxxx_SPI(CMD_DUMMY);
 8002012:	2000      	movs	r0, #0
 8002014:	f7ff fbca 	bl	80017ac <W25Qxxx_SPI>
//	HAL_SPI_Receive(&hspi_flash, pBuffer, NumByteToRead_up_to_PageSize, SPI_FLASH_TIMEOUT);
	W25Qxxx_SPI_Rx(pBuffer, NumByteToRead_up_to_PageSize);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	b29b      	uxth	r3, r3
 800201c:	4619      	mov	r1, r3
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f7ff fc22 	bl	8001868 <W25Qxxx_SPI_Rx>

	W25Qxxx_Disable();
 8002024:	f7ff fc68 	bl	80018f8 <W25Qxxx_Disable>

	return 0;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	200022e8 	.word	0x200022e8
 8002038:	200022c8 	.word	0x200022c8

0800203c <W25Qxxx_ReadSector>:
  * @param OffsetInByte: [in] offset byte number
  * @param NumByteToRead_up_to_SectorSize: [in] read byte number  max 4096Bytes
  * @retval status 0:passed   1:failed
  */
uint8_t W25Qxxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b088      	sub	sp, #32
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
 8002048:	603b      	str	r3, [r7, #0]
	if (W25Qxxx_ID == 0)
 800204a:	4b30      	ldr	r3, [pc, #192]	; (800210c <W25Qxxx_ReadSector+0xd0>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <W25Qxxx_ReadSector+0x1a>
		return 1;		// w25qxx Unknown
 8002052:	2301      	movs	r3, #1
 8002054:	e055      	b.n	8002102 <W25Qxxx_ReadSector+0xc6>

	if ((NumByteToRead_up_to_SectorSize > W25Qxxx_SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8002056:	4b2e      	ldr	r3, [pc, #184]	; (8002110 <W25Qxxx_ReadSector+0xd4>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	429a      	cmp	r2, r3
 800205e:	d802      	bhi.n	8002066 <W25Qxxx_ReadSector+0x2a>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d102      	bne.n	800206c <W25Qxxx_ReadSector+0x30>
		NumByteToRead_up_to_SectorSize = W25Qxxx_SectorSize;
 8002066:	4b2a      	ldr	r3, [pc, #168]	; (8002110 <W25Qxxx_ReadSector+0xd4>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	603b      	str	r3, [r7, #0]
	if (OffsetInByte >= W25Qxxx_SectorSize)
 800206c:	4b28      	ldr	r3, [pc, #160]	; (8002110 <W25Qxxx_ReadSector+0xd4>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	429a      	cmp	r2, r3
 8002074:	d301      	bcc.n	800207a <W25Qxxx_ReadSector+0x3e>
	{
		return 1;
 8002076:	2301      	movs	r3, #1
 8002078:	e043      	b.n	8002102 <W25Qxxx_ReadSector+0xc6>
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > W25Qxxx_SectorSize)
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	441a      	add	r2, r3
 8002080:	4b23      	ldr	r3, [pc, #140]	; (8002110 <W25Qxxx_ReadSector+0xd4>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	429a      	cmp	r2, r3
 8002086:	d905      	bls.n	8002094 <W25Qxxx_ReadSector+0x58>
		BytesToRead = W25Qxxx_SectorSize - OffsetInByte;
 8002088:	4b21      	ldr	r3, [pc, #132]	; (8002110 <W25Qxxx_ReadSector+0xd4>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	61bb      	str	r3, [r7, #24]
 8002092:	e001      	b.n	8002098 <W25Qxxx_ReadSector+0x5c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	61bb      	str	r3, [r7, #24]
	StartPage = W25Qxxx_SectorToPage(Sector_Address) + (OffsetInByte / W25Qxxx_PageSize);
 8002098:	68b8      	ldr	r0, [r7, #8]
 800209a:	f7ff fd25 	bl	8001ae8 <W25Qxxx_SectorToPage>
 800209e:	4602      	mov	r2, r0
 80020a0:	4b1c      	ldr	r3, [pc, #112]	; (8002114 <W25Qxxx_ReadSector+0xd8>)
 80020a2:	881b      	ldrh	r3, [r3, #0]
 80020a4:	4619      	mov	r1, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ac:	4413      	add	r3, r2
 80020ae:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % W25Qxxx_PageSize;
 80020b0:	4b18      	ldr	r3, [pc, #96]	; (8002114 <W25Qxxx_ReadSector+0xd8>)
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	461a      	mov	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80020bc:	fb02 f201 	mul.w	r2, r2, r1
 80020c0:	1a9b      	subs	r3, r3, r2
 80020c2:	617b      	str	r3, [r7, #20]
	do
	{
		W25Qxxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	69f9      	ldr	r1, [r7, #28]
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f7ff ff4e 	bl	8001f6c <W25Qxxx_ReadPage>
		StartPage++;
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	3301      	adds	r3, #1
 80020d4:	61fb      	str	r3, [r7, #28]
		BytesToRead -= W25Qxxx_PageSize - LocalOffset;
 80020d6:	4b0f      	ldr	r3, [pc, #60]	; (8002114 <W25Qxxx_ReadSector+0xd8>)
 80020d8:	881b      	ldrh	r3, [r3, #0]
 80020da:	461a      	mov	r2, r3
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	1a9a      	subs	r2, r3, r2
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	4413      	add	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
		pBuffer += W25Qxxx_PageSize - LocalOffset;
 80020e6:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <W25Qxxx_ReadSector+0xd8>)
 80020e8:	881b      	ldrh	r3, [r3, #0]
 80020ea:	461a      	mov	r2, r3
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	4413      	add	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	dce1      	bgt.n	80020c4 <W25Qxxx_ReadSector+0x88>

	return 0;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3720      	adds	r7, #32
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	200022e8 	.word	0x200022e8
 8002110:	200022f4 	.word	0x200022f4
 8002114:	200022c8 	.word	0x200022c8

08002118 <W25Qxxx_diskio_initialize>:
/** ------------------------------------------------------------------------ /
  * @brief  Initializes a Drive [spi flash W25Qxxx]
  * @retval DSTATUS: Operation status
  */
DSTATUS W25Qxxx_diskio_initialize (void)               /*!< Initialize Disk Drive                     */
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
	Stat = STA_NOINIT;
 800211c:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <W25Qxxx_diskio_initialize+0x30>)
 800211e:	2201      	movs	r2, #1
 8002120:	701a      	strb	r2, [r3, #0]
	if (W25Qxxx_Init() == FLASH_OK)
 8002122:	f7ff fd2d 	bl	8001b80 <W25Qxxx_Init>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d107      	bne.n	800213c <W25Qxxx_diskio_initialize+0x24>
	{
		Stat &= ~STA_NOINIT;
 800212c:	4b06      	ldr	r3, [pc, #24]	; (8002148 <W25Qxxx_diskio_initialize+0x30>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	b2db      	uxtb	r3, r3
 8002132:	f023 0301 	bic.w	r3, r3, #1
 8002136:	b2da      	uxtb	r2, r3
 8002138:	4b03      	ldr	r3, [pc, #12]	; (8002148 <W25Qxxx_diskio_initialize+0x30>)
 800213a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800213c:	4b02      	ldr	r3, [pc, #8]	; (8002148 <W25Qxxx_diskio_initialize+0x30>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	b2db      	uxtb	r3, r3
}
 8002142:	4618      	mov	r0, r3
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	20000004 	.word	0x20000004

0800214c <W25Qxxx_diskio_status>:
/** ------------------------------------------------------------------------ /
  * @brief  Gets Disk Status
  * @retval DSTATUS: Operation status
  */
DSTATUS W25Qxxx_diskio_status (void)                     /*!< Get Disk Status */
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
	Stat = STA_NOINIT;
 8002150:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <W25Qxxx_diskio_status+0x34>)
 8002152:	2201      	movs	r2, #1
 8002154:	701a      	strb	r2, [r3, #0]

	if ((W25Qxxx_Read_REG_x(1)&SR1_S0_BUSY) != SR1_S0_BUSY)
 8002156:	2001      	movs	r0, #1
 8002158:	f7ff fcde 	bl	8001b18 <W25Qxxx_Read_REG_x>
 800215c:	4603      	mov	r3, r0
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b01      	cmp	r3, #1
 8002164:	d007      	beq.n	8002176 <W25Qxxx_diskio_status+0x2a>
	{
		Stat &= ~STA_NOINIT;
 8002166:	4b06      	ldr	r3, [pc, #24]	; (8002180 <W25Qxxx_diskio_status+0x34>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	b2db      	uxtb	r3, r3
 800216c:	f023 0301 	bic.w	r3, r3, #1
 8002170:	b2da      	uxtb	r2, r3
 8002172:	4b03      	ldr	r3, [pc, #12]	; (8002180 <W25Qxxx_diskio_status+0x34>)
 8002174:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8002176:	4b02      	ldr	r3, [pc, #8]	; (8002180 <W25Qxxx_diskio_status+0x34>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	b2db      	uxtb	r3, r3
}
 800217c:	4618      	mov	r0, r3
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20000004 	.word	0x20000004

08002184 <W25Qxxx_diskio_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..8192)
  * @retval DRESULT: Operation result
  */
DRESULT W25Qxxx_diskio_read (BYTE *buff, DWORD sector, UINT count)	     /*!< Read Sector(s) */
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
	DRESULT res = RES_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	75fb      	strb	r3, [r7, #23]

	/*
	 * ensure the SPI Flash is ready for a new operation
	 */

	if (W25Qxxx_WaitForWriteEnd() != 0)
 8002194:	f7ff fc77 	bl	8001a86 <W25Qxxx_WaitForWriteEnd>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <W25Qxxx_diskio_read+0x1e>
		return res;
 800219e:	7dfb      	ldrb	r3, [r7, #23]
 80021a0:	e011      	b.n	80021c6 <W25Qxxx_diskio_read+0x42>

	UINT sectorCount = count * W25Qxxx_SectorSize;
 80021a2:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <W25Qxxx_diskio_read+0x4c>)
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	fb02 f303 	mul.w	r3, r2, r3
 80021ac:	613b      	str	r3, [r7, #16]
	if (W25Qxxx_ReadSector(buff, sector, 0, sectorCount) == 0)
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	2200      	movs	r2, #0
 80021b2:	68b9      	ldr	r1, [r7, #8]
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	f7ff ff41 	bl	800203c <W25Qxxx_ReadSector>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <W25Qxxx_diskio_read+0x40>
	{
		res = RES_OK;
 80021c0:	2300      	movs	r3, #0
 80021c2:	75fb      	strb	r3, [r7, #23]
	}

	return res;
 80021c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	200022f4 	.word	0x200022f4

080021d4 <W25Qxxx_diskio_write>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT W25Qxxx_diskio_write (const BYTE *buff, DWORD sector, UINT count) /*!< Write Sector(s) when _USE_WRITE = 0 */
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
	DRESULT res = RES_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	75fb      	strb	r3, [r7, #23]

	/*
	 * ensure the SPI Flash is ready for a new operation
	 */

	if (W25Qxxx_WaitForWriteEnd() != 0)
 80021e4:	f7ff fc4f 	bl	8001a86 <W25Qxxx_WaitForWriteEnd>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <W25Qxxx_diskio_write+0x1e>
		return res;
 80021ee:	7dfb      	ldrb	r3, [r7, #23]
 80021f0:	e027      	b.n	8002242 <W25Qxxx_diskio_write+0x6e>

	if (W25Qxxx_EraseSector(sector) != 0)
 80021f2:	68b8      	ldr	r0, [r7, #8]
 80021f4:	f7ff fd9c 	bl	8001d30 <W25Qxxx_EraseSector>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <W25Qxxx_diskio_write+0x2e>
		return res;
 80021fe:	7dfb      	ldrb	r3, [r7, #23]
 8002200:	e01f      	b.n	8002242 <W25Qxxx_diskio_write+0x6e>

	if (W25Qxxx_WaitForWriteEnd() != 0)
 8002202:	f7ff fc40 	bl	8001a86 <W25Qxxx_WaitForWriteEnd>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <W25Qxxx_diskio_write+0x3c>
		return res;
 800220c:	7dfb      	ldrb	r3, [r7, #23]
 800220e:	e018      	b.n	8002242 <W25Qxxx_diskio_write+0x6e>

	UINT sectorCount = count * W25Qxxx_SectorSize;
 8002210:	4b0e      	ldr	r3, [pc, #56]	; (800224c <W25Qxxx_diskio_write+0x78>)
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	fb02 f303 	mul.w	r3, r2, r3
 800221a:	613b      	str	r3, [r7, #16]
	if (W25Qxxx_WriteSector(buff, sector, 0, sectorCount) == 0)
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	2200      	movs	r2, #0
 8002220:	68b9      	ldr	r1, [r7, #8]
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f7ff fe2e 	bl	8001e84 <W25Qxxx_WriteSector>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <W25Qxxx_diskio_write+0x5e>
	{
		res = RES_OK;
 800222e:	2300      	movs	r3, #0
 8002230:	75fb      	strb	r3, [r7, #23]
	}

	if (W25Qxxx_WaitForWriteEnd() != 0)
 8002232:	f7ff fc28 	bl	8001a86 <W25Qxxx_WaitForWriteEnd>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <W25Qxxx_diskio_write+0x6c>
			return res;
 800223c:	7dfb      	ldrb	r3, [r7, #23]
 800223e:	e000      	b.n	8002242 <W25Qxxx_diskio_write+0x6e>

	return res;
 8002240:	7dfb      	ldrb	r3, [r7, #23]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3718      	adds	r7, #24
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	200022f4 	.word	0x200022f4

08002250 <W25Qxxx_diskio_ioctl>:
  * @param  cmd: Control code
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
DRESULT W25Qxxx_diskio_ioctl(BYTE cmd, void *buff)             /*!< I/O control operation when _USE_IOCTL = 1 */
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	6039      	str	r1, [r7, #0]
 800225a:	71fb      	strb	r3, [r7, #7]
	  DRESULT res = RES_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	73fb      	strb	r3, [r7, #15]

	  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002260:	4b1c      	ldr	r3, [pc, #112]	; (80022d4 <W25Qxxx_diskio_ioctl+0x84>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	b2db      	uxtb	r3, r3
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <W25Qxxx_diskio_ioctl+0x22>
 800226e:	2303      	movs	r3, #3
 8002270:	e029      	b.n	80022c6 <W25Qxxx_diskio_ioctl+0x76>

	  switch (cmd)
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	2b03      	cmp	r3, #3
 8002276:	d823      	bhi.n	80022c0 <W25Qxxx_diskio_ioctl+0x70>
 8002278:	a201      	add	r2, pc, #4	; (adr r2, 8002280 <W25Qxxx_diskio_ioctl+0x30>)
 800227a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800227e:	bf00      	nop
 8002280:	08002291 	.word	0x08002291
 8002284:	08002297 	.word	0x08002297
 8002288:	080022a5 	.word	0x080022a5
 800228c:	080022b5 	.word	0x080022b5
	  {
	  /* Make sure that no pending write process */
	  case CTRL_SYNC :
	    res = RES_OK;
 8002290:	2300      	movs	r3, #0
 8002292:	73fb      	strb	r3, [r7, #15]
	    break;
 8002294:	e016      	b.n	80022c4 <W25Qxxx_diskio_ioctl+0x74>

	  /* Get number of sectors on the disk (DWORD) */
	  case GET_SECTOR_COUNT :
	    *(DWORD*)buff = W25Qxxx_SectorCount;
 8002296:	4b10      	ldr	r3, [pc, #64]	; (80022d8 <W25Qxxx_diskio_ioctl+0x88>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	601a      	str	r2, [r3, #0]
	    res = RES_OK;
 800229e:	2300      	movs	r3, #0
 80022a0:	73fb      	strb	r3, [r7, #15]
	    break;
 80022a2:	e00f      	b.n	80022c4 <W25Qxxx_diskio_ioctl+0x74>

	  /* Get R/W sector size (WORD) */
	  case GET_SECTOR_SIZE :
	    *(WORD*)buff = W25Qxxx_SectorSize;
 80022a4:	4b0d      	ldr	r3, [pc, #52]	; (80022dc <W25Qxxx_diskio_ioctl+0x8c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	801a      	strh	r2, [r3, #0]
	    res = RES_OK;
 80022ae:	2300      	movs	r3, #0
 80022b0:	73fb      	strb	r3, [r7, #15]
	    break;
 80022b2:	e007      	b.n	80022c4 <W25Qxxx_diskio_ioctl+0x74>

	  /* Get erase block size in unit of sector (DWORD) */
	  case GET_BLOCK_SIZE :
	    *(DWORD*)buff = 1;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	2201      	movs	r2, #1
 80022b8:	601a      	str	r2, [r3, #0]
	    res = RES_OK;
 80022ba:	2300      	movs	r3, #0
 80022bc:	73fb      	strb	r3, [r7, #15]
	    break;
 80022be:	e001      	b.n	80022c4 <W25Qxxx_diskio_ioctl+0x74>

	  default:
	    res = RES_PARERR;
 80022c0:	2304      	movs	r3, #4
 80022c2:	73fb      	strb	r3, [r7, #15]
	  }

	  return res;
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	20000004 	.word	0x20000004
 80022d8:	200022ec 	.word	0x200022ec
 80022dc:	200022f4 	.word	0x200022f4

080022e0 <HAL_SPI_TxCpltCallback>:

/**
 * @breif Tx Cplt Callback function
 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI5)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a05      	ldr	r2, [pc, #20]	; (8002304 <HAL_SPI_TxCpltCallback+0x24>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d102      	bne.n	80022f8 <HAL_SPI_TxCpltCallback+0x18>
	{
		WriteStatus = 1;
 80022f2:	4b05      	ldr	r3, [pc, #20]	; (8002308 <HAL_SPI_TxCpltCallback+0x28>)
 80022f4:	2201      	movs	r2, #1
 80022f6:	601a      	str	r2, [r3, #0]
	}
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	40015000 	.word	0x40015000
 8002308:	200000c0 	.word	0x200000c0

0800230c <HAL_SPI_RxCpltCallback>:

/**
 * @breif Rx Cplt Callback function
 */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI5)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a05      	ldr	r2, [pc, #20]	; (8002330 <HAL_SPI_RxCpltCallback+0x24>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d102      	bne.n	8002324 <HAL_SPI_RxCpltCallback+0x18>
	{
		ReadStatus = 1;
 800231e:	4b05      	ldr	r3, [pc, #20]	; (8002334 <HAL_SPI_RxCpltCallback+0x28>)
 8002320:	2201      	movs	r2, #1
 8002322:	601a      	str	r2, [r3, #0]
	}
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	40015000 	.word	0x40015000
 8002334:	200000c4 	.word	0x200000c4

08002338 <HAL_SPI_TxRxCpltCallback>:

/**
 * @breif Tx Rx Cplt Callback function
 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI5)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a05      	ldr	r2, [pc, #20]	; (800235c <HAL_SPI_TxRxCpltCallback+0x24>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d102      	bne.n	8002350 <HAL_SPI_TxRxCpltCallback+0x18>
	{
		WriteReadStatus = 1;
 800234a:	4b05      	ldr	r3, [pc, #20]	; (8002360 <HAL_SPI_TxRxCpltCallback+0x28>)
 800234c:	2201      	movs	r2, #1
 800234e:	601a      	str	r2, [r3, #0]
	}
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	40015000 	.word	0x40015000
 8002360:	200000c8 	.word	0x200000c8

08002364 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002364:	f8df d034 	ldr.w	sp, [pc, #52]	; 800239c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002368:	480d      	ldr	r0, [pc, #52]	; (80023a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800236a:	490e      	ldr	r1, [pc, #56]	; (80023a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800236c:	4a0e      	ldr	r2, [pc, #56]	; (80023a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800236e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002370:	e002      	b.n	8002378 <LoopCopyDataInit>

08002372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002376:	3304      	adds	r3, #4

08002378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800237a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800237c:	d3f9      	bcc.n	8002372 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800237e:	4a0b      	ldr	r2, [pc, #44]	; (80023ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002380:	4c0b      	ldr	r4, [pc, #44]	; (80023b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002384:	e001      	b.n	800238a <LoopFillZerobss>

08002386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002388:	3204      	adds	r2, #4

0800238a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800238a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800238c:	d3fb      	bcc.n	8002386 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800238e:	f7ff f9fb 	bl	8001788 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002392:	f005 fdef 	bl	8007f74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002396:	f7fe fdcd 	bl	8000f34 <main>
  bx  lr    
 800239a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800239c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80023a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023a4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80023a8:	08009600 	.word	0x08009600
  ldr r2, =_sbss
 80023ac:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80023b0:	2000437c 	.word	0x2000437c

080023b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023b4:	e7fe      	b.n	80023b4 <ADC_IRQHandler>
	...

080023b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023bc:	4b0e      	ldr	r3, [pc, #56]	; (80023f8 <HAL_Init+0x40>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a0d      	ldr	r2, [pc, #52]	; (80023f8 <HAL_Init+0x40>)
 80023c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023c8:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <HAL_Init+0x40>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a0a      	ldr	r2, [pc, #40]	; (80023f8 <HAL_Init+0x40>)
 80023ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023d4:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <HAL_Init+0x40>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a07      	ldr	r2, [pc, #28]	; (80023f8 <HAL_Init+0x40>)
 80023da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023e0:	2003      	movs	r0, #3
 80023e2:	f000 f94f 	bl	8002684 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023e6:	200f      	movs	r0, #15
 80023e8:	f000 f808 	bl	80023fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023ec:	f7fe ffd6 	bl	800139c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40023c00 	.word	0x40023c00

080023fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002404:	4b12      	ldr	r3, [pc, #72]	; (8002450 <HAL_InitTick+0x54>)
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	4b12      	ldr	r3, [pc, #72]	; (8002454 <HAL_InitTick+0x58>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	4619      	mov	r1, r3
 800240e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002412:	fbb3 f3f1 	udiv	r3, r3, r1
 8002416:	fbb2 f3f3 	udiv	r3, r2, r3
 800241a:	4618      	mov	r0, r3
 800241c:	f000 f967 	bl	80026ee <HAL_SYSTICK_Config>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e00e      	b.n	8002448 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b0f      	cmp	r3, #15
 800242e:	d80a      	bhi.n	8002446 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002430:	2200      	movs	r2, #0
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	f04f 30ff 	mov.w	r0, #4294967295
 8002438:	f000 f92f 	bl	800269a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800243c:	4a06      	ldr	r2, [pc, #24]	; (8002458 <HAL_InitTick+0x5c>)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002442:	2300      	movs	r3, #0
 8002444:	e000      	b.n	8002448 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
}
 8002448:	4618      	mov	r0, r3
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	20000000 	.word	0x20000000
 8002454:	2000000c 	.word	0x2000000c
 8002458:	20000008 	.word	0x20000008

0800245c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002460:	4b06      	ldr	r3, [pc, #24]	; (800247c <HAL_IncTick+0x20>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	461a      	mov	r2, r3
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <HAL_IncTick+0x24>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4413      	add	r3, r2
 800246c:	4a04      	ldr	r2, [pc, #16]	; (8002480 <HAL_IncTick+0x24>)
 800246e:	6013      	str	r3, [r2, #0]
}
 8002470:	bf00      	nop
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	2000000c 	.word	0x2000000c
 8002480:	200022fc 	.word	0x200022fc

08002484 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  return uwTick;
 8002488:	4b03      	ldr	r3, [pc, #12]	; (8002498 <HAL_GetTick+0x14>)
 800248a:	681b      	ldr	r3, [r3, #0]
}
 800248c:	4618      	mov	r0, r3
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	200022fc 	.word	0x200022fc

0800249c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024a4:	f7ff ffee 	bl	8002484 <HAL_GetTick>
 80024a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b4:	d005      	beq.n	80024c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024b6:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <HAL_Delay+0x44>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	461a      	mov	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	4413      	add	r3, r2
 80024c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024c2:	bf00      	nop
 80024c4:	f7ff ffde 	bl	8002484 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d8f7      	bhi.n	80024c4 <HAL_Delay+0x28>
  {
  }
}
 80024d4:	bf00      	nop
 80024d6:	bf00      	nop
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	2000000c 	.word	0x2000000c

080024e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024f4:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <__NVIC_SetPriorityGrouping+0x44>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002500:	4013      	ands	r3, r2
 8002502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800250c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002516:	4a04      	ldr	r2, [pc, #16]	; (8002528 <__NVIC_SetPriorityGrouping+0x44>)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	60d3      	str	r3, [r2, #12]
}
 800251c:	bf00      	nop
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	e000ed00 	.word	0xe000ed00

0800252c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002530:	4b04      	ldr	r3, [pc, #16]	; (8002544 <__NVIC_GetPriorityGrouping+0x18>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	0a1b      	lsrs	r3, r3, #8
 8002536:	f003 0307 	and.w	r3, r3, #7
}
 800253a:	4618      	mov	r0, r3
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	e000ed00 	.word	0xe000ed00

08002548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002556:	2b00      	cmp	r3, #0
 8002558:	db0b      	blt.n	8002572 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800255a:	79fb      	ldrb	r3, [r7, #7]
 800255c:	f003 021f 	and.w	r2, r3, #31
 8002560:	4907      	ldr	r1, [pc, #28]	; (8002580 <__NVIC_EnableIRQ+0x38>)
 8002562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002566:	095b      	lsrs	r3, r3, #5
 8002568:	2001      	movs	r0, #1
 800256a:	fa00 f202 	lsl.w	r2, r0, r2
 800256e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	e000e100 	.word	0xe000e100

08002584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	6039      	str	r1, [r7, #0]
 800258e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002594:	2b00      	cmp	r3, #0
 8002596:	db0a      	blt.n	80025ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	b2da      	uxtb	r2, r3
 800259c:	490c      	ldr	r1, [pc, #48]	; (80025d0 <__NVIC_SetPriority+0x4c>)
 800259e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a2:	0112      	lsls	r2, r2, #4
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	440b      	add	r3, r1
 80025a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025ac:	e00a      	b.n	80025c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	4908      	ldr	r1, [pc, #32]	; (80025d4 <__NVIC_SetPriority+0x50>)
 80025b4:	79fb      	ldrb	r3, [r7, #7]
 80025b6:	f003 030f 	and.w	r3, r3, #15
 80025ba:	3b04      	subs	r3, #4
 80025bc:	0112      	lsls	r2, r2, #4
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	440b      	add	r3, r1
 80025c2:	761a      	strb	r2, [r3, #24]
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	e000e100 	.word	0xe000e100
 80025d4:	e000ed00 	.word	0xe000ed00

080025d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025d8:	b480      	push	{r7}
 80025da:	b089      	sub	sp, #36	; 0x24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	f1c3 0307 	rsb	r3, r3, #7
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	bf28      	it	cs
 80025f6:	2304      	movcs	r3, #4
 80025f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	3304      	adds	r3, #4
 80025fe:	2b06      	cmp	r3, #6
 8002600:	d902      	bls.n	8002608 <NVIC_EncodePriority+0x30>
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	3b03      	subs	r3, #3
 8002606:	e000      	b.n	800260a <NVIC_EncodePriority+0x32>
 8002608:	2300      	movs	r3, #0
 800260a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800260c:	f04f 32ff 	mov.w	r2, #4294967295
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	43da      	mvns	r2, r3
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	401a      	ands	r2, r3
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002620:	f04f 31ff 	mov.w	r1, #4294967295
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	fa01 f303 	lsl.w	r3, r1, r3
 800262a:	43d9      	mvns	r1, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002630:	4313      	orrs	r3, r2
         );
}
 8002632:	4618      	mov	r0, r3
 8002634:	3724      	adds	r7, #36	; 0x24
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
	...

08002640 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3b01      	subs	r3, #1
 800264c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002650:	d301      	bcc.n	8002656 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002652:	2301      	movs	r3, #1
 8002654:	e00f      	b.n	8002676 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002656:	4a0a      	ldr	r2, [pc, #40]	; (8002680 <SysTick_Config+0x40>)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3b01      	subs	r3, #1
 800265c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800265e:	210f      	movs	r1, #15
 8002660:	f04f 30ff 	mov.w	r0, #4294967295
 8002664:	f7ff ff8e 	bl	8002584 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002668:	4b05      	ldr	r3, [pc, #20]	; (8002680 <SysTick_Config+0x40>)
 800266a:	2200      	movs	r2, #0
 800266c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800266e:	4b04      	ldr	r3, [pc, #16]	; (8002680 <SysTick_Config+0x40>)
 8002670:	2207      	movs	r2, #7
 8002672:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	e000e010 	.word	0xe000e010

08002684 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f7ff ff29 	bl	80024e4 <__NVIC_SetPriorityGrouping>
}
 8002692:	bf00      	nop
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800269a:	b580      	push	{r7, lr}
 800269c:	b086      	sub	sp, #24
 800269e:	af00      	add	r7, sp, #0
 80026a0:	4603      	mov	r3, r0
 80026a2:	60b9      	str	r1, [r7, #8]
 80026a4:	607a      	str	r2, [r7, #4]
 80026a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026ac:	f7ff ff3e 	bl	800252c <__NVIC_GetPriorityGrouping>
 80026b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	68b9      	ldr	r1, [r7, #8]
 80026b6:	6978      	ldr	r0, [r7, #20]
 80026b8:	f7ff ff8e 	bl	80025d8 <NVIC_EncodePriority>
 80026bc:	4602      	mov	r2, r0
 80026be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026c2:	4611      	mov	r1, r2
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff ff5d 	bl	8002584 <__NVIC_SetPriority>
}
 80026ca:	bf00      	nop
 80026cc:	3718      	adds	r7, #24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b082      	sub	sp, #8
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	4603      	mov	r3, r0
 80026da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff ff31 	bl	8002548 <__NVIC_EnableIRQ>
}
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b082      	sub	sp, #8
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7ff ffa2 	bl	8002640 <SysTick_Config>
 80026fc:	4603      	mov	r3, r0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002714:	f7ff feb6 	bl	8002484 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e099      	b.n	8002858 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2202      	movs	r2, #2
 8002728:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 0201 	bic.w	r2, r2, #1
 8002742:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002744:	e00f      	b.n	8002766 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002746:	f7ff fe9d 	bl	8002484 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b05      	cmp	r3, #5
 8002752:	d908      	bls.n	8002766 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2220      	movs	r2, #32
 8002758:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2203      	movs	r2, #3
 800275e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e078      	b.n	8002858 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1e8      	bne.n	8002746 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	4b38      	ldr	r3, [pc, #224]	; (8002860 <HAL_DMA_Init+0x158>)
 8002780:	4013      	ands	r3, r2
 8002782:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002792:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800279e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	2b04      	cmp	r3, #4
 80027be:	d107      	bne.n	80027d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c8:	4313      	orrs	r3, r2
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	f023 0307 	bic.w	r3, r3, #7
 80027e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ec:	697a      	ldr	r2, [r7, #20]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	d117      	bne.n	800282a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	4313      	orrs	r3, r2
 8002802:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00e      	beq.n	800282a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 fa91 	bl	8002d34 <DMA_CheckFifoParam>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d008      	beq.n	800282a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2240      	movs	r2, #64	; 0x40
 800281c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002826:	2301      	movs	r3, #1
 8002828:	e016      	b.n	8002858 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 fa48 	bl	8002cc8 <DMA_CalcBaseAndBitshift>
 8002838:	4603      	mov	r3, r0
 800283a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002840:	223f      	movs	r2, #63	; 0x3f
 8002842:	409a      	lsls	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	f010803f 	.word	0xf010803f

08002864 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
 8002870:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002872:	2300      	movs	r3, #0
 8002874:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002882:	2b01      	cmp	r3, #1
 8002884:	d101      	bne.n	800288a <HAL_DMA_Start_IT+0x26>
 8002886:	2302      	movs	r3, #2
 8002888:	e040      	b.n	800290c <HAL_DMA_Start_IT+0xa8>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b01      	cmp	r3, #1
 800289c:	d12f      	bne.n	80028fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2202      	movs	r2, #2
 80028a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	68b9      	ldr	r1, [r7, #8]
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f000 f9da 	bl	8002c6c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028bc:	223f      	movs	r2, #63	; 0x3f
 80028be:	409a      	lsls	r2, r3
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f042 0216 	orr.w	r2, r2, #22
 80028d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d007      	beq.n	80028ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f042 0208 	orr.w	r2, r2, #8
 80028ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f042 0201 	orr.w	r2, r2, #1
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	e005      	b.n	800290a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002906:	2302      	movs	r3, #2
 8002908:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800290a:	7dfb      	ldrb	r3, [r7, #23]
}
 800290c:	4618      	mov	r0, r3
 800290e:	3718      	adds	r7, #24
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d004      	beq.n	8002932 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2280      	movs	r2, #128	; 0x80
 800292c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e00c      	b.n	800294c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2205      	movs	r2, #5
 8002936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 0201 	bic.w	r2, r2, #1
 8002948:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002964:	4b92      	ldr	r3, [pc, #584]	; (8002bb0 <HAL_DMA_IRQHandler+0x258>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a92      	ldr	r2, [pc, #584]	; (8002bb4 <HAL_DMA_IRQHandler+0x25c>)
 800296a:	fba2 2303 	umull	r2, r3, r2, r3
 800296e:	0a9b      	lsrs	r3, r3, #10
 8002970:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002976:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002982:	2208      	movs	r2, #8
 8002984:	409a      	lsls	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	4013      	ands	r3, r2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d01a      	beq.n	80029c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	2b00      	cmp	r3, #0
 800299a:	d013      	beq.n	80029c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0204 	bic.w	r2, r2, #4
 80029aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b0:	2208      	movs	r2, #8
 80029b2:	409a      	lsls	r2, r3
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029bc:	f043 0201 	orr.w	r2, r3, #1
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c8:	2201      	movs	r2, #1
 80029ca:	409a      	lsls	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4013      	ands	r3, r2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d012      	beq.n	80029fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00b      	beq.n	80029fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e6:	2201      	movs	r2, #1
 80029e8:	409a      	lsls	r2, r3
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f2:	f043 0202 	orr.w	r2, r3, #2
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029fe:	2204      	movs	r2, #4
 8002a00:	409a      	lsls	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	4013      	ands	r3, r2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d012      	beq.n	8002a30 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00b      	beq.n	8002a30 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1c:	2204      	movs	r2, #4
 8002a1e:	409a      	lsls	r2, r3
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a28:	f043 0204 	orr.w	r2, r3, #4
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a34:	2210      	movs	r2, #16
 8002a36:	409a      	lsls	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d043      	beq.n	8002ac8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0308 	and.w	r3, r3, #8
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d03c      	beq.n	8002ac8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a52:	2210      	movs	r2, #16
 8002a54:	409a      	lsls	r2, r3
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d018      	beq.n	8002a9a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d108      	bne.n	8002a88 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d024      	beq.n	8002ac8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	4798      	blx	r3
 8002a86:	e01f      	b.n	8002ac8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d01b      	beq.n	8002ac8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	4798      	blx	r3
 8002a98:	e016      	b.n	8002ac8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d107      	bne.n	8002ab8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 0208 	bic.w	r2, r2, #8
 8002ab6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002acc:	2220      	movs	r2, #32
 8002ace:	409a      	lsls	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 808e 	beq.w	8002bf6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0310 	and.w	r3, r3, #16
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f000 8086 	beq.w	8002bf6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aee:	2220      	movs	r2, #32
 8002af0:	409a      	lsls	r2, r3
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b05      	cmp	r3, #5
 8002b00:	d136      	bne.n	8002b70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 0216 	bic.w	r2, r2, #22
 8002b10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	695a      	ldr	r2, [r3, #20]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d103      	bne.n	8002b32 <HAL_DMA_IRQHandler+0x1da>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d007      	beq.n	8002b42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 0208 	bic.w	r2, r2, #8
 8002b40:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b46:	223f      	movs	r2, #63	; 0x3f
 8002b48:	409a      	lsls	r2, r3
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d07d      	beq.n	8002c62 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	4798      	blx	r3
        }
        return;
 8002b6e:	e078      	b.n	8002c62 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d01c      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d108      	bne.n	8002b9e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d030      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	4798      	blx	r3
 8002b9c:	e02b      	b.n	8002bf6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d027      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	4798      	blx	r3
 8002bae:	e022      	b.n	8002bf6 <HAL_DMA_IRQHandler+0x29e>
 8002bb0:	20000000 	.word	0x20000000
 8002bb4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10f      	bne.n	8002be6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 0210 	bic.w	r2, r2, #16
 8002bd4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d032      	beq.n	8002c64 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d022      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2205      	movs	r2, #5
 8002c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 0201 	bic.w	r2, r2, #1
 8002c20:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	3301      	adds	r3, #1
 8002c26:	60bb      	str	r3, [r7, #8]
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d307      	bcc.n	8002c3e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1f2      	bne.n	8002c22 <HAL_DMA_IRQHandler+0x2ca>
 8002c3c:	e000      	b.n	8002c40 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002c3e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d005      	beq.n	8002c64 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	4798      	blx	r3
 8002c60:	e000      	b.n	8002c64 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002c62:	bf00      	nop
    }
  }
}
 8002c64:	3718      	adds	r7, #24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop

08002c6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
 8002c78:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c88:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	2b40      	cmp	r3, #64	; 0x40
 8002c98:	d108      	bne.n	8002cac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002caa:	e007      	b.n	8002cbc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68ba      	ldr	r2, [r7, #8]
 8002cb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	60da      	str	r2, [r3, #12]
}
 8002cbc:	bf00      	nop
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	3b10      	subs	r3, #16
 8002cd8:	4a14      	ldr	r2, [pc, #80]	; (8002d2c <DMA_CalcBaseAndBitshift+0x64>)
 8002cda:	fba2 2303 	umull	r2, r3, r2, r3
 8002cde:	091b      	lsrs	r3, r3, #4
 8002ce0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ce2:	4a13      	ldr	r2, [pc, #76]	; (8002d30 <DMA_CalcBaseAndBitshift+0x68>)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	461a      	mov	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2b03      	cmp	r3, #3
 8002cf4:	d909      	bls.n	8002d0a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002cfe:	f023 0303 	bic.w	r3, r3, #3
 8002d02:	1d1a      	adds	r2, r3, #4
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	659a      	str	r2, [r3, #88]	; 0x58
 8002d08:	e007      	b.n	8002d1a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d12:	f023 0303 	bic.w	r3, r3, #3
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3714      	adds	r7, #20
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	aaaaaaab 	.word	0xaaaaaaab
 8002d30:	080094d0 	.word	0x080094d0

08002d34 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d44:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d11f      	bne.n	8002d8e <DMA_CheckFifoParam+0x5a>
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	2b03      	cmp	r3, #3
 8002d52:	d856      	bhi.n	8002e02 <DMA_CheckFifoParam+0xce>
 8002d54:	a201      	add	r2, pc, #4	; (adr r2, 8002d5c <DMA_CheckFifoParam+0x28>)
 8002d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5a:	bf00      	nop
 8002d5c:	08002d6d 	.word	0x08002d6d
 8002d60:	08002d7f 	.word	0x08002d7f
 8002d64:	08002d6d 	.word	0x08002d6d
 8002d68:	08002e03 	.word	0x08002e03
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d046      	beq.n	8002e06 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d7c:	e043      	b.n	8002e06 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d82:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d86:	d140      	bne.n	8002e0a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d8c:	e03d      	b.n	8002e0a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d96:	d121      	bne.n	8002ddc <DMA_CheckFifoParam+0xa8>
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2b03      	cmp	r3, #3
 8002d9c:	d837      	bhi.n	8002e0e <DMA_CheckFifoParam+0xda>
 8002d9e:	a201      	add	r2, pc, #4	; (adr r2, 8002da4 <DMA_CheckFifoParam+0x70>)
 8002da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da4:	08002db5 	.word	0x08002db5
 8002da8:	08002dbb 	.word	0x08002dbb
 8002dac:	08002db5 	.word	0x08002db5
 8002db0:	08002dcd 	.word	0x08002dcd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	73fb      	strb	r3, [r7, #15]
      break;
 8002db8:	e030      	b.n	8002e1c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d025      	beq.n	8002e12 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dca:	e022      	b.n	8002e12 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002dd4:	d11f      	bne.n	8002e16 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002dda:	e01c      	b.n	8002e16 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d903      	bls.n	8002dea <DMA_CheckFifoParam+0xb6>
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	2b03      	cmp	r3, #3
 8002de6:	d003      	beq.n	8002df0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002de8:	e018      	b.n	8002e1c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	73fb      	strb	r3, [r7, #15]
      break;
 8002dee:	e015      	b.n	8002e1c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00e      	beq.n	8002e1a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8002e00:	e00b      	b.n	8002e1a <DMA_CheckFifoParam+0xe6>
      break;
 8002e02:	bf00      	nop
 8002e04:	e00a      	b.n	8002e1c <DMA_CheckFifoParam+0xe8>
      break;
 8002e06:	bf00      	nop
 8002e08:	e008      	b.n	8002e1c <DMA_CheckFifoParam+0xe8>
      break;
 8002e0a:	bf00      	nop
 8002e0c:	e006      	b.n	8002e1c <DMA_CheckFifoParam+0xe8>
      break;
 8002e0e:	bf00      	nop
 8002e10:	e004      	b.n	8002e1c <DMA_CheckFifoParam+0xe8>
      break;
 8002e12:	bf00      	nop
 8002e14:	e002      	b.n	8002e1c <DMA_CheckFifoParam+0xe8>
      break;   
 8002e16:	bf00      	nop
 8002e18:	e000      	b.n	8002e1c <DMA_CheckFifoParam+0xe8>
      break;
 8002e1a:	bf00      	nop
    }
  } 
  
  return status; 
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3714      	adds	r7, #20
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop

08002e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b089      	sub	sp, #36	; 0x24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e42:	2300      	movs	r3, #0
 8002e44:	61fb      	str	r3, [r7, #28]
 8002e46:	e177      	b.n	8003138 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e48:	2201      	movs	r2, #1
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	f040 8166 	bne.w	8003132 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f003 0303 	and.w	r3, r3, #3
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d005      	beq.n	8002e7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d130      	bne.n	8002ee0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	2203      	movs	r2, #3
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4013      	ands	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	68da      	ldr	r2, [r3, #12]
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	091b      	lsrs	r3, r3, #4
 8002eca:	f003 0201 	and.w	r2, r3, #1
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f003 0303 	and.w	r3, r3, #3
 8002ee8:	2b03      	cmp	r3, #3
 8002eea:	d017      	beq.n	8002f1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	2203      	movs	r2, #3
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	43db      	mvns	r3, r3
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	4013      	ands	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f003 0303 	and.w	r3, r3, #3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d123      	bne.n	8002f70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	08da      	lsrs	r2, r3, #3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3208      	adds	r2, #8
 8002f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	220f      	movs	r2, #15
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	43db      	mvns	r3, r3
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	08da      	lsrs	r2, r3, #3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	3208      	adds	r2, #8
 8002f6a:	69b9      	ldr	r1, [r7, #24]
 8002f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	2203      	movs	r2, #3
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4013      	ands	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f003 0203 	and.w	r2, r3, #3
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 80c0 	beq.w	8003132 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	4b66      	ldr	r3, [pc, #408]	; (8003150 <HAL_GPIO_Init+0x324>)
 8002fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fba:	4a65      	ldr	r2, [pc, #404]	; (8003150 <HAL_GPIO_Init+0x324>)
 8002fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8002fc2:	4b63      	ldr	r3, [pc, #396]	; (8003150 <HAL_GPIO_Init+0x324>)
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fce:	4a61      	ldr	r2, [pc, #388]	; (8003154 <HAL_GPIO_Init+0x328>)
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	089b      	lsrs	r3, r3, #2
 8002fd4:	3302      	adds	r3, #2
 8002fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	220f      	movs	r2, #15
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	43db      	mvns	r3, r3
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a58      	ldr	r2, [pc, #352]	; (8003158 <HAL_GPIO_Init+0x32c>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d037      	beq.n	800306a <HAL_GPIO_Init+0x23e>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a57      	ldr	r2, [pc, #348]	; (800315c <HAL_GPIO_Init+0x330>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d031      	beq.n	8003066 <HAL_GPIO_Init+0x23a>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a56      	ldr	r2, [pc, #344]	; (8003160 <HAL_GPIO_Init+0x334>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d02b      	beq.n	8003062 <HAL_GPIO_Init+0x236>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a55      	ldr	r2, [pc, #340]	; (8003164 <HAL_GPIO_Init+0x338>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d025      	beq.n	800305e <HAL_GPIO_Init+0x232>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a54      	ldr	r2, [pc, #336]	; (8003168 <HAL_GPIO_Init+0x33c>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d01f      	beq.n	800305a <HAL_GPIO_Init+0x22e>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a53      	ldr	r2, [pc, #332]	; (800316c <HAL_GPIO_Init+0x340>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d019      	beq.n	8003056 <HAL_GPIO_Init+0x22a>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a52      	ldr	r2, [pc, #328]	; (8003170 <HAL_GPIO_Init+0x344>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d013      	beq.n	8003052 <HAL_GPIO_Init+0x226>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a51      	ldr	r2, [pc, #324]	; (8003174 <HAL_GPIO_Init+0x348>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d00d      	beq.n	800304e <HAL_GPIO_Init+0x222>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a50      	ldr	r2, [pc, #320]	; (8003178 <HAL_GPIO_Init+0x34c>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d007      	beq.n	800304a <HAL_GPIO_Init+0x21e>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a4f      	ldr	r2, [pc, #316]	; (800317c <HAL_GPIO_Init+0x350>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d101      	bne.n	8003046 <HAL_GPIO_Init+0x21a>
 8003042:	2309      	movs	r3, #9
 8003044:	e012      	b.n	800306c <HAL_GPIO_Init+0x240>
 8003046:	230a      	movs	r3, #10
 8003048:	e010      	b.n	800306c <HAL_GPIO_Init+0x240>
 800304a:	2308      	movs	r3, #8
 800304c:	e00e      	b.n	800306c <HAL_GPIO_Init+0x240>
 800304e:	2307      	movs	r3, #7
 8003050:	e00c      	b.n	800306c <HAL_GPIO_Init+0x240>
 8003052:	2306      	movs	r3, #6
 8003054:	e00a      	b.n	800306c <HAL_GPIO_Init+0x240>
 8003056:	2305      	movs	r3, #5
 8003058:	e008      	b.n	800306c <HAL_GPIO_Init+0x240>
 800305a:	2304      	movs	r3, #4
 800305c:	e006      	b.n	800306c <HAL_GPIO_Init+0x240>
 800305e:	2303      	movs	r3, #3
 8003060:	e004      	b.n	800306c <HAL_GPIO_Init+0x240>
 8003062:	2302      	movs	r3, #2
 8003064:	e002      	b.n	800306c <HAL_GPIO_Init+0x240>
 8003066:	2301      	movs	r3, #1
 8003068:	e000      	b.n	800306c <HAL_GPIO_Init+0x240>
 800306a:	2300      	movs	r3, #0
 800306c:	69fa      	ldr	r2, [r7, #28]
 800306e:	f002 0203 	and.w	r2, r2, #3
 8003072:	0092      	lsls	r2, r2, #2
 8003074:	4093      	lsls	r3, r2
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	4313      	orrs	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800307c:	4935      	ldr	r1, [pc, #212]	; (8003154 <HAL_GPIO_Init+0x328>)
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	089b      	lsrs	r3, r3, #2
 8003082:	3302      	adds	r3, #2
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800308a:	4b3d      	ldr	r3, [pc, #244]	; (8003180 <HAL_GPIO_Init+0x354>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	43db      	mvns	r3, r3
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	4013      	ands	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d003      	beq.n	80030ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030ae:	4a34      	ldr	r2, [pc, #208]	; (8003180 <HAL_GPIO_Init+0x354>)
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80030b4:	4b32      	ldr	r3, [pc, #200]	; (8003180 <HAL_GPIO_Init+0x354>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	43db      	mvns	r3, r3
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4013      	ands	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d003      	beq.n	80030d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030d8:	4a29      	ldr	r2, [pc, #164]	; (8003180 <HAL_GPIO_Init+0x354>)
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030de:	4b28      	ldr	r3, [pc, #160]	; (8003180 <HAL_GPIO_Init+0x354>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	43db      	mvns	r3, r3
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	4013      	ands	r3, r2
 80030ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	4313      	orrs	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003102:	4a1f      	ldr	r2, [pc, #124]	; (8003180 <HAL_GPIO_Init+0x354>)
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003108:	4b1d      	ldr	r3, [pc, #116]	; (8003180 <HAL_GPIO_Init+0x354>)
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	43db      	mvns	r3, r3
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	4013      	ands	r3, r2
 8003116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d003      	beq.n	800312c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	4313      	orrs	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800312c:	4a14      	ldr	r2, [pc, #80]	; (8003180 <HAL_GPIO_Init+0x354>)
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	3301      	adds	r3, #1
 8003136:	61fb      	str	r3, [r7, #28]
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	2b0f      	cmp	r3, #15
 800313c:	f67f ae84 	bls.w	8002e48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003140:	bf00      	nop
 8003142:	bf00      	nop
 8003144:	3724      	adds	r7, #36	; 0x24
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	40023800 	.word	0x40023800
 8003154:	40013800 	.word	0x40013800
 8003158:	40020000 	.word	0x40020000
 800315c:	40020400 	.word	0x40020400
 8003160:	40020800 	.word	0x40020800
 8003164:	40020c00 	.word	0x40020c00
 8003168:	40021000 	.word	0x40021000
 800316c:	40021400 	.word	0x40021400
 8003170:	40021800 	.word	0x40021800
 8003174:	40021c00 	.word	0x40021c00
 8003178:	40022000 	.word	0x40022000
 800317c:	40022400 	.word	0x40022400
 8003180:	40013c00 	.word	0x40013c00

08003184 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	460b      	mov	r3, r1
 800318e:	807b      	strh	r3, [r7, #2]
 8003190:	4613      	mov	r3, r2
 8003192:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003194:	787b      	ldrb	r3, [r7, #1]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800319a:	887a      	ldrh	r2, [r7, #2]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031a0:	e003      	b.n	80031aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031a2:	887b      	ldrh	r3, [r7, #2]
 80031a4:	041a      	lsls	r2, r3, #16
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	619a      	str	r2, [r3, #24]
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b085      	sub	sp, #20
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	460b      	mov	r3, r1
 80031c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031c8:	887a      	ldrh	r2, [r7, #2]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	4013      	ands	r3, r2
 80031ce:	041a      	lsls	r2, r3, #16
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	43d9      	mvns	r1, r3
 80031d4:	887b      	ldrh	r3, [r7, #2]
 80031d6:	400b      	ands	r3, r1
 80031d8:	431a      	orrs	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	619a      	str	r2, [r3, #24]
}
 80031de:	bf00      	nop
 80031e0:	3714      	adds	r7, #20
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
	...

080031ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e264      	b.n	80036c8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d075      	beq.n	80032f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800320a:	4ba3      	ldr	r3, [pc, #652]	; (8003498 <HAL_RCC_OscConfig+0x2ac>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 030c 	and.w	r3, r3, #12
 8003212:	2b04      	cmp	r3, #4
 8003214:	d00c      	beq.n	8003230 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003216:	4ba0      	ldr	r3, [pc, #640]	; (8003498 <HAL_RCC_OscConfig+0x2ac>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800321e:	2b08      	cmp	r3, #8
 8003220:	d112      	bne.n	8003248 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003222:	4b9d      	ldr	r3, [pc, #628]	; (8003498 <HAL_RCC_OscConfig+0x2ac>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800322a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800322e:	d10b      	bne.n	8003248 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003230:	4b99      	ldr	r3, [pc, #612]	; (8003498 <HAL_RCC_OscConfig+0x2ac>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d05b      	beq.n	80032f4 <HAL_RCC_OscConfig+0x108>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d157      	bne.n	80032f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e23f      	b.n	80036c8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003250:	d106      	bne.n	8003260 <HAL_RCC_OscConfig+0x74>
 8003252:	4b91      	ldr	r3, [pc, #580]	; (8003498 <HAL_RCC_OscConfig+0x2ac>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a90      	ldr	r2, [pc, #576]	; (8003498 <HAL_RCC_OscConfig+0x2ac>)
 8003258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800325c:	6013      	str	r3, [r2, #0]
 800325e:	e01d      	b.n	800329c <HAL_RCC_OscConfig+0xb0>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003268:	d10c      	bne.n	8003284 <HAL_RCC_OscConfig+0x98>
 800326a:	4b8b      	ldr	r3, [pc, #556]	; (8003498 <HAL_RCC_OscConfig+0x2ac>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a8a      	ldr	r2, [pc, #552]	; (8003498 <HAL_RCC_OscConfig+0x2ac>)
 8003270:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	4b88      	ldr	r3, [pc, #544]	; (8003498 <HAL_RCC_OscConfig+0x2ac>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a87      	ldr	r2, [pc, #540]	; (8003498 <HAL_RCC_OscConfig+0x2ac>)
 800327c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003280:	6013      	str	r3, [r2, #0]
 8003282:	e00b      	b.n	800329c <HAL_RCC_OscConfig+0xb0>
 8003284:	4b84      	ldr	r3, [pc, #528]	; (8003498 <HAL_RCC_OscConfig+0x2ac>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a83      	ldr	r2, [pc, #524]	; (8003498 <HAL_RCC_OscConfig+0x2ac>)
 800328a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800328e:	6013      	str	r3, [r2, #0]
 8003290:	4b81      	ldr	r3, [pc, #516]	; (8003498 <HAL_RCC_OscConfig+0x2ac>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a80      	ldr	r2, [pc, #512]	; (8003498 <HAL_RCC_OscConfig+0x2ac>)
 8003296:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800329a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d013      	beq.n	80032cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a4:	f7ff f8ee 	bl	8002484 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032ac:	f7ff f8ea 	bl	8002484 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b64      	cmp	r3, #100	; 0x64
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e204      	b.n	80036c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032be:	4b76      	ldr	r3, [pc, #472]	; (8003498 <HAL_RCC_OscConfig+0x2ac>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0f0      	beq.n	80032ac <HAL_RCC_OscConfig+0xc0>
 80032ca:	e014      	b.n	80032f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032cc:	f7ff f8da 	bl	8002484 <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032d4:	f7ff f8d6 	bl	8002484 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b64      	cmp	r3, #100	; 0x64
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e1f0      	b.n	80036c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032e6:	4b6c      	ldr	r3, [pc, #432]	; (8003498 <HAL_RCC_OscConfig+0x2ac>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1f0      	bne.n	80032d4 <HAL_RCC_OscConfig+0xe8>
 80032f2:	e000      	b.n	80032f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d063      	beq.n	80033ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003302:	4b65      	ldr	r3, [pc, #404]	; (8003498 <HAL_RCC_OscConfig+0x2ac>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 030c 	and.w	r3, r3, #12
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00b      	beq.n	8003326 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800330e:	4b62      	ldr	r3, [pc, #392]	; (8003498 <HAL_RCC_OscConfig+0x2ac>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003316:	2b08      	cmp	r3, #8
 8003318:	d11c      	bne.n	8003354 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800331a:	4b5f      	ldr	r3, [pc, #380]	; (8003498 <HAL_RCC_OscConfig+0x2ac>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d116      	bne.n	8003354 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003326:	4b5c      	ldr	r3, [pc, #368]	; (8003498 <HAL_RCC_OscConfig+0x2ac>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d005      	beq.n	800333e <HAL_RCC_OscConfig+0x152>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d001      	beq.n	800333e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e1c4      	b.n	80036c8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800333e:	4b56      	ldr	r3, [pc, #344]	; (8003498 <HAL_RCC_OscConfig+0x2ac>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	4952      	ldr	r1, [pc, #328]	; (8003498 <HAL_RCC_OscConfig+0x2ac>)
 800334e:	4313      	orrs	r3, r2
 8003350:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003352:	e03a      	b.n	80033ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d020      	beq.n	800339e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800335c:	4b4f      	ldr	r3, [pc, #316]	; (800349c <HAL_RCC_OscConfig+0x2b0>)
 800335e:	2201      	movs	r2, #1
 8003360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003362:	f7ff f88f 	bl	8002484 <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003368:	e008      	b.n	800337c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800336a:	f7ff f88b 	bl	8002484 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e1a5      	b.n	80036c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800337c:	4b46      	ldr	r3, [pc, #280]	; (8003498 <HAL_RCC_OscConfig+0x2ac>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0f0      	beq.n	800336a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003388:	4b43      	ldr	r3, [pc, #268]	; (8003498 <HAL_RCC_OscConfig+0x2ac>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	4940      	ldr	r1, [pc, #256]	; (8003498 <HAL_RCC_OscConfig+0x2ac>)
 8003398:	4313      	orrs	r3, r2
 800339a:	600b      	str	r3, [r1, #0]
 800339c:	e015      	b.n	80033ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800339e:	4b3f      	ldr	r3, [pc, #252]	; (800349c <HAL_RCC_OscConfig+0x2b0>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a4:	f7ff f86e 	bl	8002484 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033ac:	f7ff f86a 	bl	8002484 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e184      	b.n	80036c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033be:	4b36      	ldr	r3, [pc, #216]	; (8003498 <HAL_RCC_OscConfig+0x2ac>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1f0      	bne.n	80033ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0308 	and.w	r3, r3, #8
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d030      	beq.n	8003438 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d016      	beq.n	800340c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033de:	4b30      	ldr	r3, [pc, #192]	; (80034a0 <HAL_RCC_OscConfig+0x2b4>)
 80033e0:	2201      	movs	r2, #1
 80033e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e4:	f7ff f84e 	bl	8002484 <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033ec:	f7ff f84a 	bl	8002484 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e164      	b.n	80036c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033fe:	4b26      	ldr	r3, [pc, #152]	; (8003498 <HAL_RCC_OscConfig+0x2ac>)
 8003400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0f0      	beq.n	80033ec <HAL_RCC_OscConfig+0x200>
 800340a:	e015      	b.n	8003438 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800340c:	4b24      	ldr	r3, [pc, #144]	; (80034a0 <HAL_RCC_OscConfig+0x2b4>)
 800340e:	2200      	movs	r2, #0
 8003410:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003412:	f7ff f837 	bl	8002484 <HAL_GetTick>
 8003416:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003418:	e008      	b.n	800342c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800341a:	f7ff f833 	bl	8002484 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d901      	bls.n	800342c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e14d      	b.n	80036c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800342c:	4b1a      	ldr	r3, [pc, #104]	; (8003498 <HAL_RCC_OscConfig+0x2ac>)
 800342e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1f0      	bne.n	800341a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	2b00      	cmp	r3, #0
 8003442:	f000 80a0 	beq.w	8003586 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003446:	2300      	movs	r3, #0
 8003448:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800344a:	4b13      	ldr	r3, [pc, #76]	; (8003498 <HAL_RCC_OscConfig+0x2ac>)
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10f      	bne.n	8003476 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003456:	2300      	movs	r3, #0
 8003458:	60bb      	str	r3, [r7, #8]
 800345a:	4b0f      	ldr	r3, [pc, #60]	; (8003498 <HAL_RCC_OscConfig+0x2ac>)
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	4a0e      	ldr	r2, [pc, #56]	; (8003498 <HAL_RCC_OscConfig+0x2ac>)
 8003460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003464:	6413      	str	r3, [r2, #64]	; 0x40
 8003466:	4b0c      	ldr	r3, [pc, #48]	; (8003498 <HAL_RCC_OscConfig+0x2ac>)
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346e:	60bb      	str	r3, [r7, #8]
 8003470:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003472:	2301      	movs	r3, #1
 8003474:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003476:	4b0b      	ldr	r3, [pc, #44]	; (80034a4 <HAL_RCC_OscConfig+0x2b8>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347e:	2b00      	cmp	r3, #0
 8003480:	d121      	bne.n	80034c6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003482:	4b08      	ldr	r3, [pc, #32]	; (80034a4 <HAL_RCC_OscConfig+0x2b8>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a07      	ldr	r2, [pc, #28]	; (80034a4 <HAL_RCC_OscConfig+0x2b8>)
 8003488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800348c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800348e:	f7fe fff9 	bl	8002484 <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003494:	e011      	b.n	80034ba <HAL_RCC_OscConfig+0x2ce>
 8003496:	bf00      	nop
 8003498:	40023800 	.word	0x40023800
 800349c:	42470000 	.word	0x42470000
 80034a0:	42470e80 	.word	0x42470e80
 80034a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034a8:	f7fe ffec 	bl	8002484 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e106      	b.n	80036c8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ba:	4b85      	ldr	r3, [pc, #532]	; (80036d0 <HAL_RCC_OscConfig+0x4e4>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d0f0      	beq.n	80034a8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d106      	bne.n	80034dc <HAL_RCC_OscConfig+0x2f0>
 80034ce:	4b81      	ldr	r3, [pc, #516]	; (80036d4 <HAL_RCC_OscConfig+0x4e8>)
 80034d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d2:	4a80      	ldr	r2, [pc, #512]	; (80036d4 <HAL_RCC_OscConfig+0x4e8>)
 80034d4:	f043 0301 	orr.w	r3, r3, #1
 80034d8:	6713      	str	r3, [r2, #112]	; 0x70
 80034da:	e01c      	b.n	8003516 <HAL_RCC_OscConfig+0x32a>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	2b05      	cmp	r3, #5
 80034e2:	d10c      	bne.n	80034fe <HAL_RCC_OscConfig+0x312>
 80034e4:	4b7b      	ldr	r3, [pc, #492]	; (80036d4 <HAL_RCC_OscConfig+0x4e8>)
 80034e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e8:	4a7a      	ldr	r2, [pc, #488]	; (80036d4 <HAL_RCC_OscConfig+0x4e8>)
 80034ea:	f043 0304 	orr.w	r3, r3, #4
 80034ee:	6713      	str	r3, [r2, #112]	; 0x70
 80034f0:	4b78      	ldr	r3, [pc, #480]	; (80036d4 <HAL_RCC_OscConfig+0x4e8>)
 80034f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f4:	4a77      	ldr	r2, [pc, #476]	; (80036d4 <HAL_RCC_OscConfig+0x4e8>)
 80034f6:	f043 0301 	orr.w	r3, r3, #1
 80034fa:	6713      	str	r3, [r2, #112]	; 0x70
 80034fc:	e00b      	b.n	8003516 <HAL_RCC_OscConfig+0x32a>
 80034fe:	4b75      	ldr	r3, [pc, #468]	; (80036d4 <HAL_RCC_OscConfig+0x4e8>)
 8003500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003502:	4a74      	ldr	r2, [pc, #464]	; (80036d4 <HAL_RCC_OscConfig+0x4e8>)
 8003504:	f023 0301 	bic.w	r3, r3, #1
 8003508:	6713      	str	r3, [r2, #112]	; 0x70
 800350a:	4b72      	ldr	r3, [pc, #456]	; (80036d4 <HAL_RCC_OscConfig+0x4e8>)
 800350c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350e:	4a71      	ldr	r2, [pc, #452]	; (80036d4 <HAL_RCC_OscConfig+0x4e8>)
 8003510:	f023 0304 	bic.w	r3, r3, #4
 8003514:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d015      	beq.n	800354a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800351e:	f7fe ffb1 	bl	8002484 <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003524:	e00a      	b.n	800353c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003526:	f7fe ffad 	bl	8002484 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	f241 3288 	movw	r2, #5000	; 0x1388
 8003534:	4293      	cmp	r3, r2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e0c5      	b.n	80036c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800353c:	4b65      	ldr	r3, [pc, #404]	; (80036d4 <HAL_RCC_OscConfig+0x4e8>)
 800353e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0ee      	beq.n	8003526 <HAL_RCC_OscConfig+0x33a>
 8003548:	e014      	b.n	8003574 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800354a:	f7fe ff9b 	bl	8002484 <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003550:	e00a      	b.n	8003568 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003552:	f7fe ff97 	bl	8002484 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003560:	4293      	cmp	r3, r2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e0af      	b.n	80036c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003568:	4b5a      	ldr	r3, [pc, #360]	; (80036d4 <HAL_RCC_OscConfig+0x4e8>)
 800356a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1ee      	bne.n	8003552 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003574:	7dfb      	ldrb	r3, [r7, #23]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d105      	bne.n	8003586 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800357a:	4b56      	ldr	r3, [pc, #344]	; (80036d4 <HAL_RCC_OscConfig+0x4e8>)
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	4a55      	ldr	r2, [pc, #340]	; (80036d4 <HAL_RCC_OscConfig+0x4e8>)
 8003580:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003584:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 809b 	beq.w	80036c6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003590:	4b50      	ldr	r3, [pc, #320]	; (80036d4 <HAL_RCC_OscConfig+0x4e8>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 030c 	and.w	r3, r3, #12
 8003598:	2b08      	cmp	r3, #8
 800359a:	d05c      	beq.n	8003656 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d141      	bne.n	8003628 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035a4:	4b4c      	ldr	r3, [pc, #304]	; (80036d8 <HAL_RCC_OscConfig+0x4ec>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035aa:	f7fe ff6b 	bl	8002484 <HAL_GetTick>
 80035ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035b0:	e008      	b.n	80035c4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035b2:	f7fe ff67 	bl	8002484 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e081      	b.n	80036c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035c4:	4b43      	ldr	r3, [pc, #268]	; (80036d4 <HAL_RCC_OscConfig+0x4e8>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1f0      	bne.n	80035b2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	69da      	ldr	r2, [r3, #28]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	431a      	orrs	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	019b      	lsls	r3, r3, #6
 80035e0:	431a      	orrs	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e6:	085b      	lsrs	r3, r3, #1
 80035e8:	3b01      	subs	r3, #1
 80035ea:	041b      	lsls	r3, r3, #16
 80035ec:	431a      	orrs	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f2:	061b      	lsls	r3, r3, #24
 80035f4:	4937      	ldr	r1, [pc, #220]	; (80036d4 <HAL_RCC_OscConfig+0x4e8>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035fa:	4b37      	ldr	r3, [pc, #220]	; (80036d8 <HAL_RCC_OscConfig+0x4ec>)
 80035fc:	2201      	movs	r2, #1
 80035fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003600:	f7fe ff40 	bl	8002484 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003608:	f7fe ff3c 	bl	8002484 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e056      	b.n	80036c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800361a:	4b2e      	ldr	r3, [pc, #184]	; (80036d4 <HAL_RCC_OscConfig+0x4e8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0f0      	beq.n	8003608 <HAL_RCC_OscConfig+0x41c>
 8003626:	e04e      	b.n	80036c6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003628:	4b2b      	ldr	r3, [pc, #172]	; (80036d8 <HAL_RCC_OscConfig+0x4ec>)
 800362a:	2200      	movs	r2, #0
 800362c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800362e:	f7fe ff29 	bl	8002484 <HAL_GetTick>
 8003632:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003634:	e008      	b.n	8003648 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003636:	f7fe ff25 	bl	8002484 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d901      	bls.n	8003648 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e03f      	b.n	80036c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003648:	4b22      	ldr	r3, [pc, #136]	; (80036d4 <HAL_RCC_OscConfig+0x4e8>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1f0      	bne.n	8003636 <HAL_RCC_OscConfig+0x44a>
 8003654:	e037      	b.n	80036c6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d101      	bne.n	8003662 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e032      	b.n	80036c8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003662:	4b1c      	ldr	r3, [pc, #112]	; (80036d4 <HAL_RCC_OscConfig+0x4e8>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d028      	beq.n	80036c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800367a:	429a      	cmp	r2, r3
 800367c:	d121      	bne.n	80036c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003688:	429a      	cmp	r2, r3
 800368a:	d11a      	bne.n	80036c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003692:	4013      	ands	r3, r2
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003698:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800369a:	4293      	cmp	r3, r2
 800369c:	d111      	bne.n	80036c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a8:	085b      	lsrs	r3, r3, #1
 80036aa:	3b01      	subs	r3, #1
 80036ac:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d107      	bne.n	80036c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036bc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036be:	429a      	cmp	r2, r3
 80036c0:	d001      	beq.n	80036c6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e000      	b.n	80036c8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3718      	adds	r7, #24
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	40007000 	.word	0x40007000
 80036d4:	40023800 	.word	0x40023800
 80036d8:	42470060 	.word	0x42470060

080036dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d101      	bne.n	80036f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e0cc      	b.n	800388a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036f0:	4b68      	ldr	r3, [pc, #416]	; (8003894 <HAL_RCC_ClockConfig+0x1b8>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 030f 	and.w	r3, r3, #15
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d90c      	bls.n	8003718 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036fe:	4b65      	ldr	r3, [pc, #404]	; (8003894 <HAL_RCC_ClockConfig+0x1b8>)
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003706:	4b63      	ldr	r3, [pc, #396]	; (8003894 <HAL_RCC_ClockConfig+0x1b8>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 030f 	and.w	r3, r3, #15
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	429a      	cmp	r2, r3
 8003712:	d001      	beq.n	8003718 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e0b8      	b.n	800388a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d020      	beq.n	8003766 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0304 	and.w	r3, r3, #4
 800372c:	2b00      	cmp	r3, #0
 800372e:	d005      	beq.n	800373c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003730:	4b59      	ldr	r3, [pc, #356]	; (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	4a58      	ldr	r2, [pc, #352]	; (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 8003736:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800373a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0308 	and.w	r3, r3, #8
 8003744:	2b00      	cmp	r3, #0
 8003746:	d005      	beq.n	8003754 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003748:	4b53      	ldr	r3, [pc, #332]	; (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	4a52      	ldr	r2, [pc, #328]	; (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 800374e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003752:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003754:	4b50      	ldr	r3, [pc, #320]	; (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	494d      	ldr	r1, [pc, #308]	; (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 8003762:	4313      	orrs	r3, r2
 8003764:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d044      	beq.n	80037fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d107      	bne.n	800378a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800377a:	4b47      	ldr	r3, [pc, #284]	; (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d119      	bne.n	80037ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e07f      	b.n	800388a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	2b02      	cmp	r3, #2
 8003790:	d003      	beq.n	800379a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003796:	2b03      	cmp	r3, #3
 8003798:	d107      	bne.n	80037aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800379a:	4b3f      	ldr	r3, [pc, #252]	; (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d109      	bne.n	80037ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e06f      	b.n	800388a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037aa:	4b3b      	ldr	r3, [pc, #236]	; (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e067      	b.n	800388a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ba:	4b37      	ldr	r3, [pc, #220]	; (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f023 0203 	bic.w	r2, r3, #3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	4934      	ldr	r1, [pc, #208]	; (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037cc:	f7fe fe5a 	bl	8002484 <HAL_GetTick>
 80037d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037d2:	e00a      	b.n	80037ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037d4:	f7fe fe56 	bl	8002484 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e04f      	b.n	800388a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ea:	4b2b      	ldr	r3, [pc, #172]	; (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 020c 	and.w	r2, r3, #12
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d1eb      	bne.n	80037d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037fc:	4b25      	ldr	r3, [pc, #148]	; (8003894 <HAL_RCC_ClockConfig+0x1b8>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 030f 	and.w	r3, r3, #15
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	429a      	cmp	r2, r3
 8003808:	d20c      	bcs.n	8003824 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800380a:	4b22      	ldr	r3, [pc, #136]	; (8003894 <HAL_RCC_ClockConfig+0x1b8>)
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	b2d2      	uxtb	r2, r2
 8003810:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003812:	4b20      	ldr	r3, [pc, #128]	; (8003894 <HAL_RCC_ClockConfig+0x1b8>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 030f 	and.w	r3, r3, #15
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	429a      	cmp	r2, r3
 800381e:	d001      	beq.n	8003824 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e032      	b.n	800388a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0304 	and.w	r3, r3, #4
 800382c:	2b00      	cmp	r3, #0
 800382e:	d008      	beq.n	8003842 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003830:	4b19      	ldr	r3, [pc, #100]	; (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	4916      	ldr	r1, [pc, #88]	; (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 800383e:	4313      	orrs	r3, r2
 8003840:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0308 	and.w	r3, r3, #8
 800384a:	2b00      	cmp	r3, #0
 800384c:	d009      	beq.n	8003862 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800384e:	4b12      	ldr	r3, [pc, #72]	; (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	490e      	ldr	r1, [pc, #56]	; (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 800385e:	4313      	orrs	r3, r2
 8003860:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003862:	f000 f821 	bl	80038a8 <HAL_RCC_GetSysClockFreq>
 8003866:	4602      	mov	r2, r0
 8003868:	4b0b      	ldr	r3, [pc, #44]	; (8003898 <HAL_RCC_ClockConfig+0x1bc>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	091b      	lsrs	r3, r3, #4
 800386e:	f003 030f 	and.w	r3, r3, #15
 8003872:	490a      	ldr	r1, [pc, #40]	; (800389c <HAL_RCC_ClockConfig+0x1c0>)
 8003874:	5ccb      	ldrb	r3, [r1, r3]
 8003876:	fa22 f303 	lsr.w	r3, r2, r3
 800387a:	4a09      	ldr	r2, [pc, #36]	; (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 800387c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800387e:	4b09      	ldr	r3, [pc, #36]	; (80038a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4618      	mov	r0, r3
 8003884:	f7fe fdba 	bl	80023fc <HAL_InitTick>

  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	40023c00 	.word	0x40023c00
 8003898:	40023800 	.word	0x40023800
 800389c:	080094a4 	.word	0x080094a4
 80038a0:	20000000 	.word	0x20000000
 80038a4:	20000008 	.word	0x20000008

080038a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038a8:	b5b0      	push	{r4, r5, r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038ae:	2100      	movs	r1, #0
 80038b0:	6079      	str	r1, [r7, #4]
 80038b2:	2100      	movs	r1, #0
 80038b4:	60f9      	str	r1, [r7, #12]
 80038b6:	2100      	movs	r1, #0
 80038b8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80038ba:	2100      	movs	r1, #0
 80038bc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038be:	4952      	ldr	r1, [pc, #328]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x160>)
 80038c0:	6889      	ldr	r1, [r1, #8]
 80038c2:	f001 010c 	and.w	r1, r1, #12
 80038c6:	2908      	cmp	r1, #8
 80038c8:	d00d      	beq.n	80038e6 <HAL_RCC_GetSysClockFreq+0x3e>
 80038ca:	2908      	cmp	r1, #8
 80038cc:	f200 8094 	bhi.w	80039f8 <HAL_RCC_GetSysClockFreq+0x150>
 80038d0:	2900      	cmp	r1, #0
 80038d2:	d002      	beq.n	80038da <HAL_RCC_GetSysClockFreq+0x32>
 80038d4:	2904      	cmp	r1, #4
 80038d6:	d003      	beq.n	80038e0 <HAL_RCC_GetSysClockFreq+0x38>
 80038d8:	e08e      	b.n	80039f8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038da:	4b4c      	ldr	r3, [pc, #304]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x164>)
 80038dc:	60bb      	str	r3, [r7, #8]
       break;
 80038de:	e08e      	b.n	80039fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038e0:	4b4b      	ldr	r3, [pc, #300]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x168>)
 80038e2:	60bb      	str	r3, [r7, #8]
      break;
 80038e4:	e08b      	b.n	80039fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038e6:	4948      	ldr	r1, [pc, #288]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x160>)
 80038e8:	6849      	ldr	r1, [r1, #4]
 80038ea:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80038ee:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038f0:	4945      	ldr	r1, [pc, #276]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x160>)
 80038f2:	6849      	ldr	r1, [r1, #4]
 80038f4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80038f8:	2900      	cmp	r1, #0
 80038fa:	d024      	beq.n	8003946 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038fc:	4942      	ldr	r1, [pc, #264]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x160>)
 80038fe:	6849      	ldr	r1, [r1, #4]
 8003900:	0989      	lsrs	r1, r1, #6
 8003902:	4608      	mov	r0, r1
 8003904:	f04f 0100 	mov.w	r1, #0
 8003908:	f240 14ff 	movw	r4, #511	; 0x1ff
 800390c:	f04f 0500 	mov.w	r5, #0
 8003910:	ea00 0204 	and.w	r2, r0, r4
 8003914:	ea01 0305 	and.w	r3, r1, r5
 8003918:	493d      	ldr	r1, [pc, #244]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x168>)
 800391a:	fb01 f003 	mul.w	r0, r1, r3
 800391e:	2100      	movs	r1, #0
 8003920:	fb01 f102 	mul.w	r1, r1, r2
 8003924:	1844      	adds	r4, r0, r1
 8003926:	493a      	ldr	r1, [pc, #232]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x168>)
 8003928:	fba2 0101 	umull	r0, r1, r2, r1
 800392c:	1863      	adds	r3, r4, r1
 800392e:	4619      	mov	r1, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	461a      	mov	r2, r3
 8003934:	f04f 0300 	mov.w	r3, #0
 8003938:	f7fd f8a0 	bl	8000a7c <__aeabi_uldivmod>
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	4613      	mov	r3, r2
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	e04a      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003946:	4b30      	ldr	r3, [pc, #192]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x160>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	099b      	lsrs	r3, r3, #6
 800394c:	461a      	mov	r2, r3
 800394e:	f04f 0300 	mov.w	r3, #0
 8003952:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003956:	f04f 0100 	mov.w	r1, #0
 800395a:	ea02 0400 	and.w	r4, r2, r0
 800395e:	ea03 0501 	and.w	r5, r3, r1
 8003962:	4620      	mov	r0, r4
 8003964:	4629      	mov	r1, r5
 8003966:	f04f 0200 	mov.w	r2, #0
 800396a:	f04f 0300 	mov.w	r3, #0
 800396e:	014b      	lsls	r3, r1, #5
 8003970:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003974:	0142      	lsls	r2, r0, #5
 8003976:	4610      	mov	r0, r2
 8003978:	4619      	mov	r1, r3
 800397a:	1b00      	subs	r0, r0, r4
 800397c:	eb61 0105 	sbc.w	r1, r1, r5
 8003980:	f04f 0200 	mov.w	r2, #0
 8003984:	f04f 0300 	mov.w	r3, #0
 8003988:	018b      	lsls	r3, r1, #6
 800398a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800398e:	0182      	lsls	r2, r0, #6
 8003990:	1a12      	subs	r2, r2, r0
 8003992:	eb63 0301 	sbc.w	r3, r3, r1
 8003996:	f04f 0000 	mov.w	r0, #0
 800399a:	f04f 0100 	mov.w	r1, #0
 800399e:	00d9      	lsls	r1, r3, #3
 80039a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039a4:	00d0      	lsls	r0, r2, #3
 80039a6:	4602      	mov	r2, r0
 80039a8:	460b      	mov	r3, r1
 80039aa:	1912      	adds	r2, r2, r4
 80039ac:	eb45 0303 	adc.w	r3, r5, r3
 80039b0:	f04f 0000 	mov.w	r0, #0
 80039b4:	f04f 0100 	mov.w	r1, #0
 80039b8:	0299      	lsls	r1, r3, #10
 80039ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80039be:	0290      	lsls	r0, r2, #10
 80039c0:	4602      	mov	r2, r0
 80039c2:	460b      	mov	r3, r1
 80039c4:	4610      	mov	r0, r2
 80039c6:	4619      	mov	r1, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	461a      	mov	r2, r3
 80039cc:	f04f 0300 	mov.w	r3, #0
 80039d0:	f7fd f854 	bl	8000a7c <__aeabi_uldivmod>
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
 80039d8:	4613      	mov	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039dc:	4b0a      	ldr	r3, [pc, #40]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x160>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	0c1b      	lsrs	r3, r3, #16
 80039e2:	f003 0303 	and.w	r3, r3, #3
 80039e6:	3301      	adds	r3, #1
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f4:	60bb      	str	r3, [r7, #8]
      break;
 80039f6:	e002      	b.n	80039fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039f8:	4b04      	ldr	r3, [pc, #16]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x164>)
 80039fa:	60bb      	str	r3, [r7, #8]
      break;
 80039fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039fe:	68bb      	ldr	r3, [r7, #8]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bdb0      	pop	{r4, r5, r7, pc}
 8003a08:	40023800 	.word	0x40023800
 8003a0c:	00f42400 	.word	0x00f42400
 8003a10:	017d7840 	.word	0x017d7840

08003a14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a18:	4b03      	ldr	r3, [pc, #12]	; (8003a28 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	20000000 	.word	0x20000000

08003a2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a30:	f7ff fff0 	bl	8003a14 <HAL_RCC_GetHCLKFreq>
 8003a34:	4602      	mov	r2, r0
 8003a36:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	0a9b      	lsrs	r3, r3, #10
 8003a3c:	f003 0307 	and.w	r3, r3, #7
 8003a40:	4903      	ldr	r1, [pc, #12]	; (8003a50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a42:	5ccb      	ldrb	r3, [r1, r3]
 8003a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40023800 	.word	0x40023800
 8003a50:	080094b4 	.word	0x080094b4

08003a54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a58:	f7ff ffdc 	bl	8003a14 <HAL_RCC_GetHCLKFreq>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	4b05      	ldr	r3, [pc, #20]	; (8003a74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	0b5b      	lsrs	r3, r3, #13
 8003a64:	f003 0307 	and.w	r3, r3, #7
 8003a68:	4903      	ldr	r1, [pc, #12]	; (8003a78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a6a:	5ccb      	ldrb	r3, [r1, r3]
 8003a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40023800 	.word	0x40023800
 8003a78:	080094b4 	.word	0x080094b4

08003a7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e07b      	b.n	8003b86 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d108      	bne.n	8003aa8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a9e:	d009      	beq.n	8003ab4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	61da      	str	r2, [r3, #28]
 8003aa6:	e005      	b.n	8003ab4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d106      	bne.n	8003ad4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7fd fc8c 	bl	80013ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003afc:	431a      	orrs	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b06:	431a      	orrs	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	431a      	orrs	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b24:	431a      	orrs	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b38:	ea42 0103 	orr.w	r1, r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b40:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	0c1b      	lsrs	r3, r3, #16
 8003b52:	f003 0104 	and.w	r1, r3, #4
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5a:	f003 0210 	and.w	r2, r3, #16
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	69da      	ldr	r2, [r3, #28]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b74:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
	...

08003b90 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d101      	bne.n	8003bb0 <HAL_SPI_Transmit_DMA+0x20>
 8003bac:	2302      	movs	r3, #2
 8003bae:	e09b      	b.n	8003ce8 <HAL_SPI_Transmit_DMA+0x158>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d002      	beq.n	8003bca <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003bc8:	e089      	b.n	8003cde <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d002      	beq.n	8003bd6 <HAL_SPI_Transmit_DMA+0x46>
 8003bd0:	88fb      	ldrh	r3, [r7, #6]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d102      	bne.n	8003bdc <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003bda:	e080      	b.n	8003cde <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2203      	movs	r2, #3
 8003be0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	88fa      	ldrh	r2, [r7, #6]
 8003bf4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	88fa      	ldrh	r2, [r7, #6]
 8003bfa:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c22:	d10f      	bne.n	8003c44 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c32:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c42:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c48:	4a29      	ldr	r2, [pc, #164]	; (8003cf0 <HAL_SPI_Transmit_DMA+0x160>)
 8003c4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c50:	4a28      	ldr	r2, [pc, #160]	; (8003cf4 <HAL_SPI_Transmit_DMA+0x164>)
 8003c52:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c58:	4a27      	ldr	r2, [pc, #156]	; (8003cf8 <HAL_SPI_Transmit_DMA+0x168>)
 8003c5a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c60:	2200      	movs	r2, #0
 8003c62:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	330c      	adds	r3, #12
 8003c74:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c7a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003c7c:	f7fe fdf2 	bl	8002864 <HAL_DMA_Start_IT>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00c      	beq.n	8003ca0 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c8a:	f043 0210 	orr.w	r2, r3, #16
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003c9e:	e01e      	b.n	8003cde <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003caa:	2b40      	cmp	r3, #64	; 0x40
 8003cac:	d007      	beq.n	8003cbe <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cbc:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f042 0220 	orr.w	r2, r2, #32
 8003ccc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685a      	ldr	r2, [r3, #4]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f042 0202 	orr.w	r2, r2, #2
 8003cdc:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3718      	adds	r7, #24
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	080044c1 	.word	0x080044c1
 8003cf4:	080042e1 	.word	0x080042e1
 8003cf8:	08004515 	.word	0x08004515

08003cfc <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	4613      	mov	r3, r2
 8003d08:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d110      	bne.n	8003d38 <HAL_SPI_Receive_DMA+0x3c>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d1e:	d10b      	bne.n	8003d38 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2204      	movs	r2, #4
 8003d24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8003d28:	88fb      	ldrh	r3, [r7, #6]
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	68b9      	ldr	r1, [r7, #8]
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f000 f8ac 	bl	8003e8c <HAL_SPI_TransmitReceive_DMA>
 8003d34:	4603      	mov	r3, r0
 8003d36:	e09f      	b.n	8003e78 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d101      	bne.n	8003d46 <HAL_SPI_Receive_DMA+0x4a>
 8003d42:	2302      	movs	r3, #2
 8003d44:	e098      	b.n	8003e78 <HAL_SPI_Receive_DMA+0x17c>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d002      	beq.n	8003d60 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d5e:	e086      	b.n	8003e6e <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d002      	beq.n	8003d6c <HAL_SPI_Receive_DMA+0x70>
 8003d66:	88fb      	ldrh	r3, [r7, #6]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d102      	bne.n	8003d72 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d70:	e07d      	b.n	8003e6e <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2204      	movs	r2, #4
 8003d76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	88fa      	ldrh	r2, [r7, #6]
 8003d8a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	88fa      	ldrh	r2, [r7, #6]
 8003d90:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003db2:	d10f      	bne.n	8003dd4 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dc2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003dd2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd8:	4a29      	ldr	r2, [pc, #164]	; (8003e80 <HAL_SPI_Receive_DMA+0x184>)
 8003dda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de0:	4a28      	ldr	r2, [pc, #160]	; (8003e84 <HAL_SPI_Receive_DMA+0x188>)
 8003de2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de8:	4a27      	ldr	r2, [pc, #156]	; (8003e88 <HAL_SPI_Receive_DMA+0x18c>)
 8003dea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003df0:	2200      	movs	r2, #0
 8003df2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	330c      	adds	r3, #12
 8003dfe:	4619      	mov	r1, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e04:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e0a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003e0c:	f7fe fd2a 	bl	8002864 <HAL_DMA_Start_IT>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00c      	beq.n	8003e30 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e1a:	f043 0210 	orr.w	r2, r3, #16
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003e2e:	e01e      	b.n	8003e6e <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3a:	2b40      	cmp	r3, #64	; 0x40
 8003e3c:	d007      	beq.n	8003e4e <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e4c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f042 0220 	orr.w	r2, r2, #32
 8003e5c:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	685a      	ldr	r2, [r3, #4]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f042 0201 	orr.w	r2, r2, #1
 8003e6c:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3718      	adds	r7, #24
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	080044dd 	.word	0x080044dd
 8003e84:	08004389 	.word	0x08004389
 8003e88:	08004515 	.word	0x08004515

08003e8c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
 8003e98:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d101      	bne.n	8003eac <HAL_SPI_TransmitReceive_DMA+0x20>
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	e0e3      	b.n	8004074 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003eba:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003ec2:	7dbb      	ldrb	r3, [r7, #22]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d00d      	beq.n	8003ee4 <HAL_SPI_TransmitReceive_DMA+0x58>
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ece:	d106      	bne.n	8003ede <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d102      	bne.n	8003ede <HAL_SPI_TransmitReceive_DMA+0x52>
 8003ed8:	7dbb      	ldrb	r3, [r7, #22]
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d002      	beq.n	8003ee4 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8003ede:	2302      	movs	r3, #2
 8003ee0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ee2:	e0c2      	b.n	800406a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d005      	beq.n	8003ef6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d002      	beq.n	8003ef6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003ef0:	887b      	ldrh	r3, [r7, #2]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d102      	bne.n	8003efc <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003efa:	e0b6      	b.n	800406a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b04      	cmp	r3, #4
 8003f06:	d003      	beq.n	8003f10 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2205      	movs	r2, #5
 8003f0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	68ba      	ldr	r2, [r7, #8]
 8003f1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	887a      	ldrh	r2, [r7, #2]
 8003f20:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	887a      	ldrh	r2, [r7, #2]
 8003f26:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	887a      	ldrh	r2, [r7, #2]
 8003f32:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	887a      	ldrh	r2, [r7, #2]
 8003f38:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b04      	cmp	r3, #4
 8003f50:	d108      	bne.n	8003f64 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f56:	4a49      	ldr	r2, [pc, #292]	; (800407c <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8003f58:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f5e:	4a48      	ldr	r2, [pc, #288]	; (8004080 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8003f60:	63da      	str	r2, [r3, #60]	; 0x3c
 8003f62:	e007      	b.n	8003f74 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f68:	4a46      	ldr	r2, [pc, #280]	; (8004084 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8003f6a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f70:	4a45      	ldr	r2, [pc, #276]	; (8004088 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8003f72:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f78:	4a44      	ldr	r2, [pc, #272]	; (800408c <HAL_SPI_TransmitReceive_DMA+0x200>)
 8003f7a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f80:	2200      	movs	r2, #0
 8003f82:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	330c      	adds	r3, #12
 8003f8e:	4619      	mov	r1, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f94:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f9a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003f9c:	f7fe fc62 	bl	8002864 <HAL_DMA_Start_IT>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00c      	beq.n	8003fc0 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003faa:	f043 0210 	orr.w	r2, r3, #16
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003fbe:	e054      	b.n	800406a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 0201 	orr.w	r2, r2, #1
 8003fce:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fdc:	2200      	movs	r2, #0
 8003fde:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fec:	2200      	movs	r2, #0
 8003fee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	330c      	adds	r3, #12
 8004000:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004006:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004008:	f7fe fc2c 	bl	8002864 <HAL_DMA_Start_IT>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00c      	beq.n	800402c <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004016:	f043 0210 	orr.w	r2, r3, #16
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800402a:	e01e      	b.n	800406a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004036:	2b40      	cmp	r3, #64	; 0x40
 8004038:	d007      	beq.n	800404a <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004048:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f042 0220 	orr.w	r2, r2, #32
 8004058:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f042 0202 	orr.w	r2, r2, #2
 8004068:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004072:	7dfb      	ldrb	r3, [r7, #23]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3718      	adds	r7, #24
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	080044dd 	.word	0x080044dd
 8004080:	08004389 	.word	0x08004389
 8004084:	080044f9 	.word	0x080044f9
 8004088:	08004431 	.word	0x08004431
 800408c:	08004515 	.word	0x08004515

08004090 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b088      	sub	sp, #32
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	099b      	lsrs	r3, r3, #6
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10f      	bne.n	80040d4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00a      	beq.n	80040d4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	099b      	lsrs	r3, r3, #6
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d004      	beq.n	80040d4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	4798      	blx	r3
    return;
 80040d2:	e0d7      	b.n	8004284 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	085b      	lsrs	r3, r3, #1
 80040d8:	f003 0301 	and.w	r3, r3, #1
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00a      	beq.n	80040f6 <HAL_SPI_IRQHandler+0x66>
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	09db      	lsrs	r3, r3, #7
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d004      	beq.n	80040f6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	4798      	blx	r3
    return;
 80040f4:	e0c6      	b.n	8004284 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	095b      	lsrs	r3, r3, #5
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10c      	bne.n	800411c <HAL_SPI_IRQHandler+0x8c>
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	099b      	lsrs	r3, r3, #6
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b00      	cmp	r3, #0
 800410c:	d106      	bne.n	800411c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	0a1b      	lsrs	r3, r3, #8
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 80b4 	beq.w	8004284 <HAL_SPI_IRQHandler+0x1f4>
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	095b      	lsrs	r3, r3, #5
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 80ad 	beq.w	8004284 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	099b      	lsrs	r3, r3, #6
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d023      	beq.n	800417e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b03      	cmp	r3, #3
 8004140:	d011      	beq.n	8004166 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004146:	f043 0204 	orr.w	r2, r3, #4
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800414e:	2300      	movs	r3, #0
 8004150:	617b      	str	r3, [r7, #20]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	617b      	str	r3, [r7, #20]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	617b      	str	r3, [r7, #20]
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	e00b      	b.n	800417e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004166:	2300      	movs	r3, #0
 8004168:	613b      	str	r3, [r7, #16]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	613b      	str	r3, [r7, #16]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	613b      	str	r3, [r7, #16]
 800417a:	693b      	ldr	r3, [r7, #16]
        return;
 800417c:	e082      	b.n	8004284 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	095b      	lsrs	r3, r3, #5
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b00      	cmp	r3, #0
 8004188:	d014      	beq.n	80041b4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418e:	f043 0201 	orr.w	r2, r3, #1
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004196:	2300      	movs	r3, #0
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041b0:	601a      	str	r2, [r3, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	0a1b      	lsrs	r3, r3, #8
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00c      	beq.n	80041da <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c4:	f043 0208 	orr.w	r2, r3, #8
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80041cc:	2300      	movs	r3, #0
 80041ce:	60bb      	str	r3, [r7, #8]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	60bb      	str	r3, [r7, #8]
 80041d8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d04f      	beq.n	8004282 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041f0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	f003 0302 	and.w	r3, r3, #2
 8004200:	2b00      	cmp	r3, #0
 8004202:	d104      	bne.n	800420e <HAL_SPI_IRQHandler+0x17e>
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b00      	cmp	r3, #0
 800420c:	d034      	beq.n	8004278 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	685a      	ldr	r2, [r3, #4]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f022 0203 	bic.w	r2, r2, #3
 800421c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004222:	2b00      	cmp	r3, #0
 8004224:	d011      	beq.n	800424a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800422a:	4a18      	ldr	r2, [pc, #96]	; (800428c <HAL_SPI_IRQHandler+0x1fc>)
 800422c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004232:	4618      	mov	r0, r3
 8004234:	f7fe fb6e 	bl	8002914 <HAL_DMA_Abort_IT>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d005      	beq.n	800424a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004242:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800424e:	2b00      	cmp	r3, #0
 8004250:	d016      	beq.n	8004280 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004256:	4a0d      	ldr	r2, [pc, #52]	; (800428c <HAL_SPI_IRQHandler+0x1fc>)
 8004258:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800425e:	4618      	mov	r0, r3
 8004260:	f7fe fb58 	bl	8002914 <HAL_DMA_Abort_IT>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004276:	e003      	b.n	8004280 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 f827 	bl	80042cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800427e:	e000      	b.n	8004282 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004280:	bf00      	nop
    return;
 8004282:	bf00      	nop
  }
}
 8004284:	3720      	adds	r7, #32
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	08004555 	.word	0x08004555

08004290 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ec:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042ee:	f7fe f8c9 	bl	8002484 <HAL_GetTick>
 80042f2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004302:	d03b      	beq.n	800437c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 0220 	bic.w	r2, r2, #32
 8004312:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 0202 	bic.w	r2, r2, #2
 8004322:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	2164      	movs	r1, #100	; 0x64
 8004328:	6978      	ldr	r0, [r7, #20]
 800432a:	f000 fa15 	bl	8004758 <SPI_EndRxTxTransaction>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d005      	beq.n	8004340 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004338:	f043 0220 	orr.w	r2, r3, #32
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10a      	bne.n	800435e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004348:	2300      	movs	r3, #0
 800434a:	60fb      	str	r3, [r7, #12]
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	60fb      	str	r3, [r7, #12]
 800435c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	2200      	movs	r2, #0
 8004362:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004370:	2b00      	cmp	r3, #0
 8004372:	d003      	beq.n	800437c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004374:	6978      	ldr	r0, [r7, #20]
 8004376:	f7ff ffa9 	bl	80042cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800437a:	e002      	b.n	8004382 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800437c:	6978      	ldr	r0, [r7, #20]
 800437e:	f7fd ffaf 	bl	80022e0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004382:	3718      	adds	r7, #24
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004394:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004396:	f7fe f875 	bl	8002484 <HAL_GetTick>
 800439a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043aa:	d03b      	beq.n	8004424 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 0220 	bic.w	r2, r2, #32
 80043ba:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10d      	bne.n	80043e0 <SPI_DMAReceiveCplt+0x58>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043cc:	d108      	bne.n	80043e0 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f022 0203 	bic.w	r2, r2, #3
 80043dc:	605a      	str	r2, [r3, #4]
 80043de:	e007      	b.n	80043f0 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f022 0201 	bic.w	r2, r2, #1
 80043ee:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	2164      	movs	r1, #100	; 0x64
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f000 f949 	bl	800468c <SPI_EndRxTransaction>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d002      	beq.n	8004406 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2220      	movs	r2, #32
 8004404:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004418:	2b00      	cmp	r3, #0
 800441a:	d003      	beq.n	8004424 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f7ff ff55 	bl	80042cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004422:	e002      	b.n	800442a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f7fd ff71 	bl	800230c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800443e:	f7fe f821 	bl	8002484 <HAL_GetTick>
 8004442:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800444e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004452:	d02f      	beq.n	80044b4 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f022 0220 	bic.w	r2, r2, #32
 8004462:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	2164      	movs	r1, #100	; 0x64
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 f975 	bl	8004758 <SPI_EndRxTxTransaction>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d005      	beq.n	8004480 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004478:	f043 0220 	orr.w	r2, r3, #32
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0203 	bic.w	r2, r2, #3
 800448e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f7ff ff0d 	bl	80042cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80044b2:	e002      	b.n	80044ba <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f7fd ff3f 	bl	8002338 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044cc:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f7ff fede 	bl	8004290 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80044d4:	bf00      	nop
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f7ff feda 	bl	80042a4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80044f0:	bf00      	nop
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004504:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f7ff fed6 	bl	80042b8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800450c:	bf00      	nop
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004520:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 0203 	bic.w	r2, r2, #3
 8004530:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004536:	f043 0210 	orr.w	r2, r3, #16
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f7ff fec0 	bl	80042cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800454c:	bf00      	nop
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004560:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f7ff feac 	bl	80042cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004574:	bf00      	nop
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b088      	sub	sp, #32
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	603b      	str	r3, [r7, #0]
 8004588:	4613      	mov	r3, r2
 800458a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800458c:	f7fd ff7a 	bl	8002484 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004594:	1a9b      	subs	r3, r3, r2
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	4413      	add	r3, r2
 800459a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800459c:	f7fd ff72 	bl	8002484 <HAL_GetTick>
 80045a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80045a2:	4b39      	ldr	r3, [pc, #228]	; (8004688 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	015b      	lsls	r3, r3, #5
 80045a8:	0d1b      	lsrs	r3, r3, #20
 80045aa:	69fa      	ldr	r2, [r7, #28]
 80045ac:	fb02 f303 	mul.w	r3, r2, r3
 80045b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045b2:	e054      	b.n	800465e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ba:	d050      	beq.n	800465e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045bc:	f7fd ff62 	bl	8002484 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	69fa      	ldr	r2, [r7, #28]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d902      	bls.n	80045d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d13d      	bne.n	800464e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	685a      	ldr	r2, [r3, #4]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045ea:	d111      	bne.n	8004610 <SPI_WaitFlagStateUntilTimeout+0x94>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045f4:	d004      	beq.n	8004600 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045fe:	d107      	bne.n	8004610 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800460e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004614:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004618:	d10f      	bne.n	800463a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004628:	601a      	str	r2, [r3, #0]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004638:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e017      	b.n	800467e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d101      	bne.n	8004658 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004654:	2300      	movs	r3, #0
 8004656:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	3b01      	subs	r3, #1
 800465c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	4013      	ands	r3, r2
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	429a      	cmp	r2, r3
 800466c:	bf0c      	ite	eq
 800466e:	2301      	moveq	r3, #1
 8004670:	2300      	movne	r3, #0
 8004672:	b2db      	uxtb	r3, r3
 8004674:	461a      	mov	r2, r3
 8004676:	79fb      	ldrb	r3, [r7, #7]
 8004678:	429a      	cmp	r2, r3
 800467a:	d19b      	bne.n	80045b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3720      	adds	r7, #32
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	20000000 	.word	0x20000000

0800468c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af02      	add	r7, sp, #8
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046a0:	d111      	bne.n	80046c6 <SPI_EndRxTransaction+0x3a>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046aa:	d004      	beq.n	80046b6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046b4:	d107      	bne.n	80046c6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046c4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046ce:	d12a      	bne.n	8004726 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046d8:	d012      	beq.n	8004700 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	9300      	str	r3, [sp, #0]
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	2200      	movs	r2, #0
 80046e2:	2180      	movs	r1, #128	; 0x80
 80046e4:	68f8      	ldr	r0, [r7, #12]
 80046e6:	f7ff ff49 	bl	800457c <SPI_WaitFlagStateUntilTimeout>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d02d      	beq.n	800474c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f4:	f043 0220 	orr.w	r2, r3, #32
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e026      	b.n	800474e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	9300      	str	r3, [sp, #0]
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	2200      	movs	r2, #0
 8004708:	2101      	movs	r1, #1
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f7ff ff36 	bl	800457c <SPI_WaitFlagStateUntilTimeout>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d01a      	beq.n	800474c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800471a:	f043 0220 	orr.w	r2, r3, #32
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e013      	b.n	800474e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	9300      	str	r3, [sp, #0]
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	2200      	movs	r2, #0
 800472e:	2101      	movs	r1, #1
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f7ff ff23 	bl	800457c <SPI_WaitFlagStateUntilTimeout>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d007      	beq.n	800474c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004740:	f043 0220 	orr.w	r2, r3, #32
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e000      	b.n	800474e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
	...

08004758 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b088      	sub	sp, #32
 800475c:	af02      	add	r7, sp, #8
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004764:	4b1b      	ldr	r3, [pc, #108]	; (80047d4 <SPI_EndRxTxTransaction+0x7c>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a1b      	ldr	r2, [pc, #108]	; (80047d8 <SPI_EndRxTxTransaction+0x80>)
 800476a:	fba2 2303 	umull	r2, r3, r2, r3
 800476e:	0d5b      	lsrs	r3, r3, #21
 8004770:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004774:	fb02 f303 	mul.w	r3, r2, r3
 8004778:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004782:	d112      	bne.n	80047aa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	9300      	str	r3, [sp, #0]
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	2200      	movs	r2, #0
 800478c:	2180      	movs	r1, #128	; 0x80
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f7ff fef4 	bl	800457c <SPI_WaitFlagStateUntilTimeout>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d016      	beq.n	80047c8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800479e:	f043 0220 	orr.w	r2, r3, #32
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e00f      	b.n	80047ca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00a      	beq.n	80047c6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	3b01      	subs	r3, #1
 80047b4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047c0:	2b80      	cmp	r3, #128	; 0x80
 80047c2:	d0f2      	beq.n	80047aa <SPI_EndRxTxTransaction+0x52>
 80047c4:	e000      	b.n	80047c8 <SPI_EndRxTxTransaction+0x70>
        break;
 80047c6:	bf00      	nop
  }

  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3718      	adds	r7, #24
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	20000000 	.word	0x20000000
 80047d8:	165e9f81 	.word	0x165e9f81

080047dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e03f      	b.n	800486e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d106      	bne.n	8004808 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7fc fea8 	bl	8001558 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2224      	movs	r2, #36	; 0x24
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68da      	ldr	r2, [r3, #12]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800481e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 f929 	bl	8004a78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	691a      	ldr	r2, [r3, #16]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004834:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	695a      	ldr	r2, [r3, #20]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004844:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68da      	ldr	r2, [r3, #12]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004854:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2220      	movs	r2, #32
 8004860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2220      	movs	r2, #32
 8004868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b08a      	sub	sp, #40	; 0x28
 800487a:	af02      	add	r7, sp, #8
 800487c:	60f8      	str	r0, [r7, #12]
 800487e:	60b9      	str	r1, [r7, #8]
 8004880:	603b      	str	r3, [r7, #0]
 8004882:	4613      	mov	r3, r2
 8004884:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004886:	2300      	movs	r3, #0
 8004888:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b20      	cmp	r3, #32
 8004894:	d17c      	bne.n	8004990 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d002      	beq.n	80048a2 <HAL_UART_Transmit+0x2c>
 800489c:	88fb      	ldrh	r3, [r7, #6]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e075      	b.n	8004992 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d101      	bne.n	80048b4 <HAL_UART_Transmit+0x3e>
 80048b0:	2302      	movs	r3, #2
 80048b2:	e06e      	b.n	8004992 <HAL_UART_Transmit+0x11c>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2221      	movs	r2, #33	; 0x21
 80048c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048ca:	f7fd fddb 	bl	8002484 <HAL_GetTick>
 80048ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	88fa      	ldrh	r2, [r7, #6]
 80048d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	88fa      	ldrh	r2, [r7, #6]
 80048da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048e4:	d108      	bne.n	80048f8 <HAL_UART_Transmit+0x82>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d104      	bne.n	80048f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80048ee:	2300      	movs	r3, #0
 80048f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	61bb      	str	r3, [r7, #24]
 80048f6:	e003      	b.n	8004900 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048fc:	2300      	movs	r3, #0
 80048fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004908:	e02a      	b.n	8004960 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	2200      	movs	r2, #0
 8004912:	2180      	movs	r1, #128	; 0x80
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f000 f840 	bl	800499a <UART_WaitOnFlagUntilTimeout>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d001      	beq.n	8004924 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e036      	b.n	8004992 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10b      	bne.n	8004942 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	881b      	ldrh	r3, [r3, #0]
 800492e:	461a      	mov	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004938:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	3302      	adds	r3, #2
 800493e:	61bb      	str	r3, [r7, #24]
 8004940:	e007      	b.n	8004952 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	781a      	ldrb	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	3301      	adds	r3, #1
 8004950:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004956:	b29b      	uxth	r3, r3
 8004958:	3b01      	subs	r3, #1
 800495a:	b29a      	uxth	r2, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004964:	b29b      	uxth	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1cf      	bne.n	800490a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	9300      	str	r3, [sp, #0]
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	2200      	movs	r2, #0
 8004972:	2140      	movs	r1, #64	; 0x40
 8004974:	68f8      	ldr	r0, [r7, #12]
 8004976:	f000 f810 	bl	800499a <UART_WaitOnFlagUntilTimeout>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d001      	beq.n	8004984 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e006      	b.n	8004992 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2220      	movs	r2, #32
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800498c:	2300      	movs	r3, #0
 800498e:	e000      	b.n	8004992 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004990:	2302      	movs	r3, #2
  }
}
 8004992:	4618      	mov	r0, r3
 8004994:	3720      	adds	r7, #32
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b090      	sub	sp, #64	; 0x40
 800499e:	af00      	add	r7, sp, #0
 80049a0:	60f8      	str	r0, [r7, #12]
 80049a2:	60b9      	str	r1, [r7, #8]
 80049a4:	603b      	str	r3, [r7, #0]
 80049a6:	4613      	mov	r3, r2
 80049a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049aa:	e050      	b.n	8004a4e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b2:	d04c      	beq.n	8004a4e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80049b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d007      	beq.n	80049ca <UART_WaitOnFlagUntilTimeout+0x30>
 80049ba:	f7fd fd63 	bl	8002484 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d241      	bcs.n	8004a4e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	330c      	adds	r3, #12
 80049d0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d4:	e853 3f00 	ldrex	r3, [r3]
 80049d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	330c      	adds	r3, #12
 80049e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049ea:	637a      	str	r2, [r7, #52]	; 0x34
 80049ec:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049f2:	e841 2300 	strex	r3, r2, [r1]
 80049f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80049f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1e5      	bne.n	80049ca <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	3314      	adds	r3, #20
 8004a04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	e853 3f00 	ldrex	r3, [r3]
 8004a0c:	613b      	str	r3, [r7, #16]
   return(result);
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	f023 0301 	bic.w	r3, r3, #1
 8004a14:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	3314      	adds	r3, #20
 8004a1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a1e:	623a      	str	r2, [r7, #32]
 8004a20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a22:	69f9      	ldr	r1, [r7, #28]
 8004a24:	6a3a      	ldr	r2, [r7, #32]
 8004a26:	e841 2300 	strex	r3, r2, [r1]
 8004a2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1e5      	bne.n	80049fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2220      	movs	r2, #32
 8004a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e00f      	b.n	8004a6e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	4013      	ands	r3, r2
 8004a58:	68ba      	ldr	r2, [r7, #8]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	bf0c      	ite	eq
 8004a5e:	2301      	moveq	r3, #1
 8004a60:	2300      	movne	r3, #0
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	461a      	mov	r2, r3
 8004a66:	79fb      	ldrb	r3, [r7, #7]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d09f      	beq.n	80049ac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3740      	adds	r7, #64	; 0x40
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
	...

08004a78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a7c:	b09f      	sub	sp, #124	; 0x7c
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a8e:	68d9      	ldr	r1, [r3, #12]
 8004a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	ea40 0301 	orr.w	r3, r0, r1
 8004a98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a9c:	689a      	ldr	r2, [r3, #8]
 8004a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aa6:	695b      	ldr	r3, [r3, #20]
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aac:	69db      	ldr	r3, [r3, #28]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004abc:	f021 010c 	bic.w	r1, r1, #12
 8004ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ac6:	430b      	orrs	r3, r1
 8004ac8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ad6:	6999      	ldr	r1, [r3, #24]
 8004ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	ea40 0301 	orr.w	r3, r0, r1
 8004ae0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	4bc5      	ldr	r3, [pc, #788]	; (8004dfc <UART_SetConfig+0x384>)
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d004      	beq.n	8004af6 <UART_SetConfig+0x7e>
 8004aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	4bc3      	ldr	r3, [pc, #780]	; (8004e00 <UART_SetConfig+0x388>)
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d103      	bne.n	8004afe <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004af6:	f7fe ffad 	bl	8003a54 <HAL_RCC_GetPCLK2Freq>
 8004afa:	6778      	str	r0, [r7, #116]	; 0x74
 8004afc:	e002      	b.n	8004b04 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004afe:	f7fe ff95 	bl	8003a2c <HAL_RCC_GetPCLK1Freq>
 8004b02:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b06:	69db      	ldr	r3, [r3, #28]
 8004b08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b0c:	f040 80b6 	bne.w	8004c7c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b12:	461c      	mov	r4, r3
 8004b14:	f04f 0500 	mov.w	r5, #0
 8004b18:	4622      	mov	r2, r4
 8004b1a:	462b      	mov	r3, r5
 8004b1c:	1891      	adds	r1, r2, r2
 8004b1e:	6439      	str	r1, [r7, #64]	; 0x40
 8004b20:	415b      	adcs	r3, r3
 8004b22:	647b      	str	r3, [r7, #68]	; 0x44
 8004b24:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b28:	1912      	adds	r2, r2, r4
 8004b2a:	eb45 0303 	adc.w	r3, r5, r3
 8004b2e:	f04f 0000 	mov.w	r0, #0
 8004b32:	f04f 0100 	mov.w	r1, #0
 8004b36:	00d9      	lsls	r1, r3, #3
 8004b38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b3c:	00d0      	lsls	r0, r2, #3
 8004b3e:	4602      	mov	r2, r0
 8004b40:	460b      	mov	r3, r1
 8004b42:	1911      	adds	r1, r2, r4
 8004b44:	6639      	str	r1, [r7, #96]	; 0x60
 8004b46:	416b      	adcs	r3, r5
 8004b48:	667b      	str	r3, [r7, #100]	; 0x64
 8004b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	461a      	mov	r2, r3
 8004b50:	f04f 0300 	mov.w	r3, #0
 8004b54:	1891      	adds	r1, r2, r2
 8004b56:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b58:	415b      	adcs	r3, r3
 8004b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b60:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004b64:	f7fb ff8a 	bl	8000a7c <__aeabi_uldivmod>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	4ba5      	ldr	r3, [pc, #660]	; (8004e04 <UART_SetConfig+0x38c>)
 8004b6e:	fba3 2302 	umull	r2, r3, r3, r2
 8004b72:	095b      	lsrs	r3, r3, #5
 8004b74:	011e      	lsls	r6, r3, #4
 8004b76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b78:	461c      	mov	r4, r3
 8004b7a:	f04f 0500 	mov.w	r5, #0
 8004b7e:	4622      	mov	r2, r4
 8004b80:	462b      	mov	r3, r5
 8004b82:	1891      	adds	r1, r2, r2
 8004b84:	6339      	str	r1, [r7, #48]	; 0x30
 8004b86:	415b      	adcs	r3, r3
 8004b88:	637b      	str	r3, [r7, #52]	; 0x34
 8004b8a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004b8e:	1912      	adds	r2, r2, r4
 8004b90:	eb45 0303 	adc.w	r3, r5, r3
 8004b94:	f04f 0000 	mov.w	r0, #0
 8004b98:	f04f 0100 	mov.w	r1, #0
 8004b9c:	00d9      	lsls	r1, r3, #3
 8004b9e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ba2:	00d0      	lsls	r0, r2, #3
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	1911      	adds	r1, r2, r4
 8004baa:	65b9      	str	r1, [r7, #88]	; 0x58
 8004bac:	416b      	adcs	r3, r5
 8004bae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	f04f 0300 	mov.w	r3, #0
 8004bba:	1891      	adds	r1, r2, r2
 8004bbc:	62b9      	str	r1, [r7, #40]	; 0x28
 8004bbe:	415b      	adcs	r3, r3
 8004bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004bc6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004bca:	f7fb ff57 	bl	8000a7c <__aeabi_uldivmod>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	4b8c      	ldr	r3, [pc, #560]	; (8004e04 <UART_SetConfig+0x38c>)
 8004bd4:	fba3 1302 	umull	r1, r3, r3, r2
 8004bd8:	095b      	lsrs	r3, r3, #5
 8004bda:	2164      	movs	r1, #100	; 0x64
 8004bdc:	fb01 f303 	mul.w	r3, r1, r3
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	00db      	lsls	r3, r3, #3
 8004be4:	3332      	adds	r3, #50	; 0x32
 8004be6:	4a87      	ldr	r2, [pc, #540]	; (8004e04 <UART_SetConfig+0x38c>)
 8004be8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bec:	095b      	lsrs	r3, r3, #5
 8004bee:	005b      	lsls	r3, r3, #1
 8004bf0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004bf4:	441e      	add	r6, r3
 8004bf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f04f 0100 	mov.w	r1, #0
 8004bfe:	4602      	mov	r2, r0
 8004c00:	460b      	mov	r3, r1
 8004c02:	1894      	adds	r4, r2, r2
 8004c04:	623c      	str	r4, [r7, #32]
 8004c06:	415b      	adcs	r3, r3
 8004c08:	627b      	str	r3, [r7, #36]	; 0x24
 8004c0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c0e:	1812      	adds	r2, r2, r0
 8004c10:	eb41 0303 	adc.w	r3, r1, r3
 8004c14:	f04f 0400 	mov.w	r4, #0
 8004c18:	f04f 0500 	mov.w	r5, #0
 8004c1c:	00dd      	lsls	r5, r3, #3
 8004c1e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004c22:	00d4      	lsls	r4, r2, #3
 8004c24:	4622      	mov	r2, r4
 8004c26:	462b      	mov	r3, r5
 8004c28:	1814      	adds	r4, r2, r0
 8004c2a:	653c      	str	r4, [r7, #80]	; 0x50
 8004c2c:	414b      	adcs	r3, r1
 8004c2e:	657b      	str	r3, [r7, #84]	; 0x54
 8004c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	461a      	mov	r2, r3
 8004c36:	f04f 0300 	mov.w	r3, #0
 8004c3a:	1891      	adds	r1, r2, r2
 8004c3c:	61b9      	str	r1, [r7, #24]
 8004c3e:	415b      	adcs	r3, r3
 8004c40:	61fb      	str	r3, [r7, #28]
 8004c42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c46:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004c4a:	f7fb ff17 	bl	8000a7c <__aeabi_uldivmod>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	460b      	mov	r3, r1
 8004c52:	4b6c      	ldr	r3, [pc, #432]	; (8004e04 <UART_SetConfig+0x38c>)
 8004c54:	fba3 1302 	umull	r1, r3, r3, r2
 8004c58:	095b      	lsrs	r3, r3, #5
 8004c5a:	2164      	movs	r1, #100	; 0x64
 8004c5c:	fb01 f303 	mul.w	r3, r1, r3
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	00db      	lsls	r3, r3, #3
 8004c64:	3332      	adds	r3, #50	; 0x32
 8004c66:	4a67      	ldr	r2, [pc, #412]	; (8004e04 <UART_SetConfig+0x38c>)
 8004c68:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6c:	095b      	lsrs	r3, r3, #5
 8004c6e:	f003 0207 	and.w	r2, r3, #7
 8004c72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4432      	add	r2, r6
 8004c78:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c7a:	e0b9      	b.n	8004df0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c7e:	461c      	mov	r4, r3
 8004c80:	f04f 0500 	mov.w	r5, #0
 8004c84:	4622      	mov	r2, r4
 8004c86:	462b      	mov	r3, r5
 8004c88:	1891      	adds	r1, r2, r2
 8004c8a:	6139      	str	r1, [r7, #16]
 8004c8c:	415b      	adcs	r3, r3
 8004c8e:	617b      	str	r3, [r7, #20]
 8004c90:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004c94:	1912      	adds	r2, r2, r4
 8004c96:	eb45 0303 	adc.w	r3, r5, r3
 8004c9a:	f04f 0000 	mov.w	r0, #0
 8004c9e:	f04f 0100 	mov.w	r1, #0
 8004ca2:	00d9      	lsls	r1, r3, #3
 8004ca4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ca8:	00d0      	lsls	r0, r2, #3
 8004caa:	4602      	mov	r2, r0
 8004cac:	460b      	mov	r3, r1
 8004cae:	eb12 0804 	adds.w	r8, r2, r4
 8004cb2:	eb43 0905 	adc.w	r9, r3, r5
 8004cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f04f 0100 	mov.w	r1, #0
 8004cc0:	f04f 0200 	mov.w	r2, #0
 8004cc4:	f04f 0300 	mov.w	r3, #0
 8004cc8:	008b      	lsls	r3, r1, #2
 8004cca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004cce:	0082      	lsls	r2, r0, #2
 8004cd0:	4640      	mov	r0, r8
 8004cd2:	4649      	mov	r1, r9
 8004cd4:	f7fb fed2 	bl	8000a7c <__aeabi_uldivmod>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	460b      	mov	r3, r1
 8004cdc:	4b49      	ldr	r3, [pc, #292]	; (8004e04 <UART_SetConfig+0x38c>)
 8004cde:	fba3 2302 	umull	r2, r3, r3, r2
 8004ce2:	095b      	lsrs	r3, r3, #5
 8004ce4:	011e      	lsls	r6, r3, #4
 8004ce6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f04f 0100 	mov.w	r1, #0
 8004cee:	4602      	mov	r2, r0
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	1894      	adds	r4, r2, r2
 8004cf4:	60bc      	str	r4, [r7, #8]
 8004cf6:	415b      	adcs	r3, r3
 8004cf8:	60fb      	str	r3, [r7, #12]
 8004cfa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cfe:	1812      	adds	r2, r2, r0
 8004d00:	eb41 0303 	adc.w	r3, r1, r3
 8004d04:	f04f 0400 	mov.w	r4, #0
 8004d08:	f04f 0500 	mov.w	r5, #0
 8004d0c:	00dd      	lsls	r5, r3, #3
 8004d0e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d12:	00d4      	lsls	r4, r2, #3
 8004d14:	4622      	mov	r2, r4
 8004d16:	462b      	mov	r3, r5
 8004d18:	1814      	adds	r4, r2, r0
 8004d1a:	64bc      	str	r4, [r7, #72]	; 0x48
 8004d1c:	414b      	adcs	r3, r1
 8004d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	4618      	mov	r0, r3
 8004d26:	f04f 0100 	mov.w	r1, #0
 8004d2a:	f04f 0200 	mov.w	r2, #0
 8004d2e:	f04f 0300 	mov.w	r3, #0
 8004d32:	008b      	lsls	r3, r1, #2
 8004d34:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004d38:	0082      	lsls	r2, r0, #2
 8004d3a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004d3e:	f7fb fe9d 	bl	8000a7c <__aeabi_uldivmod>
 8004d42:	4602      	mov	r2, r0
 8004d44:	460b      	mov	r3, r1
 8004d46:	4b2f      	ldr	r3, [pc, #188]	; (8004e04 <UART_SetConfig+0x38c>)
 8004d48:	fba3 1302 	umull	r1, r3, r3, r2
 8004d4c:	095b      	lsrs	r3, r3, #5
 8004d4e:	2164      	movs	r1, #100	; 0x64
 8004d50:	fb01 f303 	mul.w	r3, r1, r3
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	011b      	lsls	r3, r3, #4
 8004d58:	3332      	adds	r3, #50	; 0x32
 8004d5a:	4a2a      	ldr	r2, [pc, #168]	; (8004e04 <UART_SetConfig+0x38c>)
 8004d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d60:	095b      	lsrs	r3, r3, #5
 8004d62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d66:	441e      	add	r6, r3
 8004d68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f04f 0100 	mov.w	r1, #0
 8004d70:	4602      	mov	r2, r0
 8004d72:	460b      	mov	r3, r1
 8004d74:	1894      	adds	r4, r2, r2
 8004d76:	603c      	str	r4, [r7, #0]
 8004d78:	415b      	adcs	r3, r3
 8004d7a:	607b      	str	r3, [r7, #4]
 8004d7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d80:	1812      	adds	r2, r2, r0
 8004d82:	eb41 0303 	adc.w	r3, r1, r3
 8004d86:	f04f 0400 	mov.w	r4, #0
 8004d8a:	f04f 0500 	mov.w	r5, #0
 8004d8e:	00dd      	lsls	r5, r3, #3
 8004d90:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d94:	00d4      	lsls	r4, r2, #3
 8004d96:	4622      	mov	r2, r4
 8004d98:	462b      	mov	r3, r5
 8004d9a:	eb12 0a00 	adds.w	sl, r2, r0
 8004d9e:	eb43 0b01 	adc.w	fp, r3, r1
 8004da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f04f 0100 	mov.w	r1, #0
 8004dac:	f04f 0200 	mov.w	r2, #0
 8004db0:	f04f 0300 	mov.w	r3, #0
 8004db4:	008b      	lsls	r3, r1, #2
 8004db6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004dba:	0082      	lsls	r2, r0, #2
 8004dbc:	4650      	mov	r0, sl
 8004dbe:	4659      	mov	r1, fp
 8004dc0:	f7fb fe5c 	bl	8000a7c <__aeabi_uldivmod>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	4b0e      	ldr	r3, [pc, #56]	; (8004e04 <UART_SetConfig+0x38c>)
 8004dca:	fba3 1302 	umull	r1, r3, r3, r2
 8004dce:	095b      	lsrs	r3, r3, #5
 8004dd0:	2164      	movs	r1, #100	; 0x64
 8004dd2:	fb01 f303 	mul.w	r3, r1, r3
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	011b      	lsls	r3, r3, #4
 8004dda:	3332      	adds	r3, #50	; 0x32
 8004ddc:	4a09      	ldr	r2, [pc, #36]	; (8004e04 <UART_SetConfig+0x38c>)
 8004dde:	fba2 2303 	umull	r2, r3, r2, r3
 8004de2:	095b      	lsrs	r3, r3, #5
 8004de4:	f003 020f 	and.w	r2, r3, #15
 8004de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4432      	add	r2, r6
 8004dee:	609a      	str	r2, [r3, #8]
}
 8004df0:	bf00      	nop
 8004df2:	377c      	adds	r7, #124	; 0x7c
 8004df4:	46bd      	mov	sp, r7
 8004df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dfa:	bf00      	nop
 8004dfc:	40011000 	.word	0x40011000
 8004e00:	40011400 	.word	0x40011400
 8004e04:	51eb851f 	.word	0x51eb851f

08004e08 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004e0c:	4904      	ldr	r1, [pc, #16]	; (8004e20 <MX_FATFS_Init+0x18>)
 8004e0e:	4805      	ldr	r0, [pc, #20]	; (8004e24 <MX_FATFS_Init+0x1c>)
 8004e10:	f003 f89a 	bl	8007f48 <FATFS_LinkDriver>
 8004e14:	4603      	mov	r3, r0
 8004e16:	461a      	mov	r2, r3
 8004e18:	4b03      	ldr	r3, [pc, #12]	; (8004e28 <MX_FATFS_Init+0x20>)
 8004e1a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004e1c:	bf00      	nop
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	20002300 	.word	0x20002300
 8004e24:	20000010 	.word	0x20000010
 8004e28:	20002304 	.word	0x20002304

08004e2c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004e30:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	4603      	mov	r3, r0
 8004e44:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8004e46:	4b06      	ldr	r3, [pc, #24]	; (8004e60 <USER_initialize+0x24>)
 8004e48:	2201      	movs	r2, #1
 8004e4a:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004e4c:	4b04      	ldr	r3, [pc, #16]	; (8004e60 <USER_initialize+0x24>)
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	370c      	adds	r7, #12
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	2000000d 	.word	0x2000000d

08004e64 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8004e6e:	4b06      	ldr	r3, [pc, #24]	; (8004e88 <USER_status+0x24>)
 8004e70:	2201      	movs	r2, #1
 8004e72:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004e74:	4b04      	ldr	r3, [pc, #16]	; (8004e88 <USER_status+0x24>)
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	370c      	adds	r7, #12
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	2000000d 	.word	0x2000000d

08004e8c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60b9      	str	r1, [r7, #8]
 8004e94:	607a      	str	r2, [r7, #4]
 8004e96:	603b      	str	r3, [r7, #0]
 8004e98:	4603      	mov	r3, r0
 8004e9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8004e9c:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3714      	adds	r7, #20
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004eaa:	b480      	push	{r7}
 8004eac:	b085      	sub	sp, #20
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
 8004eb4:	603b      	str	r3, [r7, #0]
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8004eba:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3714      	adds	r7, #20
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	4603      	mov	r3, r0
 8004ed0:	603a      	str	r2, [r7, #0]
 8004ed2:	71fb      	strb	r3, [r7, #7]
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	73fb      	strb	r3, [r7, #15]
    return res;
 8004edc:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3714      	adds	r7, #20
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
	...

08004eec <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = SPI_Flash_Driver.disk_status();
 8004ef6:	4b05      	ldr	r3, [pc, #20]	; (8004f0c <disk_status+0x20>)
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	4798      	blx	r3
 8004efc:	4603      	mov	r3, r0
 8004efe:	73fb      	strb	r3, [r7, #15]
//  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
  return stat;
 8004f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	080094bc 	.word	0x080094bc

08004f10 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	4603      	mov	r3, r0
 8004f18:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	73fb      	strb	r3, [r7, #15]
//  if(disk.is_initialized[pdrv] == 0)
//  {
//    disk.is_initialized[pdrv] = 1;
//    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
//  }
  stat = SPI_Flash_Driver.disk_initialize();
 8004f1e:	4b05      	ldr	r3, [pc, #20]	; (8004f34 <disk_initialize+0x24>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4798      	blx	r3
 8004f24:	4603      	mov	r3, r0
 8004f26:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	080094bc 	.word	0x080094bc

08004f38 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60b9      	str	r1, [r7, #8]
 8004f40:	607a      	str	r2, [r7, #4]
 8004f42:	603b      	str	r3, [r7, #0]
 8004f44:	4603      	mov	r3, r0
 8004f46:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = SPI_Flash_Driver.disk_read(buff, sector, count);
 8004f48:	4b06      	ldr	r3, [pc, #24]	; (8004f64 <disk_read+0x2c>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	6879      	ldr	r1, [r7, #4]
 8004f50:	68b8      	ldr	r0, [r7, #8]
 8004f52:	4798      	blx	r3
 8004f54:	4603      	mov	r3, r0
 8004f56:	75fb      	strb	r3, [r7, #23]
//  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
  return res;
 8004f58:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3718      	adds	r7, #24
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	080094bc 	.word	0x080094bc

08004f68 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60b9      	str	r1, [r7, #8]
 8004f70:	607a      	str	r2, [r7, #4]
 8004f72:	603b      	str	r3, [r7, #0]
 8004f74:	4603      	mov	r3, r0
 8004f76:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = SPI_Flash_Driver.disk_write(buff, sector, count);
 8004f78:	4b06      	ldr	r3, [pc, #24]	; (8004f94 <disk_write+0x2c>)
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	683a      	ldr	r2, [r7, #0]
 8004f7e:	6879      	ldr	r1, [r7, #4]
 8004f80:	68b8      	ldr	r0, [r7, #8]
 8004f82:	4798      	blx	r3
 8004f84:	4603      	mov	r3, r0
 8004f86:	75fb      	strb	r3, [r7, #23]
//  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
  return res;
 8004f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3718      	adds	r7, #24
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	080094bc 	.word	0x080094bc

08004f98 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	603a      	str	r2, [r7, #0]
 8004fa2:	71fb      	strb	r3, [r7, #7]
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = SPI_Flash_Driver.disk_ioctl(cmd, buff);
 8004fa8:	4b06      	ldr	r3, [pc, #24]	; (8004fc4 <disk_ioctl+0x2c>)
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	79ba      	ldrb	r2, [r7, #6]
 8004fae:	6839      	ldr	r1, [r7, #0]
 8004fb0:	4610      	mov	r0, r2
 8004fb2:	4798      	blx	r3
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	73fb      	strb	r3, [r7, #15]
//  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
  return res;
 8004fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3710      	adds	r7, #16
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	080094bc 	.word	0x080094bc

08004fc8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004fd8:	89fb      	ldrh	r3, [r7, #14]
 8004fda:	021b      	lsls	r3, r3, #8
 8004fdc:	b21a      	sxth	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	b21b      	sxth	r3, r3
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	b21b      	sxth	r3, r3
 8004fe8:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004fea:	89fb      	ldrh	r3, [r7, #14]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3714      	adds	r7, #20
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	3303      	adds	r3, #3
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	021b      	lsls	r3, r3, #8
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	3202      	adds	r2, #2
 8005010:	7812      	ldrb	r2, [r2, #0]
 8005012:	4313      	orrs	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	021b      	lsls	r3, r3, #8
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	3201      	adds	r2, #1
 800501e:	7812      	ldrb	r2, [r2, #0]
 8005020:	4313      	orrs	r3, r2
 8005022:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	021b      	lsls	r3, r3, #8
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	7812      	ldrb	r2, [r2, #0]
 800502c:	4313      	orrs	r3, r2
 800502e:	60fb      	str	r3, [r7, #12]
	return rv;
 8005030:	68fb      	ldr	r3, [r7, #12]
}
 8005032:	4618      	mov	r0, r3
 8005034:	3714      	adds	r7, #20
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr

0800503e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800503e:	b480      	push	{r7}
 8005040:	b083      	sub	sp, #12
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
 8005046:	460b      	mov	r3, r1
 8005048:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	1c5a      	adds	r2, r3, #1
 800504e:	607a      	str	r2, [r7, #4]
 8005050:	887a      	ldrh	r2, [r7, #2]
 8005052:	b2d2      	uxtb	r2, r2
 8005054:	701a      	strb	r2, [r3, #0]
 8005056:	887b      	ldrh	r3, [r7, #2]
 8005058:	0a1b      	lsrs	r3, r3, #8
 800505a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	1c5a      	adds	r2, r3, #1
 8005060:	607a      	str	r2, [r7, #4]
 8005062:	887a      	ldrh	r2, [r7, #2]
 8005064:	b2d2      	uxtb	r2, r2
 8005066:	701a      	strb	r2, [r3, #0]
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	1c5a      	adds	r2, r3, #1
 8005082:	607a      	str	r2, [r7, #4]
 8005084:	683a      	ldr	r2, [r7, #0]
 8005086:	b2d2      	uxtb	r2, r2
 8005088:	701a      	strb	r2, [r3, #0]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	0a1b      	lsrs	r3, r3, #8
 800508e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	1c5a      	adds	r2, r3, #1
 8005094:	607a      	str	r2, [r7, #4]
 8005096:	683a      	ldr	r2, [r7, #0]
 8005098:	b2d2      	uxtb	r2, r2
 800509a:	701a      	strb	r2, [r3, #0]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	0a1b      	lsrs	r3, r3, #8
 80050a0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	1c5a      	adds	r2, r3, #1
 80050a6:	607a      	str	r2, [r7, #4]
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	b2d2      	uxtb	r2, r2
 80050ac:	701a      	strb	r2, [r3, #0]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	0a1b      	lsrs	r3, r3, #8
 80050b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	1c5a      	adds	r2, r3, #1
 80050b8:	607a      	str	r2, [r7, #4]
 80050ba:	683a      	ldr	r2, [r7, #0]
 80050bc:	b2d2      	uxtb	r2, r2
 80050be:	701a      	strb	r2, [r3, #0]
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80050cc:	b480      	push	{r7}
 80050ce:	b087      	sub	sp, #28
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00d      	beq.n	8005102 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	1c53      	adds	r3, r2, #1
 80050ea:	613b      	str	r3, [r7, #16]
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	1c59      	adds	r1, r3, #1
 80050f0:	6179      	str	r1, [r7, #20]
 80050f2:	7812      	ldrb	r2, [r2, #0]
 80050f4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	3b01      	subs	r3, #1
 80050fa:	607b      	str	r3, [r7, #4]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1f1      	bne.n	80050e6 <mem_cpy+0x1a>
	}
}
 8005102:	bf00      	nop
 8005104:	371c      	adds	r7, #28
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800510e:	b480      	push	{r7}
 8005110:	b087      	sub	sp, #28
 8005112:	af00      	add	r7, sp, #0
 8005114:	60f8      	str	r0, [r7, #12]
 8005116:	60b9      	str	r1, [r7, #8]
 8005118:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	1c5a      	adds	r2, r3, #1
 8005122:	617a      	str	r2, [r7, #20]
 8005124:	68ba      	ldr	r2, [r7, #8]
 8005126:	b2d2      	uxtb	r2, r2
 8005128:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	3b01      	subs	r3, #1
 800512e:	607b      	str	r3, [r7, #4]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1f3      	bne.n	800511e <mem_set+0x10>
}
 8005136:	bf00      	nop
 8005138:	bf00      	nop
 800513a:	371c      	adds	r7, #28
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005144:	b480      	push	{r7}
 8005146:	b089      	sub	sp, #36	; 0x24
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	61fb      	str	r3, [r7, #28]
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005158:	2300      	movs	r3, #0
 800515a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	61fa      	str	r2, [r7, #28]
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	4619      	mov	r1, r3
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	1c5a      	adds	r2, r3, #1
 800516a:	61ba      	str	r2, [r7, #24]
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	1acb      	subs	r3, r1, r3
 8005170:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	3b01      	subs	r3, #1
 8005176:	607b      	str	r3, [r7, #4]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d002      	beq.n	8005184 <mem_cmp+0x40>
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d0eb      	beq.n	800515c <mem_cmp+0x18>

	return r;
 8005184:	697b      	ldr	r3, [r7, #20]
}
 8005186:	4618      	mov	r0, r3
 8005188:	3724      	adds	r7, #36	; 0x24
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005192:	b480      	push	{r7}
 8005194:	b083      	sub	sp, #12
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
 800519a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800519c:	e002      	b.n	80051a4 <chk_chr+0x12>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	3301      	adds	r3, #1
 80051a2:	607b      	str	r3, [r7, #4]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d005      	beq.n	80051b8 <chk_chr+0x26>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	461a      	mov	r2, r3
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d1f2      	bne.n	800519e <chk_chr+0xc>
	return *str;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	781b      	ldrb	r3, [r3, #0]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80051d2:	2300      	movs	r3, #0
 80051d4:	60bb      	str	r3, [r7, #8]
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	60fb      	str	r3, [r7, #12]
 80051da:	e029      	b.n	8005230 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80051dc:	4a27      	ldr	r2, [pc, #156]	; (800527c <chk_lock+0xb4>)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	011b      	lsls	r3, r3, #4
 80051e2:	4413      	add	r3, r2
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d01d      	beq.n	8005226 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80051ea:	4a24      	ldr	r2, [pc, #144]	; (800527c <chk_lock+0xb4>)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	011b      	lsls	r3, r3, #4
 80051f0:	4413      	add	r3, r2
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d116      	bne.n	800522a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80051fc:	4a1f      	ldr	r2, [pc, #124]	; (800527c <chk_lock+0xb4>)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	011b      	lsls	r3, r3, #4
 8005202:	4413      	add	r3, r2
 8005204:	3304      	adds	r3, #4
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800520c:	429a      	cmp	r2, r3
 800520e:	d10c      	bne.n	800522a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005210:	4a1a      	ldr	r2, [pc, #104]	; (800527c <chk_lock+0xb4>)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	011b      	lsls	r3, r3, #4
 8005216:	4413      	add	r3, r2
 8005218:	3308      	adds	r3, #8
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005220:	429a      	cmp	r2, r3
 8005222:	d102      	bne.n	800522a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005224:	e007      	b.n	8005236 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005226:	2301      	movs	r3, #1
 8005228:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	3301      	adds	r3, #1
 800522e:	60fb      	str	r3, [r7, #12]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d9d2      	bls.n	80051dc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2b02      	cmp	r3, #2
 800523a:	d109      	bne.n	8005250 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d102      	bne.n	8005248 <chk_lock+0x80>
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2b02      	cmp	r3, #2
 8005246:	d101      	bne.n	800524c <chk_lock+0x84>
 8005248:	2300      	movs	r3, #0
 800524a:	e010      	b.n	800526e <chk_lock+0xa6>
 800524c:	2312      	movs	r3, #18
 800524e:	e00e      	b.n	800526e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d108      	bne.n	8005268 <chk_lock+0xa0>
 8005256:	4a09      	ldr	r2, [pc, #36]	; (800527c <chk_lock+0xb4>)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	011b      	lsls	r3, r3, #4
 800525c:	4413      	add	r3, r2
 800525e:	330c      	adds	r3, #12
 8005260:	881b      	ldrh	r3, [r3, #0]
 8005262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005266:	d101      	bne.n	800526c <chk_lock+0xa4>
 8005268:	2310      	movs	r3, #16
 800526a:	e000      	b.n	800526e <chk_lock+0xa6>
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	200000d4 	.word	0x200000d4

08005280 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005286:	2300      	movs	r3, #0
 8005288:	607b      	str	r3, [r7, #4]
 800528a:	e002      	b.n	8005292 <enq_lock+0x12>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	3301      	adds	r3, #1
 8005290:	607b      	str	r3, [r7, #4]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d806      	bhi.n	80052a6 <enq_lock+0x26>
 8005298:	4a09      	ldr	r2, [pc, #36]	; (80052c0 <enq_lock+0x40>)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	011b      	lsls	r3, r3, #4
 800529e:	4413      	add	r3, r2
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1f2      	bne.n	800528c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	bf14      	ite	ne
 80052ac:	2301      	movne	r3, #1
 80052ae:	2300      	moveq	r3, #0
 80052b0:	b2db      	uxtb	r3, r3
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	200000d4 	.word	0x200000d4

080052c4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80052ce:	2300      	movs	r3, #0
 80052d0:	60fb      	str	r3, [r7, #12]
 80052d2:	e01f      	b.n	8005314 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80052d4:	4a41      	ldr	r2, [pc, #260]	; (80053dc <inc_lock+0x118>)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	011b      	lsls	r3, r3, #4
 80052da:	4413      	add	r3, r2
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d113      	bne.n	800530e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80052e6:	4a3d      	ldr	r2, [pc, #244]	; (80053dc <inc_lock+0x118>)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	011b      	lsls	r3, r3, #4
 80052ec:	4413      	add	r3, r2
 80052ee:	3304      	adds	r3, #4
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d109      	bne.n	800530e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80052fa:	4a38      	ldr	r2, [pc, #224]	; (80053dc <inc_lock+0x118>)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	011b      	lsls	r3, r3, #4
 8005300:	4413      	add	r3, r2
 8005302:	3308      	adds	r3, #8
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800530a:	429a      	cmp	r2, r3
 800530c:	d006      	beq.n	800531c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	3301      	adds	r3, #1
 8005312:	60fb      	str	r3, [r7, #12]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d9dc      	bls.n	80052d4 <inc_lock+0x10>
 800531a:	e000      	b.n	800531e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800531c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2b02      	cmp	r3, #2
 8005322:	d132      	bne.n	800538a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005324:	2300      	movs	r3, #0
 8005326:	60fb      	str	r3, [r7, #12]
 8005328:	e002      	b.n	8005330 <inc_lock+0x6c>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	3301      	adds	r3, #1
 800532e:	60fb      	str	r3, [r7, #12]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2b01      	cmp	r3, #1
 8005334:	d806      	bhi.n	8005344 <inc_lock+0x80>
 8005336:	4a29      	ldr	r2, [pc, #164]	; (80053dc <inc_lock+0x118>)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	011b      	lsls	r3, r3, #4
 800533c:	4413      	add	r3, r2
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1f2      	bne.n	800532a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2b02      	cmp	r3, #2
 8005348:	d101      	bne.n	800534e <inc_lock+0x8a>
 800534a:	2300      	movs	r3, #0
 800534c:	e040      	b.n	80053d0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	4922      	ldr	r1, [pc, #136]	; (80053dc <inc_lock+0x118>)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	011b      	lsls	r3, r3, #4
 8005358:	440b      	add	r3, r1
 800535a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689a      	ldr	r2, [r3, #8]
 8005360:	491e      	ldr	r1, [pc, #120]	; (80053dc <inc_lock+0x118>)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	011b      	lsls	r3, r3, #4
 8005366:	440b      	add	r3, r1
 8005368:	3304      	adds	r3, #4
 800536a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	695a      	ldr	r2, [r3, #20]
 8005370:	491a      	ldr	r1, [pc, #104]	; (80053dc <inc_lock+0x118>)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	011b      	lsls	r3, r3, #4
 8005376:	440b      	add	r3, r1
 8005378:	3308      	adds	r3, #8
 800537a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800537c:	4a17      	ldr	r2, [pc, #92]	; (80053dc <inc_lock+0x118>)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	011b      	lsls	r3, r3, #4
 8005382:	4413      	add	r3, r2
 8005384:	330c      	adds	r3, #12
 8005386:	2200      	movs	r2, #0
 8005388:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d009      	beq.n	80053a4 <inc_lock+0xe0>
 8005390:	4a12      	ldr	r2, [pc, #72]	; (80053dc <inc_lock+0x118>)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	011b      	lsls	r3, r3, #4
 8005396:	4413      	add	r3, r2
 8005398:	330c      	adds	r3, #12
 800539a:	881b      	ldrh	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d001      	beq.n	80053a4 <inc_lock+0xe0>
 80053a0:	2300      	movs	r3, #0
 80053a2:	e015      	b.n	80053d0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d108      	bne.n	80053bc <inc_lock+0xf8>
 80053aa:	4a0c      	ldr	r2, [pc, #48]	; (80053dc <inc_lock+0x118>)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	011b      	lsls	r3, r3, #4
 80053b0:	4413      	add	r3, r2
 80053b2:	330c      	adds	r3, #12
 80053b4:	881b      	ldrh	r3, [r3, #0]
 80053b6:	3301      	adds	r3, #1
 80053b8:	b29a      	uxth	r2, r3
 80053ba:	e001      	b.n	80053c0 <inc_lock+0xfc>
 80053bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053c0:	4906      	ldr	r1, [pc, #24]	; (80053dc <inc_lock+0x118>)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	011b      	lsls	r3, r3, #4
 80053c6:	440b      	add	r3, r1
 80053c8:	330c      	adds	r3, #12
 80053ca:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	3301      	adds	r3, #1
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3714      	adds	r7, #20
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr
 80053dc:	200000d4 	.word	0x200000d4

080053e0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	3b01      	subs	r3, #1
 80053ec:	607b      	str	r3, [r7, #4]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d825      	bhi.n	8005440 <dec_lock+0x60>
		n = Files[i].ctr;
 80053f4:	4a17      	ldr	r2, [pc, #92]	; (8005454 <dec_lock+0x74>)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	011b      	lsls	r3, r3, #4
 80053fa:	4413      	add	r3, r2
 80053fc:	330c      	adds	r3, #12
 80053fe:	881b      	ldrh	r3, [r3, #0]
 8005400:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005402:	89fb      	ldrh	r3, [r7, #14]
 8005404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005408:	d101      	bne.n	800540e <dec_lock+0x2e>
 800540a:	2300      	movs	r3, #0
 800540c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800540e:	89fb      	ldrh	r3, [r7, #14]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d002      	beq.n	800541a <dec_lock+0x3a>
 8005414:	89fb      	ldrh	r3, [r7, #14]
 8005416:	3b01      	subs	r3, #1
 8005418:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800541a:	4a0e      	ldr	r2, [pc, #56]	; (8005454 <dec_lock+0x74>)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	011b      	lsls	r3, r3, #4
 8005420:	4413      	add	r3, r2
 8005422:	330c      	adds	r3, #12
 8005424:	89fa      	ldrh	r2, [r7, #14]
 8005426:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005428:	89fb      	ldrh	r3, [r7, #14]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d105      	bne.n	800543a <dec_lock+0x5a>
 800542e:	4a09      	ldr	r2, [pc, #36]	; (8005454 <dec_lock+0x74>)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	011b      	lsls	r3, r3, #4
 8005434:	4413      	add	r3, r2
 8005436:	2200      	movs	r2, #0
 8005438:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800543a:	2300      	movs	r3, #0
 800543c:	737b      	strb	r3, [r7, #13]
 800543e:	e001      	b.n	8005444 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005440:	2302      	movs	r3, #2
 8005442:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005444:	7b7b      	ldrb	r3, [r7, #13]
}
 8005446:	4618      	mov	r0, r3
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	200000d4 	.word	0x200000d4

08005458 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005460:	2300      	movs	r3, #0
 8005462:	60fb      	str	r3, [r7, #12]
 8005464:	e010      	b.n	8005488 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005466:	4a0d      	ldr	r2, [pc, #52]	; (800549c <clear_lock+0x44>)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	011b      	lsls	r3, r3, #4
 800546c:	4413      	add	r3, r2
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	429a      	cmp	r2, r3
 8005474:	d105      	bne.n	8005482 <clear_lock+0x2a>
 8005476:	4a09      	ldr	r2, [pc, #36]	; (800549c <clear_lock+0x44>)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	011b      	lsls	r3, r3, #4
 800547c:	4413      	add	r3, r2
 800547e:	2200      	movs	r2, #0
 8005480:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	3301      	adds	r3, #1
 8005486:	60fb      	str	r3, [r7, #12]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2b01      	cmp	r3, #1
 800548c:	d9eb      	bls.n	8005466 <clear_lock+0xe>
	}
}
 800548e:	bf00      	nop
 8005490:	bf00      	nop
 8005492:	3714      	adds	r7, #20
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr
 800549c:	200000d4 	.word	0x200000d4

080054a0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80054a8:	2300      	movs	r3, #0
 80054aa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	78db      	ldrb	r3, [r3, #3]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d034      	beq.n	800551e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	7858      	ldrb	r0, [r3, #1]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80054c4:	2301      	movs	r3, #1
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	f7ff fd4e 	bl	8004f68 <disk_write>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d002      	beq.n	80054d8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	73fb      	strb	r3, [r7, #15]
 80054d6:	e022      	b.n	800551e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	1ad2      	subs	r2, r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d217      	bcs.n	800551e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	789b      	ldrb	r3, [r3, #2]
 80054f2:	613b      	str	r3, [r7, #16]
 80054f4:	e010      	b.n	8005518 <sync_window+0x78>
					wsect += fs->fsize;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	69db      	ldr	r3, [r3, #28]
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	4413      	add	r3, r2
 80054fe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	7858      	ldrb	r0, [r3, #1]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800550a:	2301      	movs	r3, #1
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	f7ff fd2b 	bl	8004f68 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	3b01      	subs	r3, #1
 8005516:	613b      	str	r3, [r7, #16]
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d8eb      	bhi.n	80054f6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800551e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005520:	4618      	mov	r0, r3
 8005522:	3718      	adds	r7, #24
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005532:	2300      	movs	r3, #0
 8005534:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553a:	683a      	ldr	r2, [r7, #0]
 800553c:	429a      	cmp	r2, r3
 800553e:	d01b      	beq.n	8005578 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f7ff ffad 	bl	80054a0 <sync_window>
 8005546:	4603      	mov	r3, r0
 8005548:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800554a:	7bfb      	ldrb	r3, [r7, #15]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d113      	bne.n	8005578 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	7858      	ldrb	r0, [r3, #1]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800555a:	2301      	movs	r3, #1
 800555c:	683a      	ldr	r2, [r7, #0]
 800555e:	f7ff fceb 	bl	8004f38 <disk_read>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d004      	beq.n	8005572 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005568:	f04f 33ff 	mov.w	r3, #4294967295
 800556c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800556e:	2301      	movs	r3, #1
 8005570:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	683a      	ldr	r2, [r7, #0]
 8005576:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8005578:	7bfb      	ldrb	r3, [r7, #15]
}
 800557a:	4618      	mov	r0, r3
 800557c:	3710      	adds	r7, #16
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
	...

08005584 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f7ff ff87 	bl	80054a0 <sync_window>
 8005592:	4603      	mov	r3, r0
 8005594:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005596:	7bfb      	ldrb	r3, [r7, #15]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d159      	bne.n	8005650 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	2b03      	cmp	r3, #3
 80055a2:	d149      	bne.n	8005638 <sync_fs+0xb4>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	791b      	ldrb	r3, [r3, #4]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d145      	bne.n	8005638 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	899b      	ldrh	r3, [r3, #12]
 80055b6:	461a      	mov	r2, r3
 80055b8:	2100      	movs	r1, #0
 80055ba:	f7ff fda8 	bl	800510e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	3334      	adds	r3, #52	; 0x34
 80055c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80055c6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7ff fd37 	bl	800503e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	3334      	adds	r3, #52	; 0x34
 80055d4:	4921      	ldr	r1, [pc, #132]	; (800565c <sync_fs+0xd8>)
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7ff fd4c 	bl	8005074 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	3334      	adds	r3, #52	; 0x34
 80055e0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80055e4:	491e      	ldr	r1, [pc, #120]	; (8005660 <sync_fs+0xdc>)
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7ff fd44 	bl	8005074 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	3334      	adds	r3, #52	; 0x34
 80055f0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	695b      	ldr	r3, [r3, #20]
 80055f8:	4619      	mov	r1, r3
 80055fa:	4610      	mov	r0, r2
 80055fc:	f7ff fd3a 	bl	8005074 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	3334      	adds	r3, #52	; 0x34
 8005604:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	4619      	mov	r1, r3
 800560e:	4610      	mov	r0, r2
 8005610:	f7ff fd30 	bl	8005074 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a1b      	ldr	r3, [r3, #32]
 8005618:	1c5a      	adds	r2, r3, #1
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	7858      	ldrb	r0, [r3, #1]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800562c:	2301      	movs	r3, #1
 800562e:	f7ff fc9b 	bl	8004f68 <disk_write>
			fs->fsi_flag = 0;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	785b      	ldrb	r3, [r3, #1]
 800563c:	2200      	movs	r2, #0
 800563e:	2100      	movs	r1, #0
 8005640:	4618      	mov	r0, r3
 8005642:	f7ff fca9 	bl	8004f98 <disk_ioctl>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d001      	beq.n	8005650 <sync_fs+0xcc>
 800564c:	2301      	movs	r3, #1
 800564e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005650:	7bfb      	ldrb	r3, [r7, #15]
}
 8005652:	4618      	mov	r0, r3
 8005654:	3710      	adds	r7, #16
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	41615252 	.word	0x41615252
 8005660:	61417272 	.word	0x61417272

08005664 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	3b02      	subs	r3, #2
 8005672:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	3b02      	subs	r3, #2
 800567a:	683a      	ldr	r2, [r7, #0]
 800567c:	429a      	cmp	r2, r3
 800567e:	d301      	bcc.n	8005684 <clust2sect+0x20>
 8005680:	2300      	movs	r3, #0
 8005682:	e008      	b.n	8005696 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	895b      	ldrh	r3, [r3, #10]
 8005688:	461a      	mov	r2, r3
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	fb03 f202 	mul.w	r2, r3, r2
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005694:	4413      	add	r3, r2
}
 8005696:	4618      	mov	r0, r3
 8005698:	370c      	adds	r7, #12
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b086      	sub	sp, #24
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d904      	bls.n	80056c2 <get_fat+0x20>
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	699b      	ldr	r3, [r3, #24]
 80056bc:	683a      	ldr	r2, [r7, #0]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d302      	bcc.n	80056c8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80056c2:	2301      	movs	r3, #1
 80056c4:	617b      	str	r3, [r7, #20]
 80056c6:	e0bb      	b.n	8005840 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80056c8:	f04f 33ff 	mov.w	r3, #4294967295
 80056cc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	2b03      	cmp	r3, #3
 80056d4:	f000 8083 	beq.w	80057de <get_fat+0x13c>
 80056d8:	2b03      	cmp	r3, #3
 80056da:	f300 80a7 	bgt.w	800582c <get_fat+0x18a>
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d002      	beq.n	80056e8 <get_fat+0x46>
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d056      	beq.n	8005794 <get_fat+0xf2>
 80056e6:	e0a1      	b.n	800582c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	60fb      	str	r3, [r7, #12]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	085b      	lsrs	r3, r3, #1
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	4413      	add	r3, r2
 80056f4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	899b      	ldrh	r3, [r3, #12]
 80056fe:	4619      	mov	r1, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	fbb3 f3f1 	udiv	r3, r3, r1
 8005706:	4413      	add	r3, r2
 8005708:	4619      	mov	r1, r3
 800570a:	6938      	ldr	r0, [r7, #16]
 800570c:	f7ff ff0c 	bl	8005528 <move_window>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	f040 808d 	bne.w	8005832 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	60fa      	str	r2, [r7, #12]
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	8992      	ldrh	r2, [r2, #12]
 8005722:	fbb3 f1f2 	udiv	r1, r3, r2
 8005726:	fb02 f201 	mul.w	r2, r2, r1
 800572a:	1a9b      	subs	r3, r3, r2
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	4413      	add	r3, r2
 8005730:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005734:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	899b      	ldrh	r3, [r3, #12]
 800573e:	4619      	mov	r1, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	fbb3 f3f1 	udiv	r3, r3, r1
 8005746:	4413      	add	r3, r2
 8005748:	4619      	mov	r1, r3
 800574a:	6938      	ldr	r0, [r7, #16]
 800574c:	f7ff feec 	bl	8005528 <move_window>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d16f      	bne.n	8005836 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	899b      	ldrh	r3, [r3, #12]
 800575a:	461a      	mov	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005762:	fb02 f201 	mul.w	r2, r2, r1
 8005766:	1a9b      	subs	r3, r3, r2
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	4413      	add	r3, r2
 800576c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005770:	021b      	lsls	r3, r3, #8
 8005772:	461a      	mov	r2, r3
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	4313      	orrs	r3, r2
 8005778:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	f003 0301 	and.w	r3, r3, #1
 8005780:	2b00      	cmp	r3, #0
 8005782:	d002      	beq.n	800578a <get_fat+0xe8>
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	091b      	lsrs	r3, r3, #4
 8005788:	e002      	b.n	8005790 <get_fat+0xee>
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005790:	617b      	str	r3, [r7, #20]
			break;
 8005792:	e055      	b.n	8005840 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	899b      	ldrh	r3, [r3, #12]
 800579c:	085b      	lsrs	r3, r3, #1
 800579e:	b29b      	uxth	r3, r3
 80057a0:	4619      	mov	r1, r3
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80057a8:	4413      	add	r3, r2
 80057aa:	4619      	mov	r1, r3
 80057ac:	6938      	ldr	r0, [r7, #16]
 80057ae:	f7ff febb 	bl	8005528 <move_window>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d140      	bne.n	800583a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	8992      	ldrh	r2, [r2, #12]
 80057c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80057ca:	fb02 f200 	mul.w	r2, r2, r0
 80057ce:	1a9b      	subs	r3, r3, r2
 80057d0:	440b      	add	r3, r1
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7ff fbf8 	bl	8004fc8 <ld_word>
 80057d8:	4603      	mov	r3, r0
 80057da:	617b      	str	r3, [r7, #20]
			break;
 80057dc:	e030      	b.n	8005840 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	899b      	ldrh	r3, [r3, #12]
 80057e6:	089b      	lsrs	r3, r3, #2
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	4619      	mov	r1, r3
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80057f2:	4413      	add	r3, r2
 80057f4:	4619      	mov	r1, r3
 80057f6:	6938      	ldr	r0, [r7, #16]
 80057f8:	f7ff fe96 	bl	8005528 <move_window>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d11d      	bne.n	800583e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	8992      	ldrh	r2, [r2, #12]
 8005810:	fbb3 f0f2 	udiv	r0, r3, r2
 8005814:	fb02 f200 	mul.w	r2, r2, r0
 8005818:	1a9b      	subs	r3, r3, r2
 800581a:	440b      	add	r3, r1
 800581c:	4618      	mov	r0, r3
 800581e:	f7ff fbeb 	bl	8004ff8 <ld_dword>
 8005822:	4603      	mov	r3, r0
 8005824:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005828:	617b      	str	r3, [r7, #20]
			break;
 800582a:	e009      	b.n	8005840 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800582c:	2301      	movs	r3, #1
 800582e:	617b      	str	r3, [r7, #20]
 8005830:	e006      	b.n	8005840 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005832:	bf00      	nop
 8005834:	e004      	b.n	8005840 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005836:	bf00      	nop
 8005838:	e002      	b.n	8005840 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800583a:	bf00      	nop
 800583c:	e000      	b.n	8005840 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800583e:	bf00      	nop
		}
	}

	return val;
 8005840:	697b      	ldr	r3, [r7, #20]
}
 8005842:	4618      	mov	r0, r3
 8005844:	3718      	adds	r7, #24
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800584a:	b590      	push	{r4, r7, lr}
 800584c:	b089      	sub	sp, #36	; 0x24
 800584e:	af00      	add	r7, sp, #0
 8005850:	60f8      	str	r0, [r7, #12]
 8005852:	60b9      	str	r1, [r7, #8]
 8005854:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005856:	2302      	movs	r3, #2
 8005858:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	2b01      	cmp	r3, #1
 800585e:	f240 8102 	bls.w	8005a66 <put_fat+0x21c>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	429a      	cmp	r2, r3
 800586a:	f080 80fc 	bcs.w	8005a66 <put_fat+0x21c>
		switch (fs->fs_type) {
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	2b03      	cmp	r3, #3
 8005874:	f000 80b6 	beq.w	80059e4 <put_fat+0x19a>
 8005878:	2b03      	cmp	r3, #3
 800587a:	f300 80fd 	bgt.w	8005a78 <put_fat+0x22e>
 800587e:	2b01      	cmp	r3, #1
 8005880:	d003      	beq.n	800588a <put_fat+0x40>
 8005882:	2b02      	cmp	r3, #2
 8005884:	f000 8083 	beq.w	800598e <put_fat+0x144>
 8005888:	e0f6      	b.n	8005a78 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	61bb      	str	r3, [r7, #24]
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	085b      	lsrs	r3, r3, #1
 8005892:	69ba      	ldr	r2, [r7, #24]
 8005894:	4413      	add	r3, r2
 8005896:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	899b      	ldrh	r3, [r3, #12]
 80058a0:	4619      	mov	r1, r3
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80058a8:	4413      	add	r3, r2
 80058aa:	4619      	mov	r1, r3
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f7ff fe3b 	bl	8005528 <move_window>
 80058b2:	4603      	mov	r3, r0
 80058b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80058b6:	7ffb      	ldrb	r3, [r7, #31]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f040 80d6 	bne.w	8005a6a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	1c5a      	adds	r2, r3, #1
 80058c8:	61ba      	str	r2, [r7, #24]
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	8992      	ldrh	r2, [r2, #12]
 80058ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80058d2:	fb02 f200 	mul.w	r2, r2, r0
 80058d6:	1a9b      	subs	r3, r3, r2
 80058d8:	440b      	add	r3, r1
 80058da:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00d      	beq.n	8005902 <put_fat+0xb8>
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	b25b      	sxtb	r3, r3
 80058ec:	f003 030f 	and.w	r3, r3, #15
 80058f0:	b25a      	sxtb	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	011b      	lsls	r3, r3, #4
 80058f8:	b25b      	sxtb	r3, r3
 80058fa:	4313      	orrs	r3, r2
 80058fc:	b25b      	sxtb	r3, r3
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	e001      	b.n	8005906 <put_fat+0xbc>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	b2db      	uxtb	r3, r3
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2201      	movs	r2, #1
 800590e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	899b      	ldrh	r3, [r3, #12]
 8005918:	4619      	mov	r1, r3
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005920:	4413      	add	r3, r2
 8005922:	4619      	mov	r1, r3
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	f7ff fdff 	bl	8005528 <move_window>
 800592a:	4603      	mov	r3, r0
 800592c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800592e:	7ffb      	ldrb	r3, [r7, #31]
 8005930:	2b00      	cmp	r3, #0
 8005932:	f040 809c 	bne.w	8005a6e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	899b      	ldrh	r3, [r3, #12]
 8005940:	461a      	mov	r2, r3
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	fbb3 f0f2 	udiv	r0, r3, r2
 8005948:	fb02 f200 	mul.w	r2, r2, r0
 800594c:	1a9b      	subs	r3, r3, r2
 800594e:	440b      	add	r3, r1
 8005950:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	f003 0301 	and.w	r3, r3, #1
 8005958:	2b00      	cmp	r3, #0
 800595a:	d003      	beq.n	8005964 <put_fat+0x11a>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	091b      	lsrs	r3, r3, #4
 8005960:	b2db      	uxtb	r3, r3
 8005962:	e00e      	b.n	8005982 <put_fat+0x138>
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	b25b      	sxtb	r3, r3
 800596a:	f023 030f 	bic.w	r3, r3, #15
 800596e:	b25a      	sxtb	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	0a1b      	lsrs	r3, r3, #8
 8005974:	b25b      	sxtb	r3, r3
 8005976:	f003 030f 	and.w	r3, r3, #15
 800597a:	b25b      	sxtb	r3, r3
 800597c:	4313      	orrs	r3, r2
 800597e:	b25b      	sxtb	r3, r3
 8005980:	b2db      	uxtb	r3, r3
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2201      	movs	r2, #1
 800598a:	70da      	strb	r2, [r3, #3]
			break;
 800598c:	e074      	b.n	8005a78 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	899b      	ldrh	r3, [r3, #12]
 8005996:	085b      	lsrs	r3, r3, #1
 8005998:	b29b      	uxth	r3, r3
 800599a:	4619      	mov	r1, r3
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	fbb3 f3f1 	udiv	r3, r3, r1
 80059a2:	4413      	add	r3, r2
 80059a4:	4619      	mov	r1, r3
 80059a6:	68f8      	ldr	r0, [r7, #12]
 80059a8:	f7ff fdbe 	bl	8005528 <move_window>
 80059ac:	4603      	mov	r3, r0
 80059ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80059b0:	7ffb      	ldrb	r3, [r7, #31]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d15d      	bne.n	8005a72 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	005b      	lsls	r3, r3, #1
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	8992      	ldrh	r2, [r2, #12]
 80059c4:	fbb3 f0f2 	udiv	r0, r3, r2
 80059c8:	fb02 f200 	mul.w	r2, r2, r0
 80059cc:	1a9b      	subs	r3, r3, r2
 80059ce:	440b      	add	r3, r1
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	b292      	uxth	r2, r2
 80059d4:	4611      	mov	r1, r2
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7ff fb31 	bl	800503e <st_word>
			fs->wflag = 1;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2201      	movs	r2, #1
 80059e0:	70da      	strb	r2, [r3, #3]
			break;
 80059e2:	e049      	b.n	8005a78 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	899b      	ldrh	r3, [r3, #12]
 80059ec:	089b      	lsrs	r3, r3, #2
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	4619      	mov	r1, r3
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80059f8:	4413      	add	r3, r2
 80059fa:	4619      	mov	r1, r3
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f7ff fd93 	bl	8005528 <move_window>
 8005a02:	4603      	mov	r3, r0
 8005a04:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005a06:	7ffb      	ldrb	r3, [r7, #31]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d134      	bne.n	8005a76 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	8992      	ldrh	r2, [r2, #12]
 8005a20:	fbb3 f0f2 	udiv	r0, r3, r2
 8005a24:	fb02 f200 	mul.w	r2, r2, r0
 8005a28:	1a9b      	subs	r3, r3, r2
 8005a2a:	440b      	add	r3, r1
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7ff fae3 	bl	8004ff8 <ld_dword>
 8005a32:	4603      	mov	r3, r0
 8005a34:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005a38:	4323      	orrs	r3, r4
 8005a3a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	8992      	ldrh	r2, [r2, #12]
 8005a4a:	fbb3 f0f2 	udiv	r0, r3, r2
 8005a4e:	fb02 f200 	mul.w	r2, r2, r0
 8005a52:	1a9b      	subs	r3, r3, r2
 8005a54:	440b      	add	r3, r1
 8005a56:	6879      	ldr	r1, [r7, #4]
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7ff fb0b 	bl	8005074 <st_dword>
			fs->wflag = 1;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2201      	movs	r2, #1
 8005a62:	70da      	strb	r2, [r3, #3]
			break;
 8005a64:	e008      	b.n	8005a78 <put_fat+0x22e>
		}
	}
 8005a66:	bf00      	nop
 8005a68:	e006      	b.n	8005a78 <put_fat+0x22e>
			if (res != FR_OK) break;
 8005a6a:	bf00      	nop
 8005a6c:	e004      	b.n	8005a78 <put_fat+0x22e>
			if (res != FR_OK) break;
 8005a6e:	bf00      	nop
 8005a70:	e002      	b.n	8005a78 <put_fat+0x22e>
			if (res != FR_OK) break;
 8005a72:	bf00      	nop
 8005a74:	e000      	b.n	8005a78 <put_fat+0x22e>
			if (res != FR_OK) break;
 8005a76:	bf00      	nop
	return res;
 8005a78:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3724      	adds	r7, #36	; 0x24
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd90      	pop	{r4, r7, pc}

08005a82 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b088      	sub	sp, #32
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	60f8      	str	r0, [r7, #12]
 8005a8a:	60b9      	str	r1, [r7, #8]
 8005a8c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d904      	bls.n	8005aa8 <remove_chain+0x26>
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d301      	bcc.n	8005aac <remove_chain+0x2a>
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	e04b      	b.n	8005b44 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00c      	beq.n	8005acc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ab6:	6879      	ldr	r1, [r7, #4]
 8005ab8:	69b8      	ldr	r0, [r7, #24]
 8005aba:	f7ff fec6 	bl	800584a <put_fat>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005ac2:	7ffb      	ldrb	r3, [r7, #31]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d001      	beq.n	8005acc <remove_chain+0x4a>
 8005ac8:	7ffb      	ldrb	r3, [r7, #31]
 8005aca:	e03b      	b.n	8005b44 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005acc:	68b9      	ldr	r1, [r7, #8]
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f7ff fde7 	bl	80056a2 <get_fat>
 8005ad4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d031      	beq.n	8005b40 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d101      	bne.n	8005ae6 <remove_chain+0x64>
 8005ae2:	2302      	movs	r3, #2
 8005ae4:	e02e      	b.n	8005b44 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aec:	d101      	bne.n	8005af2 <remove_chain+0x70>
 8005aee:	2301      	movs	r3, #1
 8005af0:	e028      	b.n	8005b44 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005af2:	2200      	movs	r2, #0
 8005af4:	68b9      	ldr	r1, [r7, #8]
 8005af6:	69b8      	ldr	r0, [r7, #24]
 8005af8:	f7ff fea7 	bl	800584a <put_fat>
 8005afc:	4603      	mov	r3, r0
 8005afe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005b00:	7ffb      	ldrb	r3, [r7, #31]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d001      	beq.n	8005b0a <remove_chain+0x88>
 8005b06:	7ffb      	ldrb	r3, [r7, #31]
 8005b08:	e01c      	b.n	8005b44 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	695a      	ldr	r2, [r3, #20]
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	3b02      	subs	r3, #2
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d20b      	bcs.n	8005b30 <remove_chain+0xae>
			fs->free_clst++;
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	695b      	ldr	r3, [r3, #20]
 8005b1c:	1c5a      	adds	r2, r3, #1
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	791b      	ldrb	r3, [r3, #4]
 8005b26:	f043 0301 	orr.w	r3, r3, #1
 8005b2a:	b2da      	uxtb	r2, r3
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d3c6      	bcc.n	8005acc <remove_chain+0x4a>
 8005b3e:	e000      	b.n	8005b42 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005b40:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3720      	adds	r7, #32
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b088      	sub	sp, #32
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10d      	bne.n	8005b7e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d004      	beq.n	8005b78 <create_chain+0x2c>
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	69ba      	ldr	r2, [r7, #24]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d31b      	bcc.n	8005bb0 <create_chain+0x64>
 8005b78:	2301      	movs	r3, #1
 8005b7a:	61bb      	str	r3, [r7, #24]
 8005b7c:	e018      	b.n	8005bb0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005b7e:	6839      	ldr	r1, [r7, #0]
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f7ff fd8e 	bl	80056a2 <get_fat>
 8005b86:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d801      	bhi.n	8005b92 <create_chain+0x46>
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e070      	b.n	8005c74 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b98:	d101      	bne.n	8005b9e <create_chain+0x52>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	e06a      	b.n	8005c74 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d201      	bcs.n	8005bac <create_chain+0x60>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	e063      	b.n	8005c74 <create_chain+0x128>
		scl = clst;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	69fa      	ldr	r2, [r7, #28]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d307      	bcc.n	8005bd4 <create_chain+0x88>
				ncl = 2;
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005bc8:	69fa      	ldr	r2, [r7, #28]
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d901      	bls.n	8005bd4 <create_chain+0x88>
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	e04f      	b.n	8005c74 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005bd4:	69f9      	ldr	r1, [r7, #28]
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f7ff fd63 	bl	80056a2 <get_fat>
 8005bdc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00e      	beq.n	8005c02 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d003      	beq.n	8005bf2 <create_chain+0xa6>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf0:	d101      	bne.n	8005bf6 <create_chain+0xaa>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	e03e      	b.n	8005c74 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005bf6:	69fa      	ldr	r2, [r7, #28]
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d1da      	bne.n	8005bb4 <create_chain+0x68>
 8005bfe:	2300      	movs	r3, #0
 8005c00:	e038      	b.n	8005c74 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005c02:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005c04:	f04f 32ff 	mov.w	r2, #4294967295
 8005c08:	69f9      	ldr	r1, [r7, #28]
 8005c0a:	6938      	ldr	r0, [r7, #16]
 8005c0c:	f7ff fe1d 	bl	800584a <put_fat>
 8005c10:	4603      	mov	r3, r0
 8005c12:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005c14:	7dfb      	ldrb	r3, [r7, #23]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d109      	bne.n	8005c2e <create_chain+0xe2>
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d006      	beq.n	8005c2e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005c20:	69fa      	ldr	r2, [r7, #28]
 8005c22:	6839      	ldr	r1, [r7, #0]
 8005c24:	6938      	ldr	r0, [r7, #16]
 8005c26:	f7ff fe10 	bl	800584a <put_fat>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005c2e:	7dfb      	ldrb	r3, [r7, #23]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d116      	bne.n	8005c62 <create_chain+0x116>
		fs->last_clst = ncl;
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	69fa      	ldr	r2, [r7, #28]
 8005c38:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	695a      	ldr	r2, [r3, #20]
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	3b02      	subs	r3, #2
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d804      	bhi.n	8005c52 <create_chain+0x106>
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	695b      	ldr	r3, [r3, #20]
 8005c4c:	1e5a      	subs	r2, r3, #1
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	791b      	ldrb	r3, [r3, #4]
 8005c56:	f043 0301 	orr.w	r3, r3, #1
 8005c5a:	b2da      	uxtb	r2, r3
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	711a      	strb	r2, [r3, #4]
 8005c60:	e007      	b.n	8005c72 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005c62:	7dfb      	ldrb	r3, [r7, #23]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d102      	bne.n	8005c6e <create_chain+0x122>
 8005c68:	f04f 33ff 	mov.w	r3, #4294967295
 8005c6c:	e000      	b.n	8005c70 <create_chain+0x124>
 8005c6e:	2301      	movs	r3, #1
 8005c70:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005c72:	69fb      	ldr	r3, [r7, #28]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3720      	adds	r7, #32
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b087      	sub	sp, #28
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c90:	3304      	adds	r3, #4
 8005c92:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	899b      	ldrh	r3, [r3, #12]
 8005c98:	461a      	mov	r2, r3
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	8952      	ldrh	r2, [r2, #10]
 8005ca4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ca8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	1d1a      	adds	r2, r3, #4
 8005cae:	613a      	str	r2, [r7, #16]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <clmt_clust+0x42>
 8005cba:	2300      	movs	r3, #0
 8005cbc:	e010      	b.n	8005ce0 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d307      	bcc.n	8005cd6 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8005cc6:	697a      	ldr	r2, [r7, #20]
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	617b      	str	r3, [r7, #20]
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	3304      	adds	r3, #4
 8005cd2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005cd4:	e7e9      	b.n	8005caa <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8005cd6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	4413      	add	r3, r2
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	371c      	adds	r7, #28
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b086      	sub	sp, #24
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d02:	d204      	bcs.n	8005d0e <dir_sdi+0x22>
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	f003 031f 	and.w	r3, r3, #31
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005d0e:	2302      	movs	r3, #2
 8005d10:	e071      	b.n	8005df6 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	683a      	ldr	r2, [r7, #0]
 8005d16:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d106      	bne.n	8005d32 <dir_sdi+0x46>
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d902      	bls.n	8005d32 <dir_sdi+0x46>
		clst = fs->dirbase;
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d30:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10c      	bne.n	8005d52 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	095b      	lsrs	r3, r3, #5
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	8912      	ldrh	r2, [r2, #8]
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d301      	bcc.n	8005d48 <dir_sdi+0x5c>
 8005d44:	2302      	movs	r3, #2
 8005d46:	e056      	b.n	8005df6 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	61da      	str	r2, [r3, #28]
 8005d50:	e02d      	b.n	8005dae <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	895b      	ldrh	r3, [r3, #10]
 8005d56:	461a      	mov	r2, r3
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	899b      	ldrh	r3, [r3, #12]
 8005d5c:	fb03 f302 	mul.w	r3, r3, r2
 8005d60:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005d62:	e019      	b.n	8005d98 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6979      	ldr	r1, [r7, #20]
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f7ff fc9a 	bl	80056a2 <get_fat>
 8005d6e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d76:	d101      	bne.n	8005d7c <dir_sdi+0x90>
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e03c      	b.n	8005df6 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d904      	bls.n	8005d8c <dir_sdi+0xa0>
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d301      	bcc.n	8005d90 <dir_sdi+0xa4>
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	e032      	b.n	8005df6 <dir_sdi+0x10a>
			ofs -= csz;
 8005d90:	683a      	ldr	r2, [r7, #0]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005d98:	683a      	ldr	r2, [r7, #0]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d2e1      	bcs.n	8005d64 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005da0:	6979      	ldr	r1, [r7, #20]
 8005da2:	6938      	ldr	r0, [r7, #16]
 8005da4:	f7ff fc5e 	bl	8005664 <clust2sect>
 8005da8:	4602      	mov	r2, r0
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	69db      	ldr	r3, [r3, #28]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d101      	bne.n	8005dc0 <dir_sdi+0xd4>
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	e01a      	b.n	8005df6 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	69da      	ldr	r2, [r3, #28]
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	899b      	ldrh	r3, [r3, #12]
 8005dc8:	4619      	mov	r1, r3
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	fbb3 f3f1 	udiv	r3, r3, r1
 8005dd0:	441a      	add	r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	899b      	ldrh	r3, [r3, #12]
 8005de0:	461a      	mov	r2, r3
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	fbb3 f0f2 	udiv	r0, r3, r2
 8005de8:	fb02 f200 	mul.w	r2, r2, r0
 8005dec:	1a9b      	subs	r3, r3, r2
 8005dee:	18ca      	adds	r2, r1, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3718      	adds	r7, #24
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b086      	sub	sp, #24
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
 8005e06:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	3320      	adds	r3, #32
 8005e14:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	69db      	ldr	r3, [r3, #28]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d003      	beq.n	8005e26 <dir_next+0x28>
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e24:	d301      	bcc.n	8005e2a <dir_next+0x2c>
 8005e26:	2304      	movs	r3, #4
 8005e28:	e0bb      	b.n	8005fa2 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	899b      	ldrh	r3, [r3, #12]
 8005e2e:	461a      	mov	r2, r3
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e36:	fb02 f201 	mul.w	r2, r2, r1
 8005e3a:	1a9b      	subs	r3, r3, r2
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f040 809d 	bne.w	8005f7c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	69db      	ldr	r3, [r3, #28]
 8005e46:	1c5a      	adds	r2, r3, #1
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10b      	bne.n	8005e6c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	095b      	lsrs	r3, r3, #5
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	8912      	ldrh	r2, [r2, #8]
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	f0c0 808d 	bcc.w	8005f7c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	61da      	str	r2, [r3, #28]
 8005e68:	2304      	movs	r3, #4
 8005e6a:	e09a      	b.n	8005fa2 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	899b      	ldrh	r3, [r3, #12]
 8005e70:	461a      	mov	r2, r3
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	8952      	ldrh	r2, [r2, #10]
 8005e7c:	3a01      	subs	r2, #1
 8005e7e:	4013      	ands	r3, r2
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d17b      	bne.n	8005f7c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	4610      	mov	r0, r2
 8005e8e:	f7ff fc08 	bl	80056a2 <get_fat>
 8005e92:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d801      	bhi.n	8005e9e <dir_next+0xa0>
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	e081      	b.n	8005fa2 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea4:	d101      	bne.n	8005eaa <dir_next+0xac>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e07b      	b.n	8005fa2 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d359      	bcc.n	8005f68 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d104      	bne.n	8005ec4 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	61da      	str	r2, [r3, #28]
 8005ec0:	2304      	movs	r3, #4
 8005ec2:	e06e      	b.n	8005fa2 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	4619      	mov	r1, r3
 8005ecc:	4610      	mov	r0, r2
 8005ece:	f7ff fe3d 	bl	8005b4c <create_chain>
 8005ed2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d101      	bne.n	8005ede <dir_next+0xe0>
 8005eda:	2307      	movs	r3, #7
 8005edc:	e061      	b.n	8005fa2 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d101      	bne.n	8005ee8 <dir_next+0xea>
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	e05c      	b.n	8005fa2 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eee:	d101      	bne.n	8005ef4 <dir_next+0xf6>
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e056      	b.n	8005fa2 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f7ff fad3 	bl	80054a0 <sync_window>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d001      	beq.n	8005f04 <dir_next+0x106>
 8005f00:	2301      	movs	r3, #1
 8005f02:	e04e      	b.n	8005fa2 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	899b      	ldrh	r3, [r3, #12]
 8005f0e:	461a      	mov	r2, r3
 8005f10:	2100      	movs	r1, #0
 8005f12:	f7ff f8fc 	bl	800510e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005f16:	2300      	movs	r3, #0
 8005f18:	613b      	str	r3, [r7, #16]
 8005f1a:	6979      	ldr	r1, [r7, #20]
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f7ff fba1 	bl	8005664 <clust2sect>
 8005f22:	4602      	mov	r2, r0
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	631a      	str	r2, [r3, #48]	; 0x30
 8005f28:	e012      	b.n	8005f50 <dir_next+0x152>
						fs->wflag = 1;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f7ff fab5 	bl	80054a0 <sync_window>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d001      	beq.n	8005f40 <dir_next+0x142>
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e030      	b.n	8005fa2 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	3301      	adds	r3, #1
 8005f44:	613b      	str	r3, [r7, #16]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4a:	1c5a      	adds	r2, r3, #1
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	631a      	str	r2, [r3, #48]	; 0x30
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	895b      	ldrh	r3, [r3, #10]
 8005f54:	461a      	mov	r2, r3
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d3e6      	bcc.n	8005f2a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	1ad2      	subs	r2, r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005f6e:	6979      	ldr	r1, [r7, #20]
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f7ff fb77 	bl	8005664 <clust2sect>
 8005f76:	4602      	mov	r2, r0
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	899b      	ldrh	r3, [r3, #12]
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	fbb3 f0f2 	udiv	r0, r3, r2
 8005f94:	fb02 f200 	mul.w	r2, r2, r0
 8005f98:	1a9b      	subs	r3, r3, r2
 8005f9a:	18ca      	adds	r2, r1, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3718      	adds	r7, #24
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b086      	sub	sp, #24
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
 8005fb2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005fba:	2100      	movs	r1, #0
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f7ff fe95 	bl	8005cec <dir_sdi>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005fc6:	7dfb      	ldrb	r3, [r7, #23]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d12b      	bne.n	8006024 <dir_alloc+0x7a>
		n = 0;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	69db      	ldr	r3, [r3, #28]
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f7ff faa6 	bl	8005528 <move_window>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005fe0:	7dfb      	ldrb	r3, [r7, #23]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d11d      	bne.n	8006022 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	2be5      	cmp	r3, #229	; 0xe5
 8005fee:	d004      	beq.n	8005ffa <dir_alloc+0x50>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a1b      	ldr	r3, [r3, #32]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d107      	bne.n	800600a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	613b      	str	r3, [r7, #16]
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	429a      	cmp	r2, r3
 8006006:	d102      	bne.n	800600e <dir_alloc+0x64>
 8006008:	e00c      	b.n	8006024 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800600a:	2300      	movs	r3, #0
 800600c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800600e:	2101      	movs	r1, #1
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f7ff fef4 	bl	8005dfe <dir_next>
 8006016:	4603      	mov	r3, r0
 8006018:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800601a:	7dfb      	ldrb	r3, [r7, #23]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d0d7      	beq.n	8005fd0 <dir_alloc+0x26>
 8006020:	e000      	b.n	8006024 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006022:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006024:	7dfb      	ldrb	r3, [r7, #23]
 8006026:	2b04      	cmp	r3, #4
 8006028:	d101      	bne.n	800602e <dir_alloc+0x84>
 800602a:	2307      	movs	r3, #7
 800602c:	75fb      	strb	r3, [r7, #23]
	return res;
 800602e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006030:	4618      	mov	r0, r3
 8006032:	3718      	adds	r7, #24
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	331a      	adds	r3, #26
 8006046:	4618      	mov	r0, r3
 8006048:	f7fe ffbe 	bl	8004fc8 <ld_word>
 800604c:	4603      	mov	r3, r0
 800604e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	2b03      	cmp	r3, #3
 8006056:	d109      	bne.n	800606c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	3314      	adds	r3, #20
 800605c:	4618      	mov	r0, r3
 800605e:	f7fe ffb3 	bl	8004fc8 <ld_word>
 8006062:	4603      	mov	r3, r0
 8006064:	041b      	lsls	r3, r3, #16
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	4313      	orrs	r3, r2
 800606a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800606c:	68fb      	ldr	r3, [r7, #12]
}
 800606e:	4618      	mov	r0, r3
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}

08006076 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006076:	b580      	push	{r7, lr}
 8006078:	b084      	sub	sp, #16
 800607a:	af00      	add	r7, sp, #0
 800607c:	60f8      	str	r0, [r7, #12]
 800607e:	60b9      	str	r1, [r7, #8]
 8006080:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	331a      	adds	r3, #26
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	b292      	uxth	r2, r2
 800608a:	4611      	mov	r1, r2
 800608c:	4618      	mov	r0, r3
 800608e:	f7fe ffd6 	bl	800503e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	2b03      	cmp	r3, #3
 8006098:	d109      	bne.n	80060ae <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	f103 0214 	add.w	r2, r3, #20
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	0c1b      	lsrs	r3, r3, #16
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	4619      	mov	r1, r3
 80060a8:	4610      	mov	r0, r2
 80060aa:	f7fe ffc8 	bl	800503e <st_word>
	}
}
 80060ae:	bf00      	nop
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b086      	sub	sp, #24
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
 80060be:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80060c0:	2304      	movs	r3, #4
 80060c2:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80060ca:	e03c      	b.n	8006146 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	69db      	ldr	r3, [r3, #28]
 80060d0:	4619      	mov	r1, r3
 80060d2:	6938      	ldr	r0, [r7, #16]
 80060d4:	f7ff fa28 	bl	8005528 <move_window>
 80060d8:	4603      	mov	r3, r0
 80060da:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80060dc:	7dfb      	ldrb	r3, [r7, #23]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d136      	bne.n	8006150 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80060ea:	7bfb      	ldrb	r3, [r7, #15]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d102      	bne.n	80060f6 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80060f0:	2304      	movs	r3, #4
 80060f2:	75fb      	strb	r3, [r7, #23]
 80060f4:	e031      	b.n	800615a <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	330b      	adds	r3, #11
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006102:	73bb      	strb	r3, [r7, #14]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	7bba      	ldrb	r2, [r7, #14]
 8006108:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800610a:	7bfb      	ldrb	r3, [r7, #15]
 800610c:	2be5      	cmp	r3, #229	; 0xe5
 800610e:	d011      	beq.n	8006134 <dir_read+0x7e>
 8006110:	7bfb      	ldrb	r3, [r7, #15]
 8006112:	2b2e      	cmp	r3, #46	; 0x2e
 8006114:	d00e      	beq.n	8006134 <dir_read+0x7e>
 8006116:	7bbb      	ldrb	r3, [r7, #14]
 8006118:	2b0f      	cmp	r3, #15
 800611a:	d00b      	beq.n	8006134 <dir_read+0x7e>
 800611c:	7bbb      	ldrb	r3, [r7, #14]
 800611e:	f023 0320 	bic.w	r3, r3, #32
 8006122:	2b08      	cmp	r3, #8
 8006124:	bf0c      	ite	eq
 8006126:	2301      	moveq	r3, #1
 8006128:	2300      	movne	r3, #0
 800612a:	b2db      	uxtb	r3, r3
 800612c:	461a      	mov	r2, r3
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	4293      	cmp	r3, r2
 8006132:	d00f      	beq.n	8006154 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8006134:	2100      	movs	r1, #0
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f7ff fe61 	bl	8005dfe <dir_next>
 800613c:	4603      	mov	r3, r0
 800613e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006140:	7dfb      	ldrb	r3, [r7, #23]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d108      	bne.n	8006158 <dir_read+0xa2>
	while (dp->sect) {
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	69db      	ldr	r3, [r3, #28]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1be      	bne.n	80060cc <dir_read+0x16>
 800614e:	e004      	b.n	800615a <dir_read+0xa4>
		if (res != FR_OK) break;
 8006150:	bf00      	nop
 8006152:	e002      	b.n	800615a <dir_read+0xa4>
				break;
 8006154:	bf00      	nop
 8006156:	e000      	b.n	800615a <dir_read+0xa4>
		if (res != FR_OK) break;
 8006158:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800615a:	7dfb      	ldrb	r3, [r7, #23]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d002      	beq.n	8006166 <dir_read+0xb0>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	61da      	str	r2, [r3, #28]
	return res;
 8006166:	7dfb      	ldrb	r3, [r7, #23]
}
 8006168:	4618      	mov	r0, r3
 800616a:	3718      	adds	r7, #24
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b086      	sub	sp, #24
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800617e:	2100      	movs	r1, #0
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f7ff fdb3 	bl	8005cec <dir_sdi>
 8006186:	4603      	mov	r3, r0
 8006188:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800618a:	7dfb      	ldrb	r3, [r7, #23]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d001      	beq.n	8006194 <dir_find+0x24>
 8006190:	7dfb      	ldrb	r3, [r7, #23]
 8006192:	e03e      	b.n	8006212 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	69db      	ldr	r3, [r3, #28]
 8006198:	4619      	mov	r1, r3
 800619a:	6938      	ldr	r0, [r7, #16]
 800619c:	f7ff f9c4 	bl	8005528 <move_window>
 80061a0:	4603      	mov	r3, r0
 80061a2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80061a4:	7dfb      	ldrb	r3, [r7, #23]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d12f      	bne.n	800620a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a1b      	ldr	r3, [r3, #32]
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80061b2:	7bfb      	ldrb	r3, [r7, #15]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d102      	bne.n	80061be <dir_find+0x4e>
 80061b8:	2304      	movs	r3, #4
 80061ba:	75fb      	strb	r3, [r7, #23]
 80061bc:	e028      	b.n	8006210 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	330b      	adds	r3, #11
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061ca:	b2da      	uxtb	r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a1b      	ldr	r3, [r3, #32]
 80061d4:	330b      	adds	r3, #11
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	f003 0308 	and.w	r3, r3, #8
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10a      	bne.n	80061f6 <dir_find+0x86>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a18      	ldr	r0, [r3, #32]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	3324      	adds	r3, #36	; 0x24
 80061e8:	220b      	movs	r2, #11
 80061ea:	4619      	mov	r1, r3
 80061ec:	f7fe ffaa 	bl	8005144 <mem_cmp>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00b      	beq.n	800620e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80061f6:	2100      	movs	r1, #0
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f7ff fe00 	bl	8005dfe <dir_next>
 80061fe:	4603      	mov	r3, r0
 8006200:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006202:	7dfb      	ldrb	r3, [r7, #23]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d0c5      	beq.n	8006194 <dir_find+0x24>
 8006208:	e002      	b.n	8006210 <dir_find+0xa0>
		if (res != FR_OK) break;
 800620a:	bf00      	nop
 800620c:	e000      	b.n	8006210 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800620e:	bf00      	nop

	return res;
 8006210:	7dfb      	ldrb	r3, [r7, #23]
}
 8006212:	4618      	mov	r0, r3
 8006214:	3718      	adds	r7, #24
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800621a:	b580      	push	{r7, lr}
 800621c:	b084      	sub	sp, #16
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006228:	2101      	movs	r1, #1
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f7ff febd 	bl	8005faa <dir_alloc>
 8006230:	4603      	mov	r3, r0
 8006232:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006234:	7bfb      	ldrb	r3, [r7, #15]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d11c      	bne.n	8006274 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	69db      	ldr	r3, [r3, #28]
 800623e:	4619      	mov	r1, r3
 8006240:	68b8      	ldr	r0, [r7, #8]
 8006242:	f7ff f971 	bl	8005528 <move_window>
 8006246:	4603      	mov	r3, r0
 8006248:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800624a:	7bfb      	ldrb	r3, [r7, #15]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d111      	bne.n	8006274 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a1b      	ldr	r3, [r3, #32]
 8006254:	2220      	movs	r2, #32
 8006256:	2100      	movs	r1, #0
 8006258:	4618      	mov	r0, r3
 800625a:	f7fe ff58 	bl	800510e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a18      	ldr	r0, [r3, #32]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	3324      	adds	r3, #36	; 0x24
 8006266:	220b      	movs	r2, #11
 8006268:	4619      	mov	r1, r3
 800626a:	f7fe ff2f 	bl	80050cc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	2201      	movs	r2, #1
 8006272:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006274:	7bfb      	ldrb	r3, [r7, #15]
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b086      	sub	sp, #24
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
 8006286:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	2200      	movs	r2, #0
 800628c:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d04e      	beq.n	8006334 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8006296:	2300      	movs	r3, #0
 8006298:	613b      	str	r3, [r7, #16]
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800629e:	e021      	b.n	80062e4 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a1a      	ldr	r2, [r3, #32]
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	1c59      	adds	r1, r3, #1
 80062a8:	6179      	str	r1, [r7, #20]
 80062aa:	4413      	add	r3, r2
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80062b0:	7bfb      	ldrb	r3, [r7, #15]
 80062b2:	2b20      	cmp	r3, #32
 80062b4:	d100      	bne.n	80062b8 <get_fileinfo+0x3a>
 80062b6:	e015      	b.n	80062e4 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80062b8:	7bfb      	ldrb	r3, [r7, #15]
 80062ba:	2b05      	cmp	r3, #5
 80062bc:	d101      	bne.n	80062c2 <get_fileinfo+0x44>
 80062be:	23e5      	movs	r3, #229	; 0xe5
 80062c0:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	2b09      	cmp	r3, #9
 80062c6:	d106      	bne.n	80062d6 <get_fileinfo+0x58>
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	1c5a      	adds	r2, r3, #1
 80062cc:	613a      	str	r2, [r7, #16]
 80062ce:	683a      	ldr	r2, [r7, #0]
 80062d0:	4413      	add	r3, r2
 80062d2:	222e      	movs	r2, #46	; 0x2e
 80062d4:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	1c5a      	adds	r2, r3, #1
 80062da:	613a      	str	r2, [r7, #16]
 80062dc:	683a      	ldr	r2, [r7, #0]
 80062de:	4413      	add	r3, r2
 80062e0:	7bfa      	ldrb	r2, [r7, #15]
 80062e2:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	2b0a      	cmp	r3, #10
 80062e8:	d9da      	bls.n	80062a0 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 80062ea:	683a      	ldr	r2, [r7, #0]
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	4413      	add	r3, r2
 80062f0:	3309      	adds	r3, #9
 80062f2:	2200      	movs	r2, #0
 80062f4:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a1b      	ldr	r3, [r3, #32]
 80062fa:	7ada      	ldrb	r2, [r3, #11]
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a1b      	ldr	r3, [r3, #32]
 8006304:	331c      	adds	r3, #28
 8006306:	4618      	mov	r0, r3
 8006308:	f7fe fe76 	bl	8004ff8 <ld_dword>
 800630c:	4602      	mov	r2, r0
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	3316      	adds	r3, #22
 8006318:	4618      	mov	r0, r3
 800631a:	f7fe fe6d 	bl	8004ff8 <ld_dword>
 800631e:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	b29a      	uxth	r2, r3
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	80da      	strh	r2, [r3, #6]
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	0c1b      	lsrs	r3, r3, #16
 800632c:	b29a      	uxth	r2, r3
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	809a      	strh	r2, [r3, #4]
 8006332:	e000      	b.n	8006336 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006334:	bf00      	nop
}
 8006336:	3718      	adds	r7, #24
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b088      	sub	sp, #32
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	60fb      	str	r3, [r7, #12]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	3324      	adds	r3, #36	; 0x24
 8006350:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006352:	220b      	movs	r2, #11
 8006354:	2120      	movs	r1, #32
 8006356:	68b8      	ldr	r0, [r7, #8]
 8006358:	f7fe fed9 	bl	800510e <mem_set>
	si = i = 0; ni = 8;
 800635c:	2300      	movs	r3, #0
 800635e:	613b      	str	r3, [r7, #16]
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	61fb      	str	r3, [r7, #28]
 8006364:	2308      	movs	r3, #8
 8006366:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	1c5a      	adds	r2, r3, #1
 800636c:	61fa      	str	r2, [r7, #28]
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	4413      	add	r3, r2
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006376:	7efb      	ldrb	r3, [r7, #27]
 8006378:	2b20      	cmp	r3, #32
 800637a:	d94e      	bls.n	800641a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800637c:	7efb      	ldrb	r3, [r7, #27]
 800637e:	2b2f      	cmp	r3, #47	; 0x2f
 8006380:	d006      	beq.n	8006390 <create_name+0x54>
 8006382:	7efb      	ldrb	r3, [r7, #27]
 8006384:	2b5c      	cmp	r3, #92	; 0x5c
 8006386:	d110      	bne.n	80063aa <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006388:	e002      	b.n	8006390 <create_name+0x54>
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	3301      	adds	r3, #1
 800638e:	61fb      	str	r3, [r7, #28]
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	4413      	add	r3, r2
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	2b2f      	cmp	r3, #47	; 0x2f
 800639a:	d0f6      	beq.n	800638a <create_name+0x4e>
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	4413      	add	r3, r2
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	2b5c      	cmp	r3, #92	; 0x5c
 80063a6:	d0f0      	beq.n	800638a <create_name+0x4e>
			break;
 80063a8:	e038      	b.n	800641c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80063aa:	7efb      	ldrb	r3, [r7, #27]
 80063ac:	2b2e      	cmp	r3, #46	; 0x2e
 80063ae:	d003      	beq.n	80063b8 <create_name+0x7c>
 80063b0:	693a      	ldr	r2, [r7, #16]
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d30c      	bcc.n	80063d2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	2b0b      	cmp	r3, #11
 80063bc:	d002      	beq.n	80063c4 <create_name+0x88>
 80063be:	7efb      	ldrb	r3, [r7, #27]
 80063c0:	2b2e      	cmp	r3, #46	; 0x2e
 80063c2:	d001      	beq.n	80063c8 <create_name+0x8c>
 80063c4:	2306      	movs	r3, #6
 80063c6:	e044      	b.n	8006452 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80063c8:	2308      	movs	r3, #8
 80063ca:	613b      	str	r3, [r7, #16]
 80063cc:	230b      	movs	r3, #11
 80063ce:	617b      	str	r3, [r7, #20]
			continue;
 80063d0:	e022      	b.n	8006418 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80063d2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	da04      	bge.n	80063e4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80063da:	7efb      	ldrb	r3, [r7, #27]
 80063dc:	3b80      	subs	r3, #128	; 0x80
 80063de:	4a1f      	ldr	r2, [pc, #124]	; (800645c <create_name+0x120>)
 80063e0:	5cd3      	ldrb	r3, [r2, r3]
 80063e2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80063e4:	7efb      	ldrb	r3, [r7, #27]
 80063e6:	4619      	mov	r1, r3
 80063e8:	481d      	ldr	r0, [pc, #116]	; (8006460 <create_name+0x124>)
 80063ea:	f7fe fed2 	bl	8005192 <chk_chr>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d001      	beq.n	80063f8 <create_name+0xbc>
 80063f4:	2306      	movs	r3, #6
 80063f6:	e02c      	b.n	8006452 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80063f8:	7efb      	ldrb	r3, [r7, #27]
 80063fa:	2b60      	cmp	r3, #96	; 0x60
 80063fc:	d905      	bls.n	800640a <create_name+0xce>
 80063fe:	7efb      	ldrb	r3, [r7, #27]
 8006400:	2b7a      	cmp	r3, #122	; 0x7a
 8006402:	d802      	bhi.n	800640a <create_name+0xce>
 8006404:	7efb      	ldrb	r3, [r7, #27]
 8006406:	3b20      	subs	r3, #32
 8006408:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	1c5a      	adds	r2, r3, #1
 800640e:	613a      	str	r2, [r7, #16]
 8006410:	68ba      	ldr	r2, [r7, #8]
 8006412:	4413      	add	r3, r2
 8006414:	7efa      	ldrb	r2, [r7, #27]
 8006416:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006418:	e7a6      	b.n	8006368 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800641a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	441a      	add	r2, r3
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d101      	bne.n	8006430 <create_name+0xf4>
 800642c:	2306      	movs	r3, #6
 800642e:	e010      	b.n	8006452 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	2be5      	cmp	r3, #229	; 0xe5
 8006436:	d102      	bne.n	800643e <create_name+0x102>
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	2205      	movs	r2, #5
 800643c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800643e:	7efb      	ldrb	r3, [r7, #27]
 8006440:	2b20      	cmp	r3, #32
 8006442:	d801      	bhi.n	8006448 <create_name+0x10c>
 8006444:	2204      	movs	r2, #4
 8006446:	e000      	b.n	800644a <create_name+0x10e>
 8006448:	2200      	movs	r2, #0
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	330b      	adds	r3, #11
 800644e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006450:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006452:	4618      	mov	r0, r3
 8006454:	3720      	adds	r7, #32
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	080094d8 	.word	0x080094d8
 8006460:	08009460 	.word	0x08009460

08006464 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b086      	sub	sp, #24
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006478:	e002      	b.n	8006480 <follow_path+0x1c>
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	3301      	adds	r3, #1
 800647e:	603b      	str	r3, [r7, #0]
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	2b2f      	cmp	r3, #47	; 0x2f
 8006486:	d0f8      	beq.n	800647a <follow_path+0x16>
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	2b5c      	cmp	r3, #92	; 0x5c
 800648e:	d0f4      	beq.n	800647a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	2200      	movs	r2, #0
 8006494:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	2b1f      	cmp	r3, #31
 800649c:	d80a      	bhi.n	80064b4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2280      	movs	r2, #128	; 0x80
 80064a2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80064a6:	2100      	movs	r1, #0
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f7ff fc1f 	bl	8005cec <dir_sdi>
 80064ae:	4603      	mov	r3, r0
 80064b0:	75fb      	strb	r3, [r7, #23]
 80064b2:	e048      	b.n	8006546 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80064b4:	463b      	mov	r3, r7
 80064b6:	4619      	mov	r1, r3
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f7ff ff3f 	bl	800633c <create_name>
 80064be:	4603      	mov	r3, r0
 80064c0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80064c2:	7dfb      	ldrb	r3, [r7, #23]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d139      	bne.n	800653c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f7ff fe51 	bl	8006170 <dir_find>
 80064ce:	4603      	mov	r3, r0
 80064d0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80064d8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80064da:	7dfb      	ldrb	r3, [r7, #23]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00a      	beq.n	80064f6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80064e0:	7dfb      	ldrb	r3, [r7, #23]
 80064e2:	2b04      	cmp	r3, #4
 80064e4:	d12c      	bne.n	8006540 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80064e6:	7afb      	ldrb	r3, [r7, #11]
 80064e8:	f003 0304 	and.w	r3, r3, #4
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d127      	bne.n	8006540 <follow_path+0xdc>
 80064f0:	2305      	movs	r3, #5
 80064f2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80064f4:	e024      	b.n	8006540 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80064f6:	7afb      	ldrb	r3, [r7, #11]
 80064f8:	f003 0304 	and.w	r3, r3, #4
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d121      	bne.n	8006544 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	799b      	ldrb	r3, [r3, #6]
 8006504:	f003 0310 	and.w	r3, r3, #16
 8006508:	2b00      	cmp	r3, #0
 800650a:	d102      	bne.n	8006512 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800650c:	2305      	movs	r3, #5
 800650e:	75fb      	strb	r3, [r7, #23]
 8006510:	e019      	b.n	8006546 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	695b      	ldr	r3, [r3, #20]
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	8992      	ldrh	r2, [r2, #12]
 8006520:	fbb3 f0f2 	udiv	r0, r3, r2
 8006524:	fb02 f200 	mul.w	r2, r2, r0
 8006528:	1a9b      	subs	r3, r3, r2
 800652a:	440b      	add	r3, r1
 800652c:	4619      	mov	r1, r3
 800652e:	68f8      	ldr	r0, [r7, #12]
 8006530:	f7ff fd82 	bl	8006038 <ld_clust>
 8006534:	4602      	mov	r2, r0
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800653a:	e7bb      	b.n	80064b4 <follow_path+0x50>
			if (res != FR_OK) break;
 800653c:	bf00      	nop
 800653e:	e002      	b.n	8006546 <follow_path+0xe2>
				break;
 8006540:	bf00      	nop
 8006542:	e000      	b.n	8006546 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006544:	bf00      	nop
			}
		}
	}

	return res;
 8006546:	7dfb      	ldrb	r3, [r7, #23]
}
 8006548:	4618      	mov	r0, r3
 800654a:	3718      	adds	r7, #24
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006550:	b480      	push	{r7}
 8006552:	b087      	sub	sp, #28
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006558:	f04f 33ff 	mov.w	r3, #4294967295
 800655c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d031      	beq.n	80065ca <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	617b      	str	r3, [r7, #20]
 800656c:	e002      	b.n	8006574 <get_ldnumber+0x24>
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	3301      	adds	r3, #1
 8006572:	617b      	str	r3, [r7, #20]
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	2b20      	cmp	r3, #32
 800657a:	d903      	bls.n	8006584 <get_ldnumber+0x34>
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	2b3a      	cmp	r3, #58	; 0x3a
 8006582:	d1f4      	bne.n	800656e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	2b3a      	cmp	r3, #58	; 0x3a
 800658a:	d11c      	bne.n	80065c6 <get_ldnumber+0x76>
			tp = *path;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	1c5a      	adds	r2, r3, #1
 8006596:	60fa      	str	r2, [r7, #12]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	3b30      	subs	r3, #48	; 0x30
 800659c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	2b09      	cmp	r3, #9
 80065a2:	d80e      	bhi.n	80065c2 <get_ldnumber+0x72>
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d10a      	bne.n	80065c2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d107      	bne.n	80065c2 <get_ldnumber+0x72>
					vol = (int)i;
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	3301      	adds	r3, #1
 80065ba:	617b      	str	r3, [r7, #20]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	e002      	b.n	80065cc <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80065c6:	2300      	movs	r3, #0
 80065c8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80065ca:	693b      	ldr	r3, [r7, #16]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	371c      	adds	r7, #28
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	70da      	strb	r2, [r3, #3]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f04f 32ff 	mov.w	r2, #4294967295
 80065ee:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80065f0:	6839      	ldr	r1, [r7, #0]
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f7fe ff98 	bl	8005528 <move_window>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d001      	beq.n	8006602 <check_fs+0x2a>
 80065fe:	2304      	movs	r3, #4
 8006600:	e038      	b.n	8006674 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	3334      	adds	r3, #52	; 0x34
 8006606:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800660a:	4618      	mov	r0, r3
 800660c:	f7fe fcdc 	bl	8004fc8 <ld_word>
 8006610:	4603      	mov	r3, r0
 8006612:	461a      	mov	r2, r3
 8006614:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006618:	429a      	cmp	r2, r3
 800661a:	d001      	beq.n	8006620 <check_fs+0x48>
 800661c:	2303      	movs	r3, #3
 800661e:	e029      	b.n	8006674 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006626:	2be9      	cmp	r3, #233	; 0xe9
 8006628:	d009      	beq.n	800663e <check_fs+0x66>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006630:	2beb      	cmp	r3, #235	; 0xeb
 8006632:	d11e      	bne.n	8006672 <check_fs+0x9a>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800663a:	2b90      	cmp	r3, #144	; 0x90
 800663c:	d119      	bne.n	8006672 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	3334      	adds	r3, #52	; 0x34
 8006642:	3336      	adds	r3, #54	; 0x36
 8006644:	4618      	mov	r0, r3
 8006646:	f7fe fcd7 	bl	8004ff8 <ld_dword>
 800664a:	4603      	mov	r3, r0
 800664c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006650:	4a0a      	ldr	r2, [pc, #40]	; (800667c <check_fs+0xa4>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d101      	bne.n	800665a <check_fs+0x82>
 8006656:	2300      	movs	r3, #0
 8006658:	e00c      	b.n	8006674 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	3334      	adds	r3, #52	; 0x34
 800665e:	3352      	adds	r3, #82	; 0x52
 8006660:	4618      	mov	r0, r3
 8006662:	f7fe fcc9 	bl	8004ff8 <ld_dword>
 8006666:	4603      	mov	r3, r0
 8006668:	4a05      	ldr	r2, [pc, #20]	; (8006680 <check_fs+0xa8>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d101      	bne.n	8006672 <check_fs+0x9a>
 800666e:	2300      	movs	r3, #0
 8006670:	e000      	b.n	8006674 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006672:	2302      	movs	r3, #2
}
 8006674:	4618      	mov	r0, r3
 8006676:	3708      	adds	r7, #8
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	00544146 	.word	0x00544146
 8006680:	33544146 	.word	0x33544146

08006684 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b096      	sub	sp, #88	; 0x58
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	4613      	mov	r3, r2
 8006690:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	2200      	movs	r2, #0
 8006696:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f7ff ff59 	bl	8006550 <get_ldnumber>
 800669e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80066a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	da01      	bge.n	80066aa <find_volume+0x26>
 80066a6:	230b      	movs	r3, #11
 80066a8:	e265      	b.n	8006b76 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80066aa:	4ab0      	ldr	r2, [pc, #704]	; (800696c <find_volume+0x2e8>)
 80066ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066b2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80066b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d101      	bne.n	80066be <find_volume+0x3a>
 80066ba:	230c      	movs	r3, #12
 80066bc:	e25b      	b.n	8006b76 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066c2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80066c4:	79fb      	ldrb	r3, [r7, #7]
 80066c6:	f023 0301 	bic.w	r3, r3, #1
 80066ca:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80066cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d01a      	beq.n	800670a <find_volume+0x86>
		stat = disk_status(fs->drv);
 80066d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d6:	785b      	ldrb	r3, [r3, #1]
 80066d8:	4618      	mov	r0, r3
 80066da:	f7fe fc07 	bl	8004eec <disk_status>
 80066de:	4603      	mov	r3, r0
 80066e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80066e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80066e8:	f003 0301 	and.w	r3, r3, #1
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10c      	bne.n	800670a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80066f0:	79fb      	ldrb	r3, [r7, #7]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d007      	beq.n	8006706 <find_volume+0x82>
 80066f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80066fa:	f003 0304 	and.w	r3, r3, #4
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d001      	beq.n	8006706 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006702:	230a      	movs	r3, #10
 8006704:	e237      	b.n	8006b76 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8006706:	2300      	movs	r3, #0
 8006708:	e235      	b.n	8006b76 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800670a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800670c:	2200      	movs	r2, #0
 800670e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006712:	b2da      	uxtb	r2, r3
 8006714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006716:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800671a:	785b      	ldrb	r3, [r3, #1]
 800671c:	4618      	mov	r0, r3
 800671e:	f7fe fbf7 	bl	8004f10 <disk_initialize>
 8006722:	4603      	mov	r3, r0
 8006724:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006728:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800672c:	f003 0301 	and.w	r3, r3, #1
 8006730:	2b00      	cmp	r3, #0
 8006732:	d001      	beq.n	8006738 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006734:	2303      	movs	r3, #3
 8006736:	e21e      	b.n	8006b76 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006738:	79fb      	ldrb	r3, [r7, #7]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d007      	beq.n	800674e <find_volume+0xca>
 800673e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006742:	f003 0304 	and.w	r3, r3, #4
 8006746:	2b00      	cmp	r3, #0
 8006748:	d001      	beq.n	800674e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800674a:	230a      	movs	r3, #10
 800674c:	e213      	b.n	8006b76 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800674e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006750:	7858      	ldrb	r0, [r3, #1]
 8006752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006754:	330c      	adds	r3, #12
 8006756:	461a      	mov	r2, r3
 8006758:	2102      	movs	r1, #2
 800675a:	f7fe fc1d 	bl	8004f98 <disk_ioctl>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d001      	beq.n	8006768 <find_volume+0xe4>
 8006764:	2301      	movs	r3, #1
 8006766:	e206      	b.n	8006b76 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676a:	899b      	ldrh	r3, [r3, #12]
 800676c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006770:	d80d      	bhi.n	800678e <find_volume+0x10a>
 8006772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006774:	899b      	ldrh	r3, [r3, #12]
 8006776:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800677a:	d308      	bcc.n	800678e <find_volume+0x10a>
 800677c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677e:	899b      	ldrh	r3, [r3, #12]
 8006780:	461a      	mov	r2, r3
 8006782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006784:	899b      	ldrh	r3, [r3, #12]
 8006786:	3b01      	subs	r3, #1
 8006788:	4013      	ands	r3, r2
 800678a:	2b00      	cmp	r3, #0
 800678c:	d001      	beq.n	8006792 <find_volume+0x10e>
 800678e:	2301      	movs	r3, #1
 8006790:	e1f1      	b.n	8006b76 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006792:	2300      	movs	r3, #0
 8006794:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006796:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006798:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800679a:	f7ff ff1d 	bl	80065d8 <check_fs>
 800679e:	4603      	mov	r3, r0
 80067a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80067a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067a8:	2b02      	cmp	r3, #2
 80067aa:	d14b      	bne.n	8006844 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80067ac:	2300      	movs	r3, #0
 80067ae:	643b      	str	r3, [r7, #64]	; 0x40
 80067b0:	e01f      	b.n	80067f2 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80067b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80067b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067ba:	011b      	lsls	r3, r3, #4
 80067bc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80067c0:	4413      	add	r3, r2
 80067c2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80067c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c6:	3304      	adds	r3, #4
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d006      	beq.n	80067dc <find_volume+0x158>
 80067ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d0:	3308      	adds	r3, #8
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7fe fc10 	bl	8004ff8 <ld_dword>
 80067d8:	4602      	mov	r2, r0
 80067da:	e000      	b.n	80067de <find_volume+0x15a>
 80067dc:	2200      	movs	r2, #0
 80067de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80067e6:	440b      	add	r3, r1
 80067e8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80067ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067ee:	3301      	adds	r3, #1
 80067f0:	643b      	str	r3, [r7, #64]	; 0x40
 80067f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067f4:	2b03      	cmp	r3, #3
 80067f6:	d9dc      	bls.n	80067b2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80067f8:	2300      	movs	r3, #0
 80067fa:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80067fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d002      	beq.n	8006808 <find_volume+0x184>
 8006802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006804:	3b01      	subs	r3, #1
 8006806:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006810:	4413      	add	r3, r2
 8006812:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006816:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006818:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800681a:	2b00      	cmp	r3, #0
 800681c:	d005      	beq.n	800682a <find_volume+0x1a6>
 800681e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006820:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006822:	f7ff fed9 	bl	80065d8 <check_fs>
 8006826:	4603      	mov	r3, r0
 8006828:	e000      	b.n	800682c <find_volume+0x1a8>
 800682a:	2303      	movs	r3, #3
 800682c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006830:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006834:	2b01      	cmp	r3, #1
 8006836:	d905      	bls.n	8006844 <find_volume+0x1c0>
 8006838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800683a:	3301      	adds	r3, #1
 800683c:	643b      	str	r3, [r7, #64]	; 0x40
 800683e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006840:	2b03      	cmp	r3, #3
 8006842:	d9e1      	bls.n	8006808 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006844:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006848:	2b04      	cmp	r3, #4
 800684a:	d101      	bne.n	8006850 <find_volume+0x1cc>
 800684c:	2301      	movs	r3, #1
 800684e:	e192      	b.n	8006b76 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006850:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006854:	2b01      	cmp	r3, #1
 8006856:	d901      	bls.n	800685c <find_volume+0x1d8>
 8006858:	230d      	movs	r3, #13
 800685a:	e18c      	b.n	8006b76 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800685c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800685e:	3334      	adds	r3, #52	; 0x34
 8006860:	330b      	adds	r3, #11
 8006862:	4618      	mov	r0, r3
 8006864:	f7fe fbb0 	bl	8004fc8 <ld_word>
 8006868:	4603      	mov	r3, r0
 800686a:	461a      	mov	r2, r3
 800686c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800686e:	899b      	ldrh	r3, [r3, #12]
 8006870:	429a      	cmp	r2, r3
 8006872:	d001      	beq.n	8006878 <find_volume+0x1f4>
 8006874:	230d      	movs	r3, #13
 8006876:	e17e      	b.n	8006b76 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800687a:	3334      	adds	r3, #52	; 0x34
 800687c:	3316      	adds	r3, #22
 800687e:	4618      	mov	r0, r3
 8006880:	f7fe fba2 	bl	8004fc8 <ld_word>
 8006884:	4603      	mov	r3, r0
 8006886:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800688a:	2b00      	cmp	r3, #0
 800688c:	d106      	bne.n	800689c <find_volume+0x218>
 800688e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006890:	3334      	adds	r3, #52	; 0x34
 8006892:	3324      	adds	r3, #36	; 0x24
 8006894:	4618      	mov	r0, r3
 8006896:	f7fe fbaf 	bl	8004ff8 <ld_dword>
 800689a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800689c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800689e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80068a0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80068a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80068a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068aa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80068ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ae:	789b      	ldrb	r3, [r3, #2]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d005      	beq.n	80068c0 <find_volume+0x23c>
 80068b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b6:	789b      	ldrb	r3, [r3, #2]
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d001      	beq.n	80068c0 <find_volume+0x23c>
 80068bc:	230d      	movs	r3, #13
 80068be:	e15a      	b.n	8006b76 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80068c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c2:	789b      	ldrb	r3, [r3, #2]
 80068c4:	461a      	mov	r2, r3
 80068c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068c8:	fb02 f303 	mul.w	r3, r2, r3
 80068cc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80068ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80068da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068dc:	895b      	ldrh	r3, [r3, #10]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d008      	beq.n	80068f4 <find_volume+0x270>
 80068e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e4:	895b      	ldrh	r3, [r3, #10]
 80068e6:	461a      	mov	r2, r3
 80068e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ea:	895b      	ldrh	r3, [r3, #10]
 80068ec:	3b01      	subs	r3, #1
 80068ee:	4013      	ands	r3, r2
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d001      	beq.n	80068f8 <find_volume+0x274>
 80068f4:	230d      	movs	r3, #13
 80068f6:	e13e      	b.n	8006b76 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80068f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fa:	3334      	adds	r3, #52	; 0x34
 80068fc:	3311      	adds	r3, #17
 80068fe:	4618      	mov	r0, r3
 8006900:	f7fe fb62 	bl	8004fc8 <ld_word>
 8006904:	4603      	mov	r3, r0
 8006906:	461a      	mov	r2, r3
 8006908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800690c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690e:	891b      	ldrh	r3, [r3, #8]
 8006910:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006912:	8992      	ldrh	r2, [r2, #12]
 8006914:	0952      	lsrs	r2, r2, #5
 8006916:	b292      	uxth	r2, r2
 8006918:	fbb3 f1f2 	udiv	r1, r3, r2
 800691c:	fb02 f201 	mul.w	r2, r2, r1
 8006920:	1a9b      	subs	r3, r3, r2
 8006922:	b29b      	uxth	r3, r3
 8006924:	2b00      	cmp	r3, #0
 8006926:	d001      	beq.n	800692c <find_volume+0x2a8>
 8006928:	230d      	movs	r3, #13
 800692a:	e124      	b.n	8006b76 <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800692c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800692e:	3334      	adds	r3, #52	; 0x34
 8006930:	3313      	adds	r3, #19
 8006932:	4618      	mov	r0, r3
 8006934:	f7fe fb48 	bl	8004fc8 <ld_word>
 8006938:	4603      	mov	r3, r0
 800693a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800693c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800693e:	2b00      	cmp	r3, #0
 8006940:	d106      	bne.n	8006950 <find_volume+0x2cc>
 8006942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006944:	3334      	adds	r3, #52	; 0x34
 8006946:	3320      	adds	r3, #32
 8006948:	4618      	mov	r0, r3
 800694a:	f7fe fb55 	bl	8004ff8 <ld_dword>
 800694e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006952:	3334      	adds	r3, #52	; 0x34
 8006954:	330e      	adds	r3, #14
 8006956:	4618      	mov	r0, r3
 8006958:	f7fe fb36 	bl	8004fc8 <ld_word>
 800695c:	4603      	mov	r3, r0
 800695e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006960:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006962:	2b00      	cmp	r3, #0
 8006964:	d104      	bne.n	8006970 <find_volume+0x2ec>
 8006966:	230d      	movs	r3, #13
 8006968:	e105      	b.n	8006b76 <find_volume+0x4f2>
 800696a:	bf00      	nop
 800696c:	200000cc 	.word	0x200000cc

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006970:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006974:	4413      	add	r3, r2
 8006976:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006978:	8911      	ldrh	r1, [r2, #8]
 800697a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800697c:	8992      	ldrh	r2, [r2, #12]
 800697e:	0952      	lsrs	r2, r2, #5
 8006980:	b292      	uxth	r2, r2
 8006982:	fbb1 f2f2 	udiv	r2, r1, r2
 8006986:	b292      	uxth	r2, r2
 8006988:	4413      	add	r3, r2
 800698a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800698c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800698e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006990:	429a      	cmp	r2, r3
 8006992:	d201      	bcs.n	8006998 <find_volume+0x314>
 8006994:	230d      	movs	r3, #13
 8006996:	e0ee      	b.n	8006b76 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006998:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800699a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069a0:	8952      	ldrh	r2, [r2, #10]
 80069a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80069a6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80069a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d101      	bne.n	80069b2 <find_volume+0x32e>
 80069ae:	230d      	movs	r3, #13
 80069b0:	e0e1      	b.n	8006b76 <find_volume+0x4f2>
		fmt = FS_FAT32;
 80069b2:	2303      	movs	r3, #3
 80069b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80069b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ba:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80069be:	4293      	cmp	r3, r2
 80069c0:	d802      	bhi.n	80069c8 <find_volume+0x344>
 80069c2:	2302      	movs	r3, #2
 80069c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80069c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ca:	f640 72f5 	movw	r2, #4085	; 0xff5
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d802      	bhi.n	80069d8 <find_volume+0x354>
 80069d2:	2301      	movs	r3, #1
 80069d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80069d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069da:	1c9a      	adds	r2, r3, #2
 80069dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069de:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80069e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80069e4:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80069e6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80069e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069ea:	441a      	add	r2, r3
 80069ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ee:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80069f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80069f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f4:	441a      	add	r2, r3
 80069f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f8:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80069fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80069fe:	2b03      	cmp	r3, #3
 8006a00:	d11e      	bne.n	8006a40 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a04:	3334      	adds	r3, #52	; 0x34
 8006a06:	332a      	adds	r3, #42	; 0x2a
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7fe fadd 	bl	8004fc8 <ld_word>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d001      	beq.n	8006a18 <find_volume+0x394>
 8006a14:	230d      	movs	r3, #13
 8006a16:	e0ae      	b.n	8006b76 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1a:	891b      	ldrh	r3, [r3, #8]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d001      	beq.n	8006a24 <find_volume+0x3a0>
 8006a20:	230d      	movs	r3, #13
 8006a22:	e0a8      	b.n	8006b76 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a26:	3334      	adds	r3, #52	; 0x34
 8006a28:	332c      	adds	r3, #44	; 0x2c
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7fe fae4 	bl	8004ff8 <ld_dword>
 8006a30:	4602      	mov	r2, r0
 8006a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a34:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	647b      	str	r3, [r7, #68]	; 0x44
 8006a3e:	e01f      	b.n	8006a80 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a42:	891b      	ldrh	r3, [r3, #8]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d101      	bne.n	8006a4c <find_volume+0x3c8>
 8006a48:	230d      	movs	r3, #13
 8006a4a:	e094      	b.n	8006b76 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a52:	441a      	add	r2, r3
 8006a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a56:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006a58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	d103      	bne.n	8006a68 <find_volume+0x3e4>
 8006a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	005b      	lsls	r3, r3, #1
 8006a66:	e00a      	b.n	8006a7e <find_volume+0x3fa>
 8006a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6a:	699a      	ldr	r2, [r3, #24]
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	005b      	lsls	r3, r3, #1
 8006a70:	4413      	add	r3, r2
 8006a72:	085a      	lsrs	r2, r3, #1
 8006a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a76:	699b      	ldr	r3, [r3, #24]
 8006a78:	f003 0301 	and.w	r3, r3, #1
 8006a7c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006a7e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a82:	69da      	ldr	r2, [r3, #28]
 8006a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a86:	899b      	ldrh	r3, [r3, #12]
 8006a88:	4619      	mov	r1, r3
 8006a8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a8c:	440b      	add	r3, r1
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006a92:	8989      	ldrh	r1, [r1, #12]
 8006a94:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d201      	bcs.n	8006aa0 <find_volume+0x41c>
 8006a9c:	230d      	movs	r3, #13
 8006a9e:	e06a      	b.n	8006b76 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8006aa6:	615a      	str	r2, [r3, #20]
 8006aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aaa:	695a      	ldr	r2, [r3, #20]
 8006aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aae:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8006ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab2:	2280      	movs	r2, #128	; 0x80
 8006ab4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006ab6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006aba:	2b03      	cmp	r3, #3
 8006abc:	d149      	bne.n	8006b52 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac0:	3334      	adds	r3, #52	; 0x34
 8006ac2:	3330      	adds	r3, #48	; 0x30
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7fe fa7f 	bl	8004fc8 <ld_word>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d140      	bne.n	8006b52 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006ad0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006ad8:	f7fe fd26 	bl	8005528 <move_window>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d137      	bne.n	8006b52 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8006ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aea:	3334      	adds	r3, #52	; 0x34
 8006aec:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006af0:	4618      	mov	r0, r3
 8006af2:	f7fe fa69 	bl	8004fc8 <ld_word>
 8006af6:	4603      	mov	r3, r0
 8006af8:	461a      	mov	r2, r3
 8006afa:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d127      	bne.n	8006b52 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b04:	3334      	adds	r3, #52	; 0x34
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7fe fa76 	bl	8004ff8 <ld_dword>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	4a1c      	ldr	r2, [pc, #112]	; (8006b80 <find_volume+0x4fc>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d11e      	bne.n	8006b52 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b16:	3334      	adds	r3, #52	; 0x34
 8006b18:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7fe fa6b 	bl	8004ff8 <ld_dword>
 8006b22:	4603      	mov	r3, r0
 8006b24:	4a17      	ldr	r2, [pc, #92]	; (8006b84 <find_volume+0x500>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d113      	bne.n	8006b52 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b2c:	3334      	adds	r3, #52	; 0x34
 8006b2e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7fe fa60 	bl	8004ff8 <ld_dword>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b40:	3334      	adds	r3, #52	; 0x34
 8006b42:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7fe fa56 	bl	8004ff8 <ld_dword>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b50:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b54:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006b58:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006b5a:	4b0b      	ldr	r3, [pc, #44]	; (8006b88 <find_volume+0x504>)
 8006b5c:	881b      	ldrh	r3, [r3, #0]
 8006b5e:	3301      	adds	r3, #1
 8006b60:	b29a      	uxth	r2, r3
 8006b62:	4b09      	ldr	r3, [pc, #36]	; (8006b88 <find_volume+0x504>)
 8006b64:	801a      	strh	r2, [r3, #0]
 8006b66:	4b08      	ldr	r3, [pc, #32]	; (8006b88 <find_volume+0x504>)
 8006b68:	881a      	ldrh	r2, [r3, #0]
 8006b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006b6e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006b70:	f7fe fc72 	bl	8005458 <clear_lock>
#endif
	return FR_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3758      	adds	r7, #88	; 0x58
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	41615252 	.word	0x41615252
 8006b84:	61417272 	.word	0x61417272
 8006b88:	200000d0 	.word	0x200000d0

08006b8c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006b96:	2309      	movs	r3, #9
 8006b98:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d01c      	beq.n	8006bda <validate+0x4e>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d018      	beq.n	8006bda <validate+0x4e>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d013      	beq.n	8006bda <validate+0x4e>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	889a      	ldrh	r2, [r3, #4]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	88db      	ldrh	r3, [r3, #6]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d10c      	bne.n	8006bda <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	785b      	ldrb	r3, [r3, #1]
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7fe f990 	bl	8004eec <disk_status>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	f003 0301 	and.w	r3, r3, #1
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d101      	bne.n	8006bda <validate+0x4e>
			res = FR_OK;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006bda:	7bfb      	ldrb	r3, [r7, #15]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d102      	bne.n	8006be6 <validate+0x5a>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	e000      	b.n	8006be8 <validate+0x5c>
 8006be6:	2300      	movs	r3, #0
 8006be8:	683a      	ldr	r2, [r7, #0]
 8006bea:	6013      	str	r3, [r2, #0]
	return res;
 8006bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
	...

08006bf8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b088      	sub	sp, #32
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	4613      	mov	r3, r2
 8006c04:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006c0a:	f107 0310 	add.w	r3, r7, #16
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f7ff fc9e 	bl	8006550 <get_ldnumber>
 8006c14:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	da01      	bge.n	8006c20 <f_mount+0x28>
 8006c1c:	230b      	movs	r3, #11
 8006c1e:	e02b      	b.n	8006c78 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006c20:	4a17      	ldr	r2, [pc, #92]	; (8006c80 <f_mount+0x88>)
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c28:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d005      	beq.n	8006c3c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006c30:	69b8      	ldr	r0, [r7, #24]
 8006c32:	f7fe fc11 	bl	8005458 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d002      	beq.n	8006c48 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	490d      	ldr	r1, [pc, #52]	; (8006c80 <f_mount+0x88>)
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d002      	beq.n	8006c5e <f_mount+0x66>
 8006c58:	79fb      	ldrb	r3, [r7, #7]
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d001      	beq.n	8006c62 <f_mount+0x6a>
 8006c5e:	2300      	movs	r3, #0
 8006c60:	e00a      	b.n	8006c78 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006c62:	f107 010c 	add.w	r1, r7, #12
 8006c66:	f107 0308 	add.w	r3, r7, #8
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f7ff fd09 	bl	8006684 <find_volume>
 8006c72:	4603      	mov	r3, r0
 8006c74:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3720      	adds	r7, #32
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	200000cc 	.word	0x200000cc

08006c84 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b098      	sub	sp, #96	; 0x60
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	4613      	mov	r3, r2
 8006c90:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d101      	bne.n	8006c9c <f_open+0x18>
 8006c98:	2309      	movs	r3, #9
 8006c9a:	e1bb      	b.n	8007014 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006c9c:	79fb      	ldrb	r3, [r7, #7]
 8006c9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ca2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006ca4:	79fa      	ldrb	r2, [r7, #7]
 8006ca6:	f107 0110 	add.w	r1, r7, #16
 8006caa:	f107 0308 	add.w	r3, r7, #8
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7ff fce8 	bl	8006684 <find_volume>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8006cba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f040 819f 	bne.w	8007002 <f_open+0x37e>
		dj.obj.fs = fs;
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	f107 0314 	add.w	r3, r7, #20
 8006cce:	4611      	mov	r1, r2
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f7ff fbc7 	bl	8006464 <follow_path>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006cdc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d11a      	bne.n	8006d1a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006ce4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006ce8:	b25b      	sxtb	r3, r3
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	da03      	bge.n	8006cf6 <f_open+0x72>
				res = FR_INVALID_NAME;
 8006cee:	2306      	movs	r3, #6
 8006cf0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006cf4:	e011      	b.n	8006d1a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006cf6:	79fb      	ldrb	r3, [r7, #7]
 8006cf8:	f023 0301 	bic.w	r3, r3, #1
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	bf14      	ite	ne
 8006d00:	2301      	movne	r3, #1
 8006d02:	2300      	moveq	r3, #0
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	461a      	mov	r2, r3
 8006d08:	f107 0314 	add.w	r3, r7, #20
 8006d0c:	4611      	mov	r1, r2
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f7fe fa5a 	bl	80051c8 <chk_lock>
 8006d14:	4603      	mov	r3, r0
 8006d16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006d1a:	79fb      	ldrb	r3, [r7, #7]
 8006d1c:	f003 031c 	and.w	r3, r3, #28
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d07f      	beq.n	8006e24 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006d24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d017      	beq.n	8006d5c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006d2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d30:	2b04      	cmp	r3, #4
 8006d32:	d10e      	bne.n	8006d52 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006d34:	f7fe faa4 	bl	8005280 <enq_lock>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d006      	beq.n	8006d4c <f_open+0xc8>
 8006d3e:	f107 0314 	add.w	r3, r7, #20
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7ff fa69 	bl	800621a <dir_register>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	e000      	b.n	8006d4e <f_open+0xca>
 8006d4c:	2312      	movs	r3, #18
 8006d4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006d52:	79fb      	ldrb	r3, [r7, #7]
 8006d54:	f043 0308 	orr.w	r3, r3, #8
 8006d58:	71fb      	strb	r3, [r7, #7]
 8006d5a:	e010      	b.n	8006d7e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006d5c:	7ebb      	ldrb	r3, [r7, #26]
 8006d5e:	f003 0311 	and.w	r3, r3, #17
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d003      	beq.n	8006d6e <f_open+0xea>
					res = FR_DENIED;
 8006d66:	2307      	movs	r3, #7
 8006d68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006d6c:	e007      	b.n	8006d7e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006d6e:	79fb      	ldrb	r3, [r7, #7]
 8006d70:	f003 0304 	and.w	r3, r3, #4
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d002      	beq.n	8006d7e <f_open+0xfa>
 8006d78:	2308      	movs	r3, #8
 8006d7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006d7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d168      	bne.n	8006e58 <f_open+0x1d4>
 8006d86:	79fb      	ldrb	r3, [r7, #7]
 8006d88:	f003 0308 	and.w	r3, r3, #8
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d063      	beq.n	8006e58 <f_open+0x1d4>
				dw = GET_FATTIME();
 8006d90:	f7fe f84c 	bl	8004e2c <get_fattime>
 8006d94:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d98:	330e      	adds	r3, #14
 8006d9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f7fe f969 	bl	8005074 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006da4:	3316      	adds	r3, #22
 8006da6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006da8:	4618      	mov	r0, r3
 8006daa:	f7fe f963 	bl	8005074 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006db0:	330b      	adds	r3, #11
 8006db2:	2220      	movs	r2, #32
 8006db4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006dba:	4611      	mov	r1, r2
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f7ff f93b 	bl	8006038 <ld_clust>
 8006dc2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006dc8:	2200      	movs	r2, #0
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7ff f953 	bl	8006076 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dd2:	331c      	adds	r3, #28
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7fe f94c 	bl	8005074 <st_dword>
					fs->wflag = 1;
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	2201      	movs	r2, #1
 8006de0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d037      	beq.n	8006e58 <f_open+0x1d4>
						dw = fs->winsect;
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dec:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8006dee:	f107 0314 	add.w	r3, r7, #20
 8006df2:	2200      	movs	r2, #0
 8006df4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7fe fe43 	bl	8005a82 <remove_chain>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8006e02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d126      	bne.n	8006e58 <f_open+0x1d4>
							res = move_window(fs, dw);
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7fe fb8a 	bl	8005528 <move_window>
 8006e14:	4603      	mov	r3, r0
 8006e16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e1e:	3a01      	subs	r2, #1
 8006e20:	611a      	str	r2, [r3, #16]
 8006e22:	e019      	b.n	8006e58 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006e24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d115      	bne.n	8006e58 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006e2c:	7ebb      	ldrb	r3, [r7, #26]
 8006e2e:	f003 0310 	and.w	r3, r3, #16
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d003      	beq.n	8006e3e <f_open+0x1ba>
					res = FR_NO_FILE;
 8006e36:	2304      	movs	r3, #4
 8006e38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006e3c:	e00c      	b.n	8006e58 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006e3e:	79fb      	ldrb	r3, [r7, #7]
 8006e40:	f003 0302 	and.w	r3, r3, #2
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d007      	beq.n	8006e58 <f_open+0x1d4>
 8006e48:	7ebb      	ldrb	r3, [r7, #26]
 8006e4a:	f003 0301 	and.w	r3, r3, #1
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d002      	beq.n	8006e58 <f_open+0x1d4>
						res = FR_DENIED;
 8006e52:	2307      	movs	r3, #7
 8006e54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8006e58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d128      	bne.n	8006eb2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006e60:	79fb      	ldrb	r3, [r7, #7]
 8006e62:	f003 0308 	and.w	r3, r3, #8
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d003      	beq.n	8006e72 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8006e6a:	79fb      	ldrb	r3, [r7, #7]
 8006e6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e70:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006e7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006e80:	79fb      	ldrb	r3, [r7, #7]
 8006e82:	f023 0301 	bic.w	r3, r3, #1
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	bf14      	ite	ne
 8006e8a:	2301      	movne	r3, #1
 8006e8c:	2300      	moveq	r3, #0
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	461a      	mov	r2, r3
 8006e92:	f107 0314 	add.w	r3, r7, #20
 8006e96:	4611      	mov	r1, r2
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f7fe fa13 	bl	80052c4 <inc_lock>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d102      	bne.n	8006eb2 <f_open+0x22e>
 8006eac:	2302      	movs	r3, #2
 8006eae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006eb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f040 80a3 	bne.w	8007002 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ec0:	4611      	mov	r1, r2
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7ff f8b8 	bl	8006038 <ld_clust>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ed0:	331c      	adds	r3, #28
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7fe f890 	bl	8004ff8 <ld_dword>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006ee4:	693a      	ldr	r2, [r7, #16]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	88da      	ldrh	r2, [r3, #6]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	79fa      	ldrb	r2, [r7, #7]
 8006ef6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2200      	movs	r2, #0
 8006f08:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	3330      	adds	r3, #48	; 0x30
 8006f0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006f12:	2100      	movs	r1, #0
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7fe f8fa 	bl	800510e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006f1a:	79fb      	ldrb	r3, [r7, #7]
 8006f1c:	f003 0320 	and.w	r3, r3, #32
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d06e      	beq.n	8007002 <f_open+0x37e>
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d06a      	beq.n	8007002 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	68da      	ldr	r2, [r3, #12]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	895b      	ldrh	r3, [r3, #10]
 8006f38:	461a      	mov	r2, r3
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	899b      	ldrh	r3, [r3, #12]
 8006f3e:	fb03 f302 	mul.w	r3, r3, r2
 8006f42:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	657b      	str	r3, [r7, #84]	; 0x54
 8006f50:	e016      	b.n	8006f80 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f56:	4618      	mov	r0, r3
 8006f58:	f7fe fba3 	bl	80056a2 <get_fat>
 8006f5c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8006f5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d802      	bhi.n	8006f6a <f_open+0x2e6>
 8006f64:	2302      	movs	r3, #2
 8006f66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006f6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f70:	d102      	bne.n	8006f78 <f_open+0x2f4>
 8006f72:	2301      	movs	r3, #1
 8006f74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006f78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006f7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	657b      	str	r3, [r7, #84]	; 0x54
 8006f80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d103      	bne.n	8006f90 <f_open+0x30c>
 8006f88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d8e0      	bhi.n	8006f52 <f_open+0x2ce>
				}
				fp->clust = clst;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f94:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006f96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d131      	bne.n	8007002 <f_open+0x37e>
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	899b      	ldrh	r3, [r3, #12]
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fa6:	fbb3 f1f2 	udiv	r1, r3, r2
 8006faa:	fb02 f201 	mul.w	r2, r2, r1
 8006fae:	1a9b      	subs	r3, r3, r2
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d026      	beq.n	8007002 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f7fe fb53 	bl	8005664 <clust2sect>
 8006fbe:	6478      	str	r0, [r7, #68]	; 0x44
 8006fc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d103      	bne.n	8006fce <f_open+0x34a>
						res = FR_INT_ERR;
 8006fc6:	2302      	movs	r3, #2
 8006fc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006fcc:	e019      	b.n	8007002 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	899b      	ldrh	r3, [r3, #12]
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fd6:	fbb3 f2f2 	udiv	r2, r3, r2
 8006fda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fdc:	441a      	add	r2, r3
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	7858      	ldrb	r0, [r3, #1]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6a1a      	ldr	r2, [r3, #32]
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	f7fd ffa1 	bl	8004f38 <disk_read>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d002      	beq.n	8007002 <f_open+0x37e>
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007002:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007006:	2b00      	cmp	r3, #0
 8007008:	d002      	beq.n	8007010 <f_open+0x38c>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2200      	movs	r2, #0
 800700e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007010:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8007014:	4618      	mov	r0, r3
 8007016:	3760      	adds	r7, #96	; 0x60
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b08e      	sub	sp, #56	; 0x38
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
 8007028:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	2200      	movs	r2, #0
 8007032:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f107 0214 	add.w	r2, r7, #20
 800703a:	4611      	mov	r1, r2
 800703c:	4618      	mov	r0, r3
 800703e:	f7ff fda5 	bl	8006b8c <validate>
 8007042:	4603      	mov	r3, r0
 8007044:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007048:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800704c:	2b00      	cmp	r3, #0
 800704e:	d107      	bne.n	8007060 <f_read+0x44>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	7d5b      	ldrb	r3, [r3, #21]
 8007054:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007058:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800705c:	2b00      	cmp	r3, #0
 800705e:	d002      	beq.n	8007066 <f_read+0x4a>
 8007060:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007064:	e135      	b.n	80072d2 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	7d1b      	ldrb	r3, [r3, #20]
 800706a:	f003 0301 	and.w	r3, r3, #1
 800706e:	2b00      	cmp	r3, #0
 8007070:	d101      	bne.n	8007076 <f_read+0x5a>
 8007072:	2307      	movs	r3, #7
 8007074:	e12d      	b.n	80072d2 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	68da      	ldr	r2, [r3, #12]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	699b      	ldr	r3, [r3, #24]
 800707e:	1ad3      	subs	r3, r2, r3
 8007080:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	6a3b      	ldr	r3, [r7, #32]
 8007086:	429a      	cmp	r2, r3
 8007088:	f240 811e 	bls.w	80072c8 <f_read+0x2ac>
 800708c:	6a3b      	ldr	r3, [r7, #32]
 800708e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007090:	e11a      	b.n	80072c8 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	699b      	ldr	r3, [r3, #24]
 8007096:	697a      	ldr	r2, [r7, #20]
 8007098:	8992      	ldrh	r2, [r2, #12]
 800709a:	fbb3 f1f2 	udiv	r1, r3, r2
 800709e:	fb02 f201 	mul.w	r2, r2, r1
 80070a2:	1a9b      	subs	r3, r3, r2
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f040 80d5 	bne.w	8007254 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	699b      	ldr	r3, [r3, #24]
 80070ae:	697a      	ldr	r2, [r7, #20]
 80070b0:	8992      	ldrh	r2, [r2, #12]
 80070b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80070b6:	697a      	ldr	r2, [r7, #20]
 80070b8:	8952      	ldrh	r2, [r2, #10]
 80070ba:	3a01      	subs	r2, #1
 80070bc:	4013      	ands	r3, r2
 80070be:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d12f      	bne.n	8007126 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	699b      	ldr	r3, [r3, #24]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d103      	bne.n	80070d6 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	633b      	str	r3, [r7, #48]	; 0x30
 80070d4:	e013      	b.n	80070fe <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d007      	beq.n	80070ee <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	699b      	ldr	r3, [r3, #24]
 80070e2:	4619      	mov	r1, r3
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f7fe fdc9 	bl	8005c7c <clmt_clust>
 80070ea:	6338      	str	r0, [r7, #48]	; 0x30
 80070ec:	e007      	b.n	80070fe <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80070ee:	68fa      	ldr	r2, [r7, #12]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	69db      	ldr	r3, [r3, #28]
 80070f4:	4619      	mov	r1, r3
 80070f6:	4610      	mov	r0, r2
 80070f8:	f7fe fad3 	bl	80056a2 <get_fat>
 80070fc:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80070fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007100:	2b01      	cmp	r3, #1
 8007102:	d804      	bhi.n	800710e <f_read+0xf2>
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2202      	movs	r2, #2
 8007108:	755a      	strb	r2, [r3, #21]
 800710a:	2302      	movs	r3, #2
 800710c:	e0e1      	b.n	80072d2 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800710e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007114:	d104      	bne.n	8007120 <f_read+0x104>
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2201      	movs	r2, #1
 800711a:	755a      	strb	r2, [r3, #21]
 800711c:	2301      	movs	r3, #1
 800711e:	e0d8      	b.n	80072d2 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007124:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007126:	697a      	ldr	r2, [r7, #20]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	69db      	ldr	r3, [r3, #28]
 800712c:	4619      	mov	r1, r3
 800712e:	4610      	mov	r0, r2
 8007130:	f7fe fa98 	bl	8005664 <clust2sect>
 8007134:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d104      	bne.n	8007146 <f_read+0x12a>
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2202      	movs	r2, #2
 8007140:	755a      	strb	r2, [r3, #21]
 8007142:	2302      	movs	r3, #2
 8007144:	e0c5      	b.n	80072d2 <f_read+0x2b6>
			sect += csect;
 8007146:	69ba      	ldr	r2, [r7, #24]
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	4413      	add	r3, r2
 800714c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	899b      	ldrh	r3, [r3, #12]
 8007152:	461a      	mov	r2, r3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	fbb3 f3f2 	udiv	r3, r3, r2
 800715a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800715c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800715e:	2b00      	cmp	r3, #0
 8007160:	d041      	beq.n	80071e6 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007162:	69fa      	ldr	r2, [r7, #28]
 8007164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007166:	4413      	add	r3, r2
 8007168:	697a      	ldr	r2, [r7, #20]
 800716a:	8952      	ldrh	r2, [r2, #10]
 800716c:	4293      	cmp	r3, r2
 800716e:	d905      	bls.n	800717c <f_read+0x160>
					cc = fs->csize - csect;
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	895b      	ldrh	r3, [r3, #10]
 8007174:	461a      	mov	r2, r3
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	7858      	ldrb	r0, [r3, #1]
 8007180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007182:	69ba      	ldr	r2, [r7, #24]
 8007184:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007186:	f7fd fed7 	bl	8004f38 <disk_read>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d004      	beq.n	800719a <f_read+0x17e>
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2201      	movs	r2, #1
 8007194:	755a      	strb	r2, [r3, #21]
 8007196:	2301      	movs	r3, #1
 8007198:	e09b      	b.n	80072d2 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	7d1b      	ldrb	r3, [r3, #20]
 800719e:	b25b      	sxtb	r3, r3
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	da18      	bge.n	80071d6 <f_read+0x1ba>
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6a1a      	ldr	r2, [r3, #32]
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	1ad3      	subs	r3, r2, r3
 80071ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d911      	bls.n	80071d6 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6a1a      	ldr	r2, [r3, #32]
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	697a      	ldr	r2, [r7, #20]
 80071bc:	8992      	ldrh	r2, [r2, #12]
 80071be:	fb02 f303 	mul.w	r3, r2, r3
 80071c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071c4:	18d0      	adds	r0, r2, r3
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	899b      	ldrh	r3, [r3, #12]
 80071d0:	461a      	mov	r2, r3
 80071d2:	f7fd ff7b 	bl	80050cc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	899b      	ldrh	r3, [r3, #12]
 80071da:	461a      	mov	r2, r3
 80071dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071de:	fb02 f303 	mul.w	r3, r2, r3
 80071e2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80071e4:	e05c      	b.n	80072a0 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6a1b      	ldr	r3, [r3, #32]
 80071ea:	69ba      	ldr	r2, [r7, #24]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d02e      	beq.n	800724e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	7d1b      	ldrb	r3, [r3, #20]
 80071f4:	b25b      	sxtb	r3, r3
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	da18      	bge.n	800722c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	7858      	ldrb	r0, [r3, #1]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6a1a      	ldr	r2, [r3, #32]
 8007208:	2301      	movs	r3, #1
 800720a:	f7fd fead 	bl	8004f68 <disk_write>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d004      	beq.n	800721e <f_read+0x202>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2201      	movs	r2, #1
 8007218:	755a      	strb	r2, [r3, #21]
 800721a:	2301      	movs	r3, #1
 800721c:	e059      	b.n	80072d2 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	7d1b      	ldrb	r3, [r3, #20]
 8007222:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007226:	b2da      	uxtb	r2, r3
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	7858      	ldrb	r0, [r3, #1]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007236:	2301      	movs	r3, #1
 8007238:	69ba      	ldr	r2, [r7, #24]
 800723a:	f7fd fe7d 	bl	8004f38 <disk_read>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d004      	beq.n	800724e <f_read+0x232>
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2201      	movs	r2, #1
 8007248:	755a      	strb	r2, [r3, #21]
 800724a:	2301      	movs	r3, #1
 800724c:	e041      	b.n	80072d2 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	69ba      	ldr	r2, [r7, #24]
 8007252:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	899b      	ldrh	r3, [r3, #12]
 8007258:	4618      	mov	r0, r3
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	699b      	ldr	r3, [r3, #24]
 800725e:	697a      	ldr	r2, [r7, #20]
 8007260:	8992      	ldrh	r2, [r2, #12]
 8007262:	fbb3 f1f2 	udiv	r1, r3, r2
 8007266:	fb02 f201 	mul.w	r2, r2, r1
 800726a:	1a9b      	subs	r3, r3, r2
 800726c:	1ac3      	subs	r3, r0, r3
 800726e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007270:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	429a      	cmp	r2, r3
 8007276:	d901      	bls.n	800727c <f_read+0x260>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	699b      	ldr	r3, [r3, #24]
 8007286:	697a      	ldr	r2, [r7, #20]
 8007288:	8992      	ldrh	r2, [r2, #12]
 800728a:	fbb3 f0f2 	udiv	r0, r3, r2
 800728e:	fb02 f200 	mul.w	r2, r2, r0
 8007292:	1a9b      	subs	r3, r3, r2
 8007294:	440b      	add	r3, r1
 8007296:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007298:	4619      	mov	r1, r3
 800729a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800729c:	f7fd ff16 	bl	80050cc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80072a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a4:	4413      	add	r3, r2
 80072a6:	627b      	str	r3, [r7, #36]	; 0x24
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	699a      	ldr	r2, [r3, #24]
 80072ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ae:	441a      	add	r2, r3
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	619a      	str	r2, [r3, #24]
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ba:	441a      	add	r2, r3
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	601a      	str	r2, [r3, #0]
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c4:	1ad3      	subs	r3, r2, r3
 80072c6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	f47f aee1 	bne.w	8007092 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3738      	adds	r7, #56	; 0x38
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	b08c      	sub	sp, #48	; 0x30
 80072de:	af00      	add	r7, sp, #0
 80072e0:	60f8      	str	r0, [r7, #12]
 80072e2:	60b9      	str	r1, [r7, #8]
 80072e4:	607a      	str	r2, [r7, #4]
 80072e6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	2200      	movs	r2, #0
 80072f0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f107 0210 	add.w	r2, r7, #16
 80072f8:	4611      	mov	r1, r2
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7ff fc46 	bl	8006b8c <validate>
 8007300:	4603      	mov	r3, r0
 8007302:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007306:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800730a:	2b00      	cmp	r3, #0
 800730c:	d107      	bne.n	800731e <f_write+0x44>
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	7d5b      	ldrb	r3, [r3, #21]
 8007312:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007316:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800731a:	2b00      	cmp	r3, #0
 800731c:	d002      	beq.n	8007324 <f_write+0x4a>
 800731e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007322:	e16a      	b.n	80075fa <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	7d1b      	ldrb	r3, [r3, #20]
 8007328:	f003 0302 	and.w	r3, r3, #2
 800732c:	2b00      	cmp	r3, #0
 800732e:	d101      	bne.n	8007334 <f_write+0x5a>
 8007330:	2307      	movs	r3, #7
 8007332:	e162      	b.n	80075fa <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	699a      	ldr	r2, [r3, #24]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	441a      	add	r2, r3
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	699b      	ldr	r3, [r3, #24]
 8007340:	429a      	cmp	r2, r3
 8007342:	f080 814c 	bcs.w	80075de <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	699b      	ldr	r3, [r3, #24]
 800734a:	43db      	mvns	r3, r3
 800734c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800734e:	e146      	b.n	80075de <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	693a      	ldr	r2, [r7, #16]
 8007356:	8992      	ldrh	r2, [r2, #12]
 8007358:	fbb3 f1f2 	udiv	r1, r3, r2
 800735c:	fb02 f201 	mul.w	r2, r2, r1
 8007360:	1a9b      	subs	r3, r3, r2
 8007362:	2b00      	cmp	r3, #0
 8007364:	f040 80f1 	bne.w	800754a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	699b      	ldr	r3, [r3, #24]
 800736c:	693a      	ldr	r2, [r7, #16]
 800736e:	8992      	ldrh	r2, [r2, #12]
 8007370:	fbb3 f3f2 	udiv	r3, r3, r2
 8007374:	693a      	ldr	r2, [r7, #16]
 8007376:	8952      	ldrh	r2, [r2, #10]
 8007378:	3a01      	subs	r2, #1
 800737a:	4013      	ands	r3, r2
 800737c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d143      	bne.n	800740c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	699b      	ldr	r3, [r3, #24]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d10c      	bne.n	80073a6 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007394:	2b00      	cmp	r3, #0
 8007396:	d11a      	bne.n	80073ce <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2100      	movs	r1, #0
 800739c:	4618      	mov	r0, r3
 800739e:	f7fe fbd5 	bl	8005b4c <create_chain>
 80073a2:	62b8      	str	r0, [r7, #40]	; 0x28
 80073a4:	e013      	b.n	80073ce <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d007      	beq.n	80073be <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	699b      	ldr	r3, [r3, #24]
 80073b2:	4619      	mov	r1, r3
 80073b4:	68f8      	ldr	r0, [r7, #12]
 80073b6:	f7fe fc61 	bl	8005c7c <clmt_clust>
 80073ba:	62b8      	str	r0, [r7, #40]	; 0x28
 80073bc:	e007      	b.n	80073ce <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	69db      	ldr	r3, [r3, #28]
 80073c4:	4619      	mov	r1, r3
 80073c6:	4610      	mov	r0, r2
 80073c8:	f7fe fbc0 	bl	8005b4c <create_chain>
 80073cc:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80073ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	f000 8109 	beq.w	80075e8 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80073d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d104      	bne.n	80073e6 <f_write+0x10c>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2202      	movs	r2, #2
 80073e0:	755a      	strb	r2, [r3, #21]
 80073e2:	2302      	movs	r3, #2
 80073e4:	e109      	b.n	80075fa <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80073e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ec:	d104      	bne.n	80073f8 <f_write+0x11e>
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2201      	movs	r2, #1
 80073f2:	755a      	strb	r2, [r3, #21]
 80073f4:	2301      	movs	r3, #1
 80073f6:	e100      	b.n	80075fa <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073fc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d102      	bne.n	800740c <f_write+0x132>
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800740a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	7d1b      	ldrb	r3, [r3, #20]
 8007410:	b25b      	sxtb	r3, r3
 8007412:	2b00      	cmp	r3, #0
 8007414:	da18      	bge.n	8007448 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	7858      	ldrb	r0, [r3, #1]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6a1a      	ldr	r2, [r3, #32]
 8007424:	2301      	movs	r3, #1
 8007426:	f7fd fd9f 	bl	8004f68 <disk_write>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d004      	beq.n	800743a <f_write+0x160>
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2201      	movs	r2, #1
 8007434:	755a      	strb	r2, [r3, #21]
 8007436:	2301      	movs	r3, #1
 8007438:	e0df      	b.n	80075fa <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	7d1b      	ldrb	r3, [r3, #20]
 800743e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007442:	b2da      	uxtb	r2, r3
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007448:	693a      	ldr	r2, [r7, #16]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	69db      	ldr	r3, [r3, #28]
 800744e:	4619      	mov	r1, r3
 8007450:	4610      	mov	r0, r2
 8007452:	f7fe f907 	bl	8005664 <clust2sect>
 8007456:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d104      	bne.n	8007468 <f_write+0x18e>
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2202      	movs	r2, #2
 8007462:	755a      	strb	r2, [r3, #21]
 8007464:	2302      	movs	r3, #2
 8007466:	e0c8      	b.n	80075fa <f_write+0x320>
			sect += csect;
 8007468:	697a      	ldr	r2, [r7, #20]
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	4413      	add	r3, r2
 800746e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	899b      	ldrh	r3, [r3, #12]
 8007474:	461a      	mov	r2, r3
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	fbb3 f3f2 	udiv	r3, r3, r2
 800747c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800747e:	6a3b      	ldr	r3, [r7, #32]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d043      	beq.n	800750c <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007484:	69ba      	ldr	r2, [r7, #24]
 8007486:	6a3b      	ldr	r3, [r7, #32]
 8007488:	4413      	add	r3, r2
 800748a:	693a      	ldr	r2, [r7, #16]
 800748c:	8952      	ldrh	r2, [r2, #10]
 800748e:	4293      	cmp	r3, r2
 8007490:	d905      	bls.n	800749e <f_write+0x1c4>
					cc = fs->csize - csect;
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	895b      	ldrh	r3, [r3, #10]
 8007496:	461a      	mov	r2, r3
 8007498:	69bb      	ldr	r3, [r7, #24]
 800749a:	1ad3      	subs	r3, r2, r3
 800749c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	7858      	ldrb	r0, [r3, #1]
 80074a2:	6a3b      	ldr	r3, [r7, #32]
 80074a4:	697a      	ldr	r2, [r7, #20]
 80074a6:	69f9      	ldr	r1, [r7, #28]
 80074a8:	f7fd fd5e 	bl	8004f68 <disk_write>
 80074ac:	4603      	mov	r3, r0
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d004      	beq.n	80074bc <f_write+0x1e2>
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2201      	movs	r2, #1
 80074b6:	755a      	strb	r2, [r3, #21]
 80074b8:	2301      	movs	r3, #1
 80074ba:	e09e      	b.n	80075fa <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6a1a      	ldr	r2, [r3, #32]
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	1ad3      	subs	r3, r2, r3
 80074c4:	6a3a      	ldr	r2, [r7, #32]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d918      	bls.n	80074fc <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6a1a      	ldr	r2, [r3, #32]
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	1ad3      	subs	r3, r2, r3
 80074d8:	693a      	ldr	r2, [r7, #16]
 80074da:	8992      	ldrh	r2, [r2, #12]
 80074dc:	fb02 f303 	mul.w	r3, r2, r3
 80074e0:	69fa      	ldr	r2, [r7, #28]
 80074e2:	18d1      	adds	r1, r2, r3
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	899b      	ldrh	r3, [r3, #12]
 80074e8:	461a      	mov	r2, r3
 80074ea:	f7fd fdef 	bl	80050cc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	7d1b      	ldrb	r3, [r3, #20]
 80074f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074f6:	b2da      	uxtb	r2, r3
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	899b      	ldrh	r3, [r3, #12]
 8007500:	461a      	mov	r2, r3
 8007502:	6a3b      	ldr	r3, [r7, #32]
 8007504:	fb02 f303 	mul.w	r3, r2, r3
 8007508:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800750a:	e04b      	b.n	80075a4 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	6a1b      	ldr	r3, [r3, #32]
 8007510:	697a      	ldr	r2, [r7, #20]
 8007512:	429a      	cmp	r2, r3
 8007514:	d016      	beq.n	8007544 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	699a      	ldr	r2, [r3, #24]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800751e:	429a      	cmp	r2, r3
 8007520:	d210      	bcs.n	8007544 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	7858      	ldrb	r0, [r3, #1]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800752c:	2301      	movs	r3, #1
 800752e:	697a      	ldr	r2, [r7, #20]
 8007530:	f7fd fd02 	bl	8004f38 <disk_read>
 8007534:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007536:	2b00      	cmp	r3, #0
 8007538:	d004      	beq.n	8007544 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2201      	movs	r2, #1
 800753e:	755a      	strb	r2, [r3, #21]
 8007540:	2301      	movs	r3, #1
 8007542:	e05a      	b.n	80075fa <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	697a      	ldr	r2, [r7, #20]
 8007548:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	899b      	ldrh	r3, [r3, #12]
 800754e:	4618      	mov	r0, r3
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	699b      	ldr	r3, [r3, #24]
 8007554:	693a      	ldr	r2, [r7, #16]
 8007556:	8992      	ldrh	r2, [r2, #12]
 8007558:	fbb3 f1f2 	udiv	r1, r3, r2
 800755c:	fb02 f201 	mul.w	r2, r2, r1
 8007560:	1a9b      	subs	r3, r3, r2
 8007562:	1ac3      	subs	r3, r0, r3
 8007564:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	429a      	cmp	r2, r3
 800756c:	d901      	bls.n	8007572 <f_write+0x298>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	699b      	ldr	r3, [r3, #24]
 800757c:	693a      	ldr	r2, [r7, #16]
 800757e:	8992      	ldrh	r2, [r2, #12]
 8007580:	fbb3 f0f2 	udiv	r0, r3, r2
 8007584:	fb02 f200 	mul.w	r2, r2, r0
 8007588:	1a9b      	subs	r3, r3, r2
 800758a:	440b      	add	r3, r1
 800758c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800758e:	69f9      	ldr	r1, [r7, #28]
 8007590:	4618      	mov	r0, r3
 8007592:	f7fd fd9b 	bl	80050cc <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	7d1b      	ldrb	r3, [r3, #20]
 800759a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800759e:	b2da      	uxtb	r2, r3
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80075a4:	69fa      	ldr	r2, [r7, #28]
 80075a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a8:	4413      	add	r3, r2
 80075aa:	61fb      	str	r3, [r7, #28]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	699a      	ldr	r2, [r3, #24]
 80075b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b2:	441a      	add	r2, r3
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	619a      	str	r2, [r3, #24]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	68da      	ldr	r2, [r3, #12]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	699b      	ldr	r3, [r3, #24]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	bf38      	it	cc
 80075c4:	461a      	movcc	r2, r3
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	60da      	str	r2, [r3, #12]
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d0:	441a      	add	r2, r3
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	601a      	str	r2, [r3, #0]
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075da:	1ad3      	subs	r3, r2, r3
 80075dc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	f47f aeb5 	bne.w	8007350 <f_write+0x76>
 80075e6:	e000      	b.n	80075ea <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80075e8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	7d1b      	ldrb	r3, [r3, #20]
 80075ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075f2:	b2da      	uxtb	r2, r3
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3730      	adds	r7, #48	; 0x30
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}

08007602 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007602:	b580      	push	{r7, lr}
 8007604:	b086      	sub	sp, #24
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f107 0208 	add.w	r2, r7, #8
 8007610:	4611      	mov	r1, r2
 8007612:	4618      	mov	r0, r3
 8007614:	f7ff faba 	bl	8006b8c <validate>
 8007618:	4603      	mov	r3, r0
 800761a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800761c:	7dfb      	ldrb	r3, [r7, #23]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d168      	bne.n	80076f4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	7d1b      	ldrb	r3, [r3, #20]
 8007626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800762a:	2b00      	cmp	r3, #0
 800762c:	d062      	beq.n	80076f4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	7d1b      	ldrb	r3, [r3, #20]
 8007632:	b25b      	sxtb	r3, r3
 8007634:	2b00      	cmp	r3, #0
 8007636:	da15      	bge.n	8007664 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	7858      	ldrb	r0, [r3, #1]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a1a      	ldr	r2, [r3, #32]
 8007646:	2301      	movs	r3, #1
 8007648:	f7fd fc8e 	bl	8004f68 <disk_write>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d001      	beq.n	8007656 <f_sync+0x54>
 8007652:	2301      	movs	r3, #1
 8007654:	e04f      	b.n	80076f6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	7d1b      	ldrb	r3, [r3, #20]
 800765a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800765e:	b2da      	uxtb	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007664:	f7fd fbe2 	bl	8004e2c <get_fattime>
 8007668:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800766a:	68ba      	ldr	r2, [r7, #8]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007670:	4619      	mov	r1, r3
 8007672:	4610      	mov	r0, r2
 8007674:	f7fd ff58 	bl	8005528 <move_window>
 8007678:	4603      	mov	r3, r0
 800767a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800767c:	7dfb      	ldrb	r3, [r7, #23]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d138      	bne.n	80076f4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007686:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	330b      	adds	r3, #11
 800768c:	781a      	ldrb	r2, [r3, #0]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	330b      	adds	r3, #11
 8007692:	f042 0220 	orr.w	r2, r2, #32
 8007696:	b2d2      	uxtb	r2, r2
 8007698:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6818      	ldr	r0, [r3, #0]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	461a      	mov	r2, r3
 80076a4:	68f9      	ldr	r1, [r7, #12]
 80076a6:	f7fe fce6 	bl	8006076 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f103 021c 	add.w	r2, r3, #28
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	4619      	mov	r1, r3
 80076b6:	4610      	mov	r0, r2
 80076b8:	f7fd fcdc 	bl	8005074 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	3316      	adds	r3, #22
 80076c0:	6939      	ldr	r1, [r7, #16]
 80076c2:	4618      	mov	r0, r3
 80076c4:	f7fd fcd6 	bl	8005074 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	3312      	adds	r3, #18
 80076cc:	2100      	movs	r1, #0
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7fd fcb5 	bl	800503e <st_word>
					fs->wflag = 1;
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	2201      	movs	r2, #1
 80076d8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	4618      	mov	r0, r3
 80076de:	f7fd ff51 	bl	8005584 <sync_fs>
 80076e2:	4603      	mov	r3, r0
 80076e4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	7d1b      	ldrb	r3, [r3, #20]
 80076ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076ee:	b2da      	uxtb	r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80076f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3718      	adds	r7, #24
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}

080076fe <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80076fe:	b580      	push	{r7, lr}
 8007700:	b084      	sub	sp, #16
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f7ff ff7b 	bl	8007602 <f_sync>
 800770c:	4603      	mov	r3, r0
 800770e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007710:	7bfb      	ldrb	r3, [r7, #15]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d118      	bne.n	8007748 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f107 0208 	add.w	r2, r7, #8
 800771c:	4611      	mov	r1, r2
 800771e:	4618      	mov	r0, r3
 8007720:	f7ff fa34 	bl	8006b8c <validate>
 8007724:	4603      	mov	r3, r0
 8007726:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007728:	7bfb      	ldrb	r3, [r7, #15]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d10c      	bne.n	8007748 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	4618      	mov	r0, r3
 8007734:	f7fd fe54 	bl	80053e0 <dec_lock>
 8007738:	4603      	mov	r3, r0
 800773a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800773c:	7bfb      	ldrb	r3, [r7, #15]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d102      	bne.n	8007748 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007748:	7bfb      	ldrb	r3, [r7, #15]
}
 800774a:	4618      	mov	r0, r3
 800774c:	3710      	adds	r7, #16
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}

08007752 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8007752:	b580      	push	{r7, lr}
 8007754:	b090      	sub	sp, #64	; 0x40
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
 800775a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f107 0208 	add.w	r2, r7, #8
 8007762:	4611      	mov	r1, r2
 8007764:	4618      	mov	r0, r3
 8007766:	f7ff fa11 	bl	8006b8c <validate>
 800776a:	4603      	mov	r3, r0
 800776c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8007770:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007774:	2b00      	cmp	r3, #0
 8007776:	d103      	bne.n	8007780 <f_lseek+0x2e>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	7d5b      	ldrb	r3, [r3, #21]
 800777c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8007780:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007784:	2b00      	cmp	r3, #0
 8007786:	d002      	beq.n	800778e <f_lseek+0x3c>
 8007788:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800778c:	e201      	b.n	8007b92 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007792:	2b00      	cmp	r3, #0
 8007794:	f000 80d9 	beq.w	800794a <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800779e:	d15a      	bne.n	8007856 <f_lseek+0x104>
			tbl = fp->cltbl;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a4:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80077a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a8:	1d1a      	adds	r2, r3, #4
 80077aa:	627a      	str	r2, [r7, #36]	; 0x24
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	617b      	str	r3, [r7, #20]
 80077b0:	2302      	movs	r3, #2
 80077b2:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80077ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d03a      	beq.n	8007836 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80077c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c2:	613b      	str	r3, [r7, #16]
 80077c4:	2300      	movs	r3, #0
 80077c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ca:	3302      	adds	r3, #2
 80077cc:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80077ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d0:	60fb      	str	r3, [r7, #12]
 80077d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d4:	3301      	adds	r3, #1
 80077d6:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80077dc:	4618      	mov	r0, r3
 80077de:	f7fd ff60 	bl	80056a2 <get_fat>
 80077e2:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80077e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d804      	bhi.n	80077f4 <f_lseek+0xa2>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2202      	movs	r2, #2
 80077ee:	755a      	strb	r2, [r3, #21]
 80077f0:	2302      	movs	r3, #2
 80077f2:	e1ce      	b.n	8007b92 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80077f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077fa:	d104      	bne.n	8007806 <f_lseek+0xb4>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	755a      	strb	r2, [r3, #21]
 8007802:	2301      	movs	r3, #1
 8007804:	e1c5      	b.n	8007b92 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	3301      	adds	r3, #1
 800780a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800780c:	429a      	cmp	r2, r3
 800780e:	d0de      	beq.n	80077ce <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8007810:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	429a      	cmp	r2, r3
 8007816:	d809      	bhi.n	800782c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8007818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781a:	1d1a      	adds	r2, r3, #4
 800781c:	627a      	str	r2, [r7, #36]	; 0x24
 800781e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007820:	601a      	str	r2, [r3, #0]
 8007822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007824:	1d1a      	adds	r2, r3, #4
 8007826:	627a      	str	r2, [r7, #36]	; 0x24
 8007828:	693a      	ldr	r2, [r7, #16]
 800782a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	699b      	ldr	r3, [r3, #24]
 8007830:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007832:	429a      	cmp	r2, r3
 8007834:	d3c4      	bcc.n	80077c0 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800783a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800783c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800783e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	429a      	cmp	r2, r3
 8007844:	d803      	bhi.n	800784e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8007846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007848:	2200      	movs	r2, #0
 800784a:	601a      	str	r2, [r3, #0]
 800784c:	e19f      	b.n	8007b8e <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800784e:	2311      	movs	r3, #17
 8007850:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007854:	e19b      	b.n	8007b8e <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	683a      	ldr	r2, [r7, #0]
 800785c:	429a      	cmp	r2, r3
 800785e:	d902      	bls.n	8007866 <f_lseek+0x114>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	683a      	ldr	r2, [r7, #0]
 800786a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	2b00      	cmp	r3, #0
 8007870:	f000 818d 	beq.w	8007b8e <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	3b01      	subs	r3, #1
 8007878:	4619      	mov	r1, r3
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f7fe f9fe 	bl	8005c7c <clmt_clust>
 8007880:	4602      	mov	r2, r0
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8007886:	68ba      	ldr	r2, [r7, #8]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	69db      	ldr	r3, [r3, #28]
 800788c:	4619      	mov	r1, r3
 800788e:	4610      	mov	r0, r2
 8007890:	f7fd fee8 	bl	8005664 <clust2sect>
 8007894:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d104      	bne.n	80078a6 <f_lseek+0x154>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2202      	movs	r2, #2
 80078a0:	755a      	strb	r2, [r3, #21]
 80078a2:	2302      	movs	r3, #2
 80078a4:	e175      	b.n	8007b92 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	3b01      	subs	r3, #1
 80078aa:	68ba      	ldr	r2, [r7, #8]
 80078ac:	8992      	ldrh	r2, [r2, #12]
 80078ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80078b2:	68ba      	ldr	r2, [r7, #8]
 80078b4:	8952      	ldrh	r2, [r2, #10]
 80078b6:	3a01      	subs	r2, #1
 80078b8:	4013      	ands	r3, r2
 80078ba:	69ba      	ldr	r2, [r7, #24]
 80078bc:	4413      	add	r3, r2
 80078be:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	699b      	ldr	r3, [r3, #24]
 80078c4:	68ba      	ldr	r2, [r7, #8]
 80078c6:	8992      	ldrh	r2, [r2, #12]
 80078c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80078cc:	fb02 f201 	mul.w	r2, r2, r1
 80078d0:	1a9b      	subs	r3, r3, r2
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	f000 815b 	beq.w	8007b8e <f_lseek+0x43c>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6a1b      	ldr	r3, [r3, #32]
 80078dc:	69ba      	ldr	r2, [r7, #24]
 80078de:	429a      	cmp	r2, r3
 80078e0:	f000 8155 	beq.w	8007b8e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	7d1b      	ldrb	r3, [r3, #20]
 80078e8:	b25b      	sxtb	r3, r3
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	da18      	bge.n	8007920 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	7858      	ldrb	r0, [r3, #1]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6a1a      	ldr	r2, [r3, #32]
 80078fc:	2301      	movs	r3, #1
 80078fe:	f7fd fb33 	bl	8004f68 <disk_write>
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d004      	beq.n	8007912 <f_lseek+0x1c0>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2201      	movs	r2, #1
 800790c:	755a      	strb	r2, [r3, #21]
 800790e:	2301      	movs	r3, #1
 8007910:	e13f      	b.n	8007b92 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	7d1b      	ldrb	r3, [r3, #20]
 8007916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800791a:	b2da      	uxtb	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	7858      	ldrb	r0, [r3, #1]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800792a:	2301      	movs	r3, #1
 800792c:	69ba      	ldr	r2, [r7, #24]
 800792e:	f7fd fb03 	bl	8004f38 <disk_read>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d004      	beq.n	8007942 <f_lseek+0x1f0>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	755a      	strb	r2, [r3, #21]
 800793e:	2301      	movs	r3, #1
 8007940:	e127      	b.n	8007b92 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	69ba      	ldr	r2, [r7, #24]
 8007946:	621a      	str	r2, [r3, #32]
 8007948:	e121      	b.n	8007b8e <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	683a      	ldr	r2, [r7, #0]
 8007950:	429a      	cmp	r2, r3
 8007952:	d908      	bls.n	8007966 <f_lseek+0x214>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	7d1b      	ldrb	r3, [r3, #20]
 8007958:	f003 0302 	and.w	r3, r3, #2
 800795c:	2b00      	cmp	r3, #0
 800795e:	d102      	bne.n	8007966 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	699b      	ldr	r3, [r3, #24]
 800796a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800796c:	2300      	movs	r3, #0
 800796e:	637b      	str	r3, [r7, #52]	; 0x34
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007974:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	2b00      	cmp	r3, #0
 800797a:	f000 80b5 	beq.w	8007ae8 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	895b      	ldrh	r3, [r3, #10]
 8007982:	461a      	mov	r2, r3
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	899b      	ldrh	r3, [r3, #12]
 8007988:	fb03 f302 	mul.w	r3, r3, r2
 800798c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800798e:	6a3b      	ldr	r3, [r7, #32]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d01b      	beq.n	80079cc <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	1e5a      	subs	r2, r3, #1
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	fbb2 f2f3 	udiv	r2, r2, r3
 800799e:	6a3b      	ldr	r3, [r7, #32]
 80079a0:	1e59      	subs	r1, r3, #1
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d30f      	bcc.n	80079cc <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80079ac:	6a3b      	ldr	r3, [r7, #32]
 80079ae:	1e5a      	subs	r2, r3, #1
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	425b      	negs	r3, r3
 80079b4:	401a      	ands	r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	699b      	ldr	r3, [r3, #24]
 80079be:	683a      	ldr	r2, [r7, #0]
 80079c0:	1ad3      	subs	r3, r2, r3
 80079c2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	69db      	ldr	r3, [r3, #28]
 80079c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80079ca:	e022      	b.n	8007a12 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80079d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d119      	bne.n	8007a0c <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2100      	movs	r1, #0
 80079dc:	4618      	mov	r0, r3
 80079de:	f7fe f8b5 	bl	8005b4c <create_chain>
 80079e2:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80079e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d104      	bne.n	80079f4 <f_lseek+0x2a2>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2202      	movs	r2, #2
 80079ee:	755a      	strb	r2, [r3, #21]
 80079f0:	2302      	movs	r3, #2
 80079f2:	e0ce      	b.n	8007b92 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80079f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079fa:	d104      	bne.n	8007a06 <f_lseek+0x2b4>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2201      	movs	r2, #1
 8007a00:	755a      	strb	r2, [r3, #21]
 8007a02:	2301      	movs	r3, #1
 8007a04:	e0c5      	b.n	8007b92 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a0a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a10:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8007a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d067      	beq.n	8007ae8 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8007a18:	e03a      	b.n	8007a90 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8007a1a:	683a      	ldr	r2, [r7, #0]
 8007a1c:	69fb      	ldr	r3, [r7, #28]
 8007a1e:	1ad3      	subs	r3, r2, r3
 8007a20:	603b      	str	r3, [r7, #0]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	699a      	ldr	r2, [r3, #24]
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	441a      	add	r2, r3
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	7d1b      	ldrb	r3, [r3, #20]
 8007a32:	f003 0302 	and.w	r3, r3, #2
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d00b      	beq.n	8007a52 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7fe f884 	bl	8005b4c <create_chain>
 8007a44:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8007a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d108      	bne.n	8007a5e <f_lseek+0x30c>
							ofs = 0; break;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	603b      	str	r3, [r7, #0]
 8007a50:	e022      	b.n	8007a98 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7fd fe23 	bl	80056a2 <get_fat>
 8007a5c:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a64:	d104      	bne.n	8007a70 <f_lseek+0x31e>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	755a      	strb	r2, [r3, #21]
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e090      	b.n	8007b92 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8007a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d904      	bls.n	8007a80 <f_lseek+0x32e>
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	699b      	ldr	r3, [r3, #24]
 8007a7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d304      	bcc.n	8007a8a <f_lseek+0x338>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2202      	movs	r2, #2
 8007a84:	755a      	strb	r2, [r3, #21]
 8007a86:	2302      	movs	r3, #2
 8007a88:	e083      	b.n	8007b92 <f_lseek+0x440>
					fp->clust = clst;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a8e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8007a90:	683a      	ldr	r2, [r7, #0]
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d8c0      	bhi.n	8007a1a <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	699a      	ldr	r2, [r3, #24]
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	441a      	add	r2, r3
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	899b      	ldrh	r3, [r3, #12]
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ab0:	fb02 f201 	mul.w	r2, r2, r1
 8007ab4:	1a9b      	subs	r3, r3, r2
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d016      	beq.n	8007ae8 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7fd fdd0 	bl	8005664 <clust2sect>
 8007ac4:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8007ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d104      	bne.n	8007ad6 <f_lseek+0x384>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2202      	movs	r2, #2
 8007ad0:	755a      	strb	r2, [r3, #21]
 8007ad2:	2302      	movs	r3, #2
 8007ad4:	e05d      	b.n	8007b92 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	899b      	ldrh	r3, [r3, #12]
 8007ada:	461a      	mov	r2, r3
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ae2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ae4:	4413      	add	r3, r2
 8007ae6:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	699a      	ldr	r2, [r3, #24]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d90a      	bls.n	8007b0a <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	699a      	ldr	r2, [r3, #24]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	7d1b      	ldrb	r3, [r3, #20]
 8007b00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b04:	b2da      	uxtb	r2, r3
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	699b      	ldr	r3, [r3, #24]
 8007b0e:	68ba      	ldr	r2, [r7, #8]
 8007b10:	8992      	ldrh	r2, [r2, #12]
 8007b12:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b16:	fb02 f201 	mul.w	r2, r2, r1
 8007b1a:	1a9b      	subs	r3, r3, r2
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d036      	beq.n	8007b8e <f_lseek+0x43c>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6a1b      	ldr	r3, [r3, #32]
 8007b24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d031      	beq.n	8007b8e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	7d1b      	ldrb	r3, [r3, #20]
 8007b2e:	b25b      	sxtb	r3, r3
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	da18      	bge.n	8007b66 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	7858      	ldrb	r0, [r3, #1]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6a1a      	ldr	r2, [r3, #32]
 8007b42:	2301      	movs	r3, #1
 8007b44:	f7fd fa10 	bl	8004f68 <disk_write>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d004      	beq.n	8007b58 <f_lseek+0x406>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2201      	movs	r2, #1
 8007b52:	755a      	strb	r2, [r3, #21]
 8007b54:	2301      	movs	r3, #1
 8007b56:	e01c      	b.n	8007b92 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	7d1b      	ldrb	r3, [r3, #20]
 8007b5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b60:	b2da      	uxtb	r2, r3
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	7858      	ldrb	r0, [r3, #1]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007b70:	2301      	movs	r3, #1
 8007b72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b74:	f7fd f9e0 	bl	8004f38 <disk_read>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d004      	beq.n	8007b88 <f_lseek+0x436>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2201      	movs	r2, #1
 8007b82:	755a      	strb	r2, [r3, #21]
 8007b84:	2301      	movs	r3, #1
 8007b86:	e004      	b.n	8007b92 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b8c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8007b8e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3740      	adds	r7, #64	; 0x40
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}

08007b9a <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b086      	sub	sp, #24
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
 8007ba2:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d101      	bne.n	8007bae <f_opendir+0x14>
 8007baa:	2309      	movs	r3, #9
 8007bac:	e064      	b.n	8007c78 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8007bb2:	f107 010c 	add.w	r1, r7, #12
 8007bb6:	463b      	mov	r3, r7
 8007bb8:	2200      	movs	r2, #0
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7fe fd62 	bl	8006684 <find_volume>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007bc4:	7dfb      	ldrb	r3, [r7, #23]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d14f      	bne.n	8007c6a <f_opendir+0xd0>
		obj->fs = fs;
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f7fe fc45 	bl	8006464 <follow_path>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8007bde:	7dfb      	ldrb	r3, [r7, #23]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d13d      	bne.n	8007c60 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007bea:	b25b      	sxtb	r3, r3
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	db12      	blt.n	8007c16 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	799b      	ldrb	r3, [r3, #6]
 8007bf4:	f003 0310 	and.w	r3, r3, #16
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d00a      	beq.n	8007c12 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a1b      	ldr	r3, [r3, #32]
 8007c02:	4619      	mov	r1, r3
 8007c04:	4610      	mov	r0, r2
 8007c06:	f7fe fa17 	bl	8006038 <ld_clust>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	609a      	str	r2, [r3, #8]
 8007c10:	e001      	b.n	8007c16 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8007c12:	2305      	movs	r3, #5
 8007c14:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8007c16:	7dfb      	ldrb	r3, [r7, #23]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d121      	bne.n	8007c60 <f_opendir+0xc6>
				obj->id = fs->id;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	88da      	ldrh	r2, [r3, #6]
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8007c24:	2100      	movs	r1, #0
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f7fe f860 	bl	8005cec <dir_sdi>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8007c30:	7dfb      	ldrb	r3, [r7, #23]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d114      	bne.n	8007c60 <f_opendir+0xc6>
					if (obj->sclust) {
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00d      	beq.n	8007c5a <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8007c3e:	2100      	movs	r1, #0
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f7fd fb3f 	bl	80052c4 <inc_lock>
 8007c46:	4602      	mov	r2, r0
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	691b      	ldr	r3, [r3, #16]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d105      	bne.n	8007c60 <f_opendir+0xc6>
 8007c54:	2312      	movs	r3, #18
 8007c56:	75fb      	strb	r3, [r7, #23]
 8007c58:	e002      	b.n	8007c60 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8007c60:	7dfb      	ldrb	r3, [r7, #23]
 8007c62:	2b04      	cmp	r3, #4
 8007c64:	d101      	bne.n	8007c6a <f_opendir+0xd0>
 8007c66:	2305      	movs	r3, #5
 8007c68:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8007c6a:	7dfb      	ldrb	r3, [r7, #23]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d002      	beq.n	8007c76 <f_opendir+0xdc>
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	2200      	movs	r2, #0
 8007c74:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3718      	adds	r7, #24
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f107 0208 	add.w	r2, r7, #8
 8007c8e:	4611      	mov	r1, r2
 8007c90:	4618      	mov	r0, r3
 8007c92:	f7fe ff7b 	bl	8006b8c <validate>
 8007c96:	4603      	mov	r3, r0
 8007c98:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007c9a:	7bfb      	ldrb	r3, [r7, #15]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d110      	bne.n	8007cc2 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d006      	beq.n	8007cb6 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	691b      	ldr	r3, [r3, #16]
 8007cac:	4618      	mov	r0, r3
 8007cae:	f7fd fb97 	bl	80053e0 <dec_lock>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8007cb6:	7bfb      	ldrb	r3, [r7, #15]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d102      	bne.n	8007cc2 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8007cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3710      	adds	r7, #16
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f107 0208 	add.w	r2, r7, #8
 8007cdc:	4611      	mov	r1, r2
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7fe ff54 	bl	8006b8c <validate>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007ce8:	7bfb      	ldrb	r3, [r7, #15]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d126      	bne.n	8007d3c <f_readdir+0x70>
		if (!fno) {
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d106      	bne.n	8007d02 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8007cf4:	2100      	movs	r1, #0
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f7fd fff8 	bl	8005cec <dir_sdi>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	73fb      	strb	r3, [r7, #15]
 8007d00:	e01c      	b.n	8007d3c <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8007d02:	2100      	movs	r1, #0
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f7fe f9d6 	bl	80060b6 <dir_read>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8007d0e:	7bfb      	ldrb	r3, [r7, #15]
 8007d10:	2b04      	cmp	r3, #4
 8007d12:	d101      	bne.n	8007d18 <f_readdir+0x4c>
 8007d14:	2300      	movs	r3, #0
 8007d16:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8007d18:	7bfb      	ldrb	r3, [r7, #15]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d10e      	bne.n	8007d3c <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8007d1e:	6839      	ldr	r1, [r7, #0]
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f7fe faac 	bl	800627e <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8007d26:	2100      	movs	r1, #0
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f7fe f868 	bl	8005dfe <dir_next>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8007d32:	7bfb      	ldrb	r3, [r7, #15]
 8007d34:	2b04      	cmp	r3, #4
 8007d36:	d101      	bne.n	8007d3c <f_readdir+0x70>
 8007d38:	2300      	movs	r3, #0
 8007d3a:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8007d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3710      	adds	r7, #16
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}

08007d46 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b092      	sub	sp, #72	; 0x48
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	60f8      	str	r0, [r7, #12]
 8007d4e:	60b9      	str	r1, [r7, #8]
 8007d50:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8007d52:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8007d56:	f107 030c 	add.w	r3, r7, #12
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f7fe fc91 	bl	8006684 <find_volume>
 8007d62:	4603      	mov	r3, r0
 8007d64:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8007d68:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	f040 8099 	bne.w	8007ea4 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8007d72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8007d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7a:	695a      	ldr	r2, [r3, #20]
 8007d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7e:	699b      	ldr	r3, [r3, #24]
 8007d80:	3b02      	subs	r3, #2
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d804      	bhi.n	8007d90 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8007d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d88:	695a      	ldr	r2, [r3, #20]
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	601a      	str	r2, [r3, #0]
 8007d8e:	e089      	b.n	8007ea4 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8007d90:	2300      	movs	r3, #0
 8007d92:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8007d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d128      	bne.n	8007dee <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8007d9c:	2302      	movs	r3, #2
 8007d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da2:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8007da4:	f107 0314 	add.w	r3, r7, #20
 8007da8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7fd fc79 	bl	80056a2 <get_fat>
 8007db0:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8007db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007db8:	d103      	bne.n	8007dc2 <f_getfree+0x7c>
 8007dba:	2301      	movs	r3, #1
 8007dbc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007dc0:	e063      	b.n	8007e8a <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8007dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d103      	bne.n	8007dd0 <f_getfree+0x8a>
 8007dc8:	2302      	movs	r3, #2
 8007dca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007dce:	e05c      	b.n	8007e8a <f_getfree+0x144>
					if (stat == 0) nfree++;
 8007dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d102      	bne.n	8007ddc <f_getfree+0x96>
 8007dd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dd8:	3301      	adds	r3, #1
 8007dda:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8007ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dde:	3301      	adds	r3, #1
 8007de0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de4:	699b      	ldr	r3, [r3, #24]
 8007de6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d3db      	bcc.n	8007da4 <f_getfree+0x5e>
 8007dec:	e04d      	b.n	8007e8a <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8007dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df0:	699b      	ldr	r3, [r3, #24]
 8007df2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df8:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	637b      	str	r3, [r7, #52]	; 0x34
 8007dfe:	2300      	movs	r3, #0
 8007e00:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8007e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d113      	bne.n	8007e30 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8007e08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e0c:	1c5a      	adds	r2, r3, #1
 8007e0e:	63ba      	str	r2, [r7, #56]	; 0x38
 8007e10:	4619      	mov	r1, r3
 8007e12:	f7fd fb89 	bl	8005528 <move_window>
 8007e16:	4603      	mov	r3, r0
 8007e18:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8007e1c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d131      	bne.n	8007e88 <f_getfree+0x142>
							p = fs->win;
 8007e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e26:	3334      	adds	r3, #52	; 0x34
 8007e28:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8007e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e2c:	899b      	ldrh	r3, [r3, #12]
 8007e2e:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8007e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	2b02      	cmp	r3, #2
 8007e36:	d10f      	bne.n	8007e58 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8007e38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e3a:	f7fd f8c5 	bl	8004fc8 <ld_word>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d102      	bne.n	8007e4a <f_getfree+0x104>
 8007e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e46:	3301      	adds	r3, #1
 8007e48:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8007e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e4c:	3302      	adds	r3, #2
 8007e4e:	633b      	str	r3, [r7, #48]	; 0x30
 8007e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e52:	3b02      	subs	r3, #2
 8007e54:	637b      	str	r3, [r7, #52]	; 0x34
 8007e56:	e010      	b.n	8007e7a <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8007e58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e5a:	f7fd f8cd 	bl	8004ff8 <ld_dword>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d102      	bne.n	8007e6e <f_getfree+0x128>
 8007e68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8007e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e70:	3304      	adds	r3, #4
 8007e72:	633b      	str	r3, [r7, #48]	; 0x30
 8007e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e76:	3b04      	subs	r3, #4
 8007e78:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8007e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d1bd      	bne.n	8007e02 <f_getfree+0xbc>
 8007e86:	e000      	b.n	8007e8a <f_getfree+0x144>
							if (res != FR_OK) break;
 8007e88:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e8e:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8007e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e94:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8007e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e98:	791a      	ldrb	r2, [r3, #4]
 8007e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e9c:	f042 0201 	orr.w	r2, r2, #1
 8007ea0:	b2d2      	uxtb	r2, r2
 8007ea2:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8007ea4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3748      	adds	r7, #72	; 0x48
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b087      	sub	sp, #28
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	4613      	mov	r3, r2
 8007ebc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007ec6:	4b1f      	ldr	r3, [pc, #124]	; (8007f44 <FATFS_LinkDriverEx+0x94>)
 8007ec8:	7a5b      	ldrb	r3, [r3, #9]
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d131      	bne.n	8007f34 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007ed0:	4b1c      	ldr	r3, [pc, #112]	; (8007f44 <FATFS_LinkDriverEx+0x94>)
 8007ed2:	7a5b      	ldrb	r3, [r3, #9]
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	4b1a      	ldr	r3, [pc, #104]	; (8007f44 <FATFS_LinkDriverEx+0x94>)
 8007eda:	2100      	movs	r1, #0
 8007edc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007ede:	4b19      	ldr	r3, [pc, #100]	; (8007f44 <FATFS_LinkDriverEx+0x94>)
 8007ee0:	7a5b      	ldrb	r3, [r3, #9]
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	4a17      	ldr	r2, [pc, #92]	; (8007f44 <FATFS_LinkDriverEx+0x94>)
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	4413      	add	r3, r2
 8007eea:	68fa      	ldr	r2, [r7, #12]
 8007eec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007eee:	4b15      	ldr	r3, [pc, #84]	; (8007f44 <FATFS_LinkDriverEx+0x94>)
 8007ef0:	7a5b      	ldrb	r3, [r3, #9]
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	4b13      	ldr	r3, [pc, #76]	; (8007f44 <FATFS_LinkDriverEx+0x94>)
 8007ef8:	4413      	add	r3, r2
 8007efa:	79fa      	ldrb	r2, [r7, #7]
 8007efc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007efe:	4b11      	ldr	r3, [pc, #68]	; (8007f44 <FATFS_LinkDriverEx+0x94>)
 8007f00:	7a5b      	ldrb	r3, [r3, #9]
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	1c5a      	adds	r2, r3, #1
 8007f06:	b2d1      	uxtb	r1, r2
 8007f08:	4a0e      	ldr	r2, [pc, #56]	; (8007f44 <FATFS_LinkDriverEx+0x94>)
 8007f0a:	7251      	strb	r1, [r2, #9]
 8007f0c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007f0e:	7dbb      	ldrb	r3, [r7, #22]
 8007f10:	3330      	adds	r3, #48	; 0x30
 8007f12:	b2da      	uxtb	r2, r3
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	223a      	movs	r2, #58	; 0x3a
 8007f1e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	3302      	adds	r3, #2
 8007f24:	222f      	movs	r2, #47	; 0x2f
 8007f26:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	3303      	adds	r3, #3
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007f30:	2300      	movs	r3, #0
 8007f32:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	371c      	adds	r7, #28
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop
 8007f44:	200000f4 	.word	0x200000f4

08007f48 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007f52:	2200      	movs	r2, #0
 8007f54:	6839      	ldr	r1, [r7, #0]
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f7ff ffaa 	bl	8007eb0 <FATFS_LinkDriverEx>
 8007f5c:	4603      	mov	r3, r0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3708      	adds	r7, #8
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
	...

08007f68 <__errno>:
 8007f68:	4b01      	ldr	r3, [pc, #4]	; (8007f70 <__errno+0x8>)
 8007f6a:	6818      	ldr	r0, [r3, #0]
 8007f6c:	4770      	bx	lr
 8007f6e:	bf00      	nop
 8007f70:	20000024 	.word	0x20000024

08007f74 <__libc_init_array>:
 8007f74:	b570      	push	{r4, r5, r6, lr}
 8007f76:	4d0d      	ldr	r5, [pc, #52]	; (8007fac <__libc_init_array+0x38>)
 8007f78:	4c0d      	ldr	r4, [pc, #52]	; (8007fb0 <__libc_init_array+0x3c>)
 8007f7a:	1b64      	subs	r4, r4, r5
 8007f7c:	10a4      	asrs	r4, r4, #2
 8007f7e:	2600      	movs	r6, #0
 8007f80:	42a6      	cmp	r6, r4
 8007f82:	d109      	bne.n	8007f98 <__libc_init_array+0x24>
 8007f84:	4d0b      	ldr	r5, [pc, #44]	; (8007fb4 <__libc_init_array+0x40>)
 8007f86:	4c0c      	ldr	r4, [pc, #48]	; (8007fb8 <__libc_init_array+0x44>)
 8007f88:	f001 f9be 	bl	8009308 <_init>
 8007f8c:	1b64      	subs	r4, r4, r5
 8007f8e:	10a4      	asrs	r4, r4, #2
 8007f90:	2600      	movs	r6, #0
 8007f92:	42a6      	cmp	r6, r4
 8007f94:	d105      	bne.n	8007fa2 <__libc_init_array+0x2e>
 8007f96:	bd70      	pop	{r4, r5, r6, pc}
 8007f98:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f9c:	4798      	blx	r3
 8007f9e:	3601      	adds	r6, #1
 8007fa0:	e7ee      	b.n	8007f80 <__libc_init_array+0xc>
 8007fa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fa6:	4798      	blx	r3
 8007fa8:	3601      	adds	r6, #1
 8007faa:	e7f2      	b.n	8007f92 <__libc_init_array+0x1e>
 8007fac:	080095f8 	.word	0x080095f8
 8007fb0:	080095f8 	.word	0x080095f8
 8007fb4:	080095f8 	.word	0x080095f8
 8007fb8:	080095fc 	.word	0x080095fc

08007fbc <memset>:
 8007fbc:	4402      	add	r2, r0
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d100      	bne.n	8007fc6 <memset+0xa>
 8007fc4:	4770      	bx	lr
 8007fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8007fca:	e7f9      	b.n	8007fc0 <memset+0x4>

08007fcc <iprintf>:
 8007fcc:	b40f      	push	{r0, r1, r2, r3}
 8007fce:	4b0a      	ldr	r3, [pc, #40]	; (8007ff8 <iprintf+0x2c>)
 8007fd0:	b513      	push	{r0, r1, r4, lr}
 8007fd2:	681c      	ldr	r4, [r3, #0]
 8007fd4:	b124      	cbz	r4, 8007fe0 <iprintf+0x14>
 8007fd6:	69a3      	ldr	r3, [r4, #24]
 8007fd8:	b913      	cbnz	r3, 8007fe0 <iprintf+0x14>
 8007fda:	4620      	mov	r0, r4
 8007fdc:	f000 fa7e 	bl	80084dc <__sinit>
 8007fe0:	ab05      	add	r3, sp, #20
 8007fe2:	9a04      	ldr	r2, [sp, #16]
 8007fe4:	68a1      	ldr	r1, [r4, #8]
 8007fe6:	9301      	str	r3, [sp, #4]
 8007fe8:	4620      	mov	r0, r4
 8007fea:	f000 fdab 	bl	8008b44 <_vfiprintf_r>
 8007fee:	b002      	add	sp, #8
 8007ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ff4:	b004      	add	sp, #16
 8007ff6:	4770      	bx	lr
 8007ff8:	20000024 	.word	0x20000024

08007ffc <_puts_r>:
 8007ffc:	b570      	push	{r4, r5, r6, lr}
 8007ffe:	460e      	mov	r6, r1
 8008000:	4605      	mov	r5, r0
 8008002:	b118      	cbz	r0, 800800c <_puts_r+0x10>
 8008004:	6983      	ldr	r3, [r0, #24]
 8008006:	b90b      	cbnz	r3, 800800c <_puts_r+0x10>
 8008008:	f000 fa68 	bl	80084dc <__sinit>
 800800c:	69ab      	ldr	r3, [r5, #24]
 800800e:	68ac      	ldr	r4, [r5, #8]
 8008010:	b913      	cbnz	r3, 8008018 <_puts_r+0x1c>
 8008012:	4628      	mov	r0, r5
 8008014:	f000 fa62 	bl	80084dc <__sinit>
 8008018:	4b2c      	ldr	r3, [pc, #176]	; (80080cc <_puts_r+0xd0>)
 800801a:	429c      	cmp	r4, r3
 800801c:	d120      	bne.n	8008060 <_puts_r+0x64>
 800801e:	686c      	ldr	r4, [r5, #4]
 8008020:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008022:	07db      	lsls	r3, r3, #31
 8008024:	d405      	bmi.n	8008032 <_puts_r+0x36>
 8008026:	89a3      	ldrh	r3, [r4, #12]
 8008028:	0598      	lsls	r0, r3, #22
 800802a:	d402      	bmi.n	8008032 <_puts_r+0x36>
 800802c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800802e:	f000 faf3 	bl	8008618 <__retarget_lock_acquire_recursive>
 8008032:	89a3      	ldrh	r3, [r4, #12]
 8008034:	0719      	lsls	r1, r3, #28
 8008036:	d51d      	bpl.n	8008074 <_puts_r+0x78>
 8008038:	6923      	ldr	r3, [r4, #16]
 800803a:	b1db      	cbz	r3, 8008074 <_puts_r+0x78>
 800803c:	3e01      	subs	r6, #1
 800803e:	68a3      	ldr	r3, [r4, #8]
 8008040:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008044:	3b01      	subs	r3, #1
 8008046:	60a3      	str	r3, [r4, #8]
 8008048:	bb39      	cbnz	r1, 800809a <_puts_r+0x9e>
 800804a:	2b00      	cmp	r3, #0
 800804c:	da38      	bge.n	80080c0 <_puts_r+0xc4>
 800804e:	4622      	mov	r2, r4
 8008050:	210a      	movs	r1, #10
 8008052:	4628      	mov	r0, r5
 8008054:	f000 f868 	bl	8008128 <__swbuf_r>
 8008058:	3001      	adds	r0, #1
 800805a:	d011      	beq.n	8008080 <_puts_r+0x84>
 800805c:	250a      	movs	r5, #10
 800805e:	e011      	b.n	8008084 <_puts_r+0x88>
 8008060:	4b1b      	ldr	r3, [pc, #108]	; (80080d0 <_puts_r+0xd4>)
 8008062:	429c      	cmp	r4, r3
 8008064:	d101      	bne.n	800806a <_puts_r+0x6e>
 8008066:	68ac      	ldr	r4, [r5, #8]
 8008068:	e7da      	b.n	8008020 <_puts_r+0x24>
 800806a:	4b1a      	ldr	r3, [pc, #104]	; (80080d4 <_puts_r+0xd8>)
 800806c:	429c      	cmp	r4, r3
 800806e:	bf08      	it	eq
 8008070:	68ec      	ldreq	r4, [r5, #12]
 8008072:	e7d5      	b.n	8008020 <_puts_r+0x24>
 8008074:	4621      	mov	r1, r4
 8008076:	4628      	mov	r0, r5
 8008078:	f000 f8a8 	bl	80081cc <__swsetup_r>
 800807c:	2800      	cmp	r0, #0
 800807e:	d0dd      	beq.n	800803c <_puts_r+0x40>
 8008080:	f04f 35ff 	mov.w	r5, #4294967295
 8008084:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008086:	07da      	lsls	r2, r3, #31
 8008088:	d405      	bmi.n	8008096 <_puts_r+0x9a>
 800808a:	89a3      	ldrh	r3, [r4, #12]
 800808c:	059b      	lsls	r3, r3, #22
 800808e:	d402      	bmi.n	8008096 <_puts_r+0x9a>
 8008090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008092:	f000 fac2 	bl	800861a <__retarget_lock_release_recursive>
 8008096:	4628      	mov	r0, r5
 8008098:	bd70      	pop	{r4, r5, r6, pc}
 800809a:	2b00      	cmp	r3, #0
 800809c:	da04      	bge.n	80080a8 <_puts_r+0xac>
 800809e:	69a2      	ldr	r2, [r4, #24]
 80080a0:	429a      	cmp	r2, r3
 80080a2:	dc06      	bgt.n	80080b2 <_puts_r+0xb6>
 80080a4:	290a      	cmp	r1, #10
 80080a6:	d004      	beq.n	80080b2 <_puts_r+0xb6>
 80080a8:	6823      	ldr	r3, [r4, #0]
 80080aa:	1c5a      	adds	r2, r3, #1
 80080ac:	6022      	str	r2, [r4, #0]
 80080ae:	7019      	strb	r1, [r3, #0]
 80080b0:	e7c5      	b.n	800803e <_puts_r+0x42>
 80080b2:	4622      	mov	r2, r4
 80080b4:	4628      	mov	r0, r5
 80080b6:	f000 f837 	bl	8008128 <__swbuf_r>
 80080ba:	3001      	adds	r0, #1
 80080bc:	d1bf      	bne.n	800803e <_puts_r+0x42>
 80080be:	e7df      	b.n	8008080 <_puts_r+0x84>
 80080c0:	6823      	ldr	r3, [r4, #0]
 80080c2:	250a      	movs	r5, #10
 80080c4:	1c5a      	adds	r2, r3, #1
 80080c6:	6022      	str	r2, [r4, #0]
 80080c8:	701d      	strb	r5, [r3, #0]
 80080ca:	e7db      	b.n	8008084 <_puts_r+0x88>
 80080cc:	0800957c 	.word	0x0800957c
 80080d0:	0800959c 	.word	0x0800959c
 80080d4:	0800955c 	.word	0x0800955c

080080d8 <puts>:
 80080d8:	4b02      	ldr	r3, [pc, #8]	; (80080e4 <puts+0xc>)
 80080da:	4601      	mov	r1, r0
 80080dc:	6818      	ldr	r0, [r3, #0]
 80080de:	f7ff bf8d 	b.w	8007ffc <_puts_r>
 80080e2:	bf00      	nop
 80080e4:	20000024 	.word	0x20000024

080080e8 <siprintf>:
 80080e8:	b40e      	push	{r1, r2, r3}
 80080ea:	b500      	push	{lr}
 80080ec:	b09c      	sub	sp, #112	; 0x70
 80080ee:	ab1d      	add	r3, sp, #116	; 0x74
 80080f0:	9002      	str	r0, [sp, #8]
 80080f2:	9006      	str	r0, [sp, #24]
 80080f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80080f8:	4809      	ldr	r0, [pc, #36]	; (8008120 <siprintf+0x38>)
 80080fa:	9107      	str	r1, [sp, #28]
 80080fc:	9104      	str	r1, [sp, #16]
 80080fe:	4909      	ldr	r1, [pc, #36]	; (8008124 <siprintf+0x3c>)
 8008100:	f853 2b04 	ldr.w	r2, [r3], #4
 8008104:	9105      	str	r1, [sp, #20]
 8008106:	6800      	ldr	r0, [r0, #0]
 8008108:	9301      	str	r3, [sp, #4]
 800810a:	a902      	add	r1, sp, #8
 800810c:	f000 fbf0 	bl	80088f0 <_svfiprintf_r>
 8008110:	9b02      	ldr	r3, [sp, #8]
 8008112:	2200      	movs	r2, #0
 8008114:	701a      	strb	r2, [r3, #0]
 8008116:	b01c      	add	sp, #112	; 0x70
 8008118:	f85d eb04 	ldr.w	lr, [sp], #4
 800811c:	b003      	add	sp, #12
 800811e:	4770      	bx	lr
 8008120:	20000024 	.word	0x20000024
 8008124:	ffff0208 	.word	0xffff0208

08008128 <__swbuf_r>:
 8008128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800812a:	460e      	mov	r6, r1
 800812c:	4614      	mov	r4, r2
 800812e:	4605      	mov	r5, r0
 8008130:	b118      	cbz	r0, 800813a <__swbuf_r+0x12>
 8008132:	6983      	ldr	r3, [r0, #24]
 8008134:	b90b      	cbnz	r3, 800813a <__swbuf_r+0x12>
 8008136:	f000 f9d1 	bl	80084dc <__sinit>
 800813a:	4b21      	ldr	r3, [pc, #132]	; (80081c0 <__swbuf_r+0x98>)
 800813c:	429c      	cmp	r4, r3
 800813e:	d12b      	bne.n	8008198 <__swbuf_r+0x70>
 8008140:	686c      	ldr	r4, [r5, #4]
 8008142:	69a3      	ldr	r3, [r4, #24]
 8008144:	60a3      	str	r3, [r4, #8]
 8008146:	89a3      	ldrh	r3, [r4, #12]
 8008148:	071a      	lsls	r2, r3, #28
 800814a:	d52f      	bpl.n	80081ac <__swbuf_r+0x84>
 800814c:	6923      	ldr	r3, [r4, #16]
 800814e:	b36b      	cbz	r3, 80081ac <__swbuf_r+0x84>
 8008150:	6923      	ldr	r3, [r4, #16]
 8008152:	6820      	ldr	r0, [r4, #0]
 8008154:	1ac0      	subs	r0, r0, r3
 8008156:	6963      	ldr	r3, [r4, #20]
 8008158:	b2f6      	uxtb	r6, r6
 800815a:	4283      	cmp	r3, r0
 800815c:	4637      	mov	r7, r6
 800815e:	dc04      	bgt.n	800816a <__swbuf_r+0x42>
 8008160:	4621      	mov	r1, r4
 8008162:	4628      	mov	r0, r5
 8008164:	f000 f926 	bl	80083b4 <_fflush_r>
 8008168:	bb30      	cbnz	r0, 80081b8 <__swbuf_r+0x90>
 800816a:	68a3      	ldr	r3, [r4, #8]
 800816c:	3b01      	subs	r3, #1
 800816e:	60a3      	str	r3, [r4, #8]
 8008170:	6823      	ldr	r3, [r4, #0]
 8008172:	1c5a      	adds	r2, r3, #1
 8008174:	6022      	str	r2, [r4, #0]
 8008176:	701e      	strb	r6, [r3, #0]
 8008178:	6963      	ldr	r3, [r4, #20]
 800817a:	3001      	adds	r0, #1
 800817c:	4283      	cmp	r3, r0
 800817e:	d004      	beq.n	800818a <__swbuf_r+0x62>
 8008180:	89a3      	ldrh	r3, [r4, #12]
 8008182:	07db      	lsls	r3, r3, #31
 8008184:	d506      	bpl.n	8008194 <__swbuf_r+0x6c>
 8008186:	2e0a      	cmp	r6, #10
 8008188:	d104      	bne.n	8008194 <__swbuf_r+0x6c>
 800818a:	4621      	mov	r1, r4
 800818c:	4628      	mov	r0, r5
 800818e:	f000 f911 	bl	80083b4 <_fflush_r>
 8008192:	b988      	cbnz	r0, 80081b8 <__swbuf_r+0x90>
 8008194:	4638      	mov	r0, r7
 8008196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008198:	4b0a      	ldr	r3, [pc, #40]	; (80081c4 <__swbuf_r+0x9c>)
 800819a:	429c      	cmp	r4, r3
 800819c:	d101      	bne.n	80081a2 <__swbuf_r+0x7a>
 800819e:	68ac      	ldr	r4, [r5, #8]
 80081a0:	e7cf      	b.n	8008142 <__swbuf_r+0x1a>
 80081a2:	4b09      	ldr	r3, [pc, #36]	; (80081c8 <__swbuf_r+0xa0>)
 80081a4:	429c      	cmp	r4, r3
 80081a6:	bf08      	it	eq
 80081a8:	68ec      	ldreq	r4, [r5, #12]
 80081aa:	e7ca      	b.n	8008142 <__swbuf_r+0x1a>
 80081ac:	4621      	mov	r1, r4
 80081ae:	4628      	mov	r0, r5
 80081b0:	f000 f80c 	bl	80081cc <__swsetup_r>
 80081b4:	2800      	cmp	r0, #0
 80081b6:	d0cb      	beq.n	8008150 <__swbuf_r+0x28>
 80081b8:	f04f 37ff 	mov.w	r7, #4294967295
 80081bc:	e7ea      	b.n	8008194 <__swbuf_r+0x6c>
 80081be:	bf00      	nop
 80081c0:	0800957c 	.word	0x0800957c
 80081c4:	0800959c 	.word	0x0800959c
 80081c8:	0800955c 	.word	0x0800955c

080081cc <__swsetup_r>:
 80081cc:	4b32      	ldr	r3, [pc, #200]	; (8008298 <__swsetup_r+0xcc>)
 80081ce:	b570      	push	{r4, r5, r6, lr}
 80081d0:	681d      	ldr	r5, [r3, #0]
 80081d2:	4606      	mov	r6, r0
 80081d4:	460c      	mov	r4, r1
 80081d6:	b125      	cbz	r5, 80081e2 <__swsetup_r+0x16>
 80081d8:	69ab      	ldr	r3, [r5, #24]
 80081da:	b913      	cbnz	r3, 80081e2 <__swsetup_r+0x16>
 80081dc:	4628      	mov	r0, r5
 80081de:	f000 f97d 	bl	80084dc <__sinit>
 80081e2:	4b2e      	ldr	r3, [pc, #184]	; (800829c <__swsetup_r+0xd0>)
 80081e4:	429c      	cmp	r4, r3
 80081e6:	d10f      	bne.n	8008208 <__swsetup_r+0x3c>
 80081e8:	686c      	ldr	r4, [r5, #4]
 80081ea:	89a3      	ldrh	r3, [r4, #12]
 80081ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081f0:	0719      	lsls	r1, r3, #28
 80081f2:	d42c      	bmi.n	800824e <__swsetup_r+0x82>
 80081f4:	06dd      	lsls	r5, r3, #27
 80081f6:	d411      	bmi.n	800821c <__swsetup_r+0x50>
 80081f8:	2309      	movs	r3, #9
 80081fa:	6033      	str	r3, [r6, #0]
 80081fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008200:	81a3      	strh	r3, [r4, #12]
 8008202:	f04f 30ff 	mov.w	r0, #4294967295
 8008206:	e03e      	b.n	8008286 <__swsetup_r+0xba>
 8008208:	4b25      	ldr	r3, [pc, #148]	; (80082a0 <__swsetup_r+0xd4>)
 800820a:	429c      	cmp	r4, r3
 800820c:	d101      	bne.n	8008212 <__swsetup_r+0x46>
 800820e:	68ac      	ldr	r4, [r5, #8]
 8008210:	e7eb      	b.n	80081ea <__swsetup_r+0x1e>
 8008212:	4b24      	ldr	r3, [pc, #144]	; (80082a4 <__swsetup_r+0xd8>)
 8008214:	429c      	cmp	r4, r3
 8008216:	bf08      	it	eq
 8008218:	68ec      	ldreq	r4, [r5, #12]
 800821a:	e7e6      	b.n	80081ea <__swsetup_r+0x1e>
 800821c:	0758      	lsls	r0, r3, #29
 800821e:	d512      	bpl.n	8008246 <__swsetup_r+0x7a>
 8008220:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008222:	b141      	cbz	r1, 8008236 <__swsetup_r+0x6a>
 8008224:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008228:	4299      	cmp	r1, r3
 800822a:	d002      	beq.n	8008232 <__swsetup_r+0x66>
 800822c:	4630      	mov	r0, r6
 800822e:	f000 fa59 	bl	80086e4 <_free_r>
 8008232:	2300      	movs	r3, #0
 8008234:	6363      	str	r3, [r4, #52]	; 0x34
 8008236:	89a3      	ldrh	r3, [r4, #12]
 8008238:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800823c:	81a3      	strh	r3, [r4, #12]
 800823e:	2300      	movs	r3, #0
 8008240:	6063      	str	r3, [r4, #4]
 8008242:	6923      	ldr	r3, [r4, #16]
 8008244:	6023      	str	r3, [r4, #0]
 8008246:	89a3      	ldrh	r3, [r4, #12]
 8008248:	f043 0308 	orr.w	r3, r3, #8
 800824c:	81a3      	strh	r3, [r4, #12]
 800824e:	6923      	ldr	r3, [r4, #16]
 8008250:	b94b      	cbnz	r3, 8008266 <__swsetup_r+0x9a>
 8008252:	89a3      	ldrh	r3, [r4, #12]
 8008254:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800825c:	d003      	beq.n	8008266 <__swsetup_r+0x9a>
 800825e:	4621      	mov	r1, r4
 8008260:	4630      	mov	r0, r6
 8008262:	f000 f9ff 	bl	8008664 <__smakebuf_r>
 8008266:	89a0      	ldrh	r0, [r4, #12]
 8008268:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800826c:	f010 0301 	ands.w	r3, r0, #1
 8008270:	d00a      	beq.n	8008288 <__swsetup_r+0xbc>
 8008272:	2300      	movs	r3, #0
 8008274:	60a3      	str	r3, [r4, #8]
 8008276:	6963      	ldr	r3, [r4, #20]
 8008278:	425b      	negs	r3, r3
 800827a:	61a3      	str	r3, [r4, #24]
 800827c:	6923      	ldr	r3, [r4, #16]
 800827e:	b943      	cbnz	r3, 8008292 <__swsetup_r+0xc6>
 8008280:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008284:	d1ba      	bne.n	80081fc <__swsetup_r+0x30>
 8008286:	bd70      	pop	{r4, r5, r6, pc}
 8008288:	0781      	lsls	r1, r0, #30
 800828a:	bf58      	it	pl
 800828c:	6963      	ldrpl	r3, [r4, #20]
 800828e:	60a3      	str	r3, [r4, #8]
 8008290:	e7f4      	b.n	800827c <__swsetup_r+0xb0>
 8008292:	2000      	movs	r0, #0
 8008294:	e7f7      	b.n	8008286 <__swsetup_r+0xba>
 8008296:	bf00      	nop
 8008298:	20000024 	.word	0x20000024
 800829c:	0800957c 	.word	0x0800957c
 80082a0:	0800959c 	.word	0x0800959c
 80082a4:	0800955c 	.word	0x0800955c

080082a8 <__sflush_r>:
 80082a8:	898a      	ldrh	r2, [r1, #12]
 80082aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082ae:	4605      	mov	r5, r0
 80082b0:	0710      	lsls	r0, r2, #28
 80082b2:	460c      	mov	r4, r1
 80082b4:	d458      	bmi.n	8008368 <__sflush_r+0xc0>
 80082b6:	684b      	ldr	r3, [r1, #4]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	dc05      	bgt.n	80082c8 <__sflush_r+0x20>
 80082bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80082be:	2b00      	cmp	r3, #0
 80082c0:	dc02      	bgt.n	80082c8 <__sflush_r+0x20>
 80082c2:	2000      	movs	r0, #0
 80082c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082ca:	2e00      	cmp	r6, #0
 80082cc:	d0f9      	beq.n	80082c2 <__sflush_r+0x1a>
 80082ce:	2300      	movs	r3, #0
 80082d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80082d4:	682f      	ldr	r7, [r5, #0]
 80082d6:	602b      	str	r3, [r5, #0]
 80082d8:	d032      	beq.n	8008340 <__sflush_r+0x98>
 80082da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80082dc:	89a3      	ldrh	r3, [r4, #12]
 80082de:	075a      	lsls	r2, r3, #29
 80082e0:	d505      	bpl.n	80082ee <__sflush_r+0x46>
 80082e2:	6863      	ldr	r3, [r4, #4]
 80082e4:	1ac0      	subs	r0, r0, r3
 80082e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80082e8:	b10b      	cbz	r3, 80082ee <__sflush_r+0x46>
 80082ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80082ec:	1ac0      	subs	r0, r0, r3
 80082ee:	2300      	movs	r3, #0
 80082f0:	4602      	mov	r2, r0
 80082f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082f4:	6a21      	ldr	r1, [r4, #32]
 80082f6:	4628      	mov	r0, r5
 80082f8:	47b0      	blx	r6
 80082fa:	1c43      	adds	r3, r0, #1
 80082fc:	89a3      	ldrh	r3, [r4, #12]
 80082fe:	d106      	bne.n	800830e <__sflush_r+0x66>
 8008300:	6829      	ldr	r1, [r5, #0]
 8008302:	291d      	cmp	r1, #29
 8008304:	d82c      	bhi.n	8008360 <__sflush_r+0xb8>
 8008306:	4a2a      	ldr	r2, [pc, #168]	; (80083b0 <__sflush_r+0x108>)
 8008308:	40ca      	lsrs	r2, r1
 800830a:	07d6      	lsls	r6, r2, #31
 800830c:	d528      	bpl.n	8008360 <__sflush_r+0xb8>
 800830e:	2200      	movs	r2, #0
 8008310:	6062      	str	r2, [r4, #4]
 8008312:	04d9      	lsls	r1, r3, #19
 8008314:	6922      	ldr	r2, [r4, #16]
 8008316:	6022      	str	r2, [r4, #0]
 8008318:	d504      	bpl.n	8008324 <__sflush_r+0x7c>
 800831a:	1c42      	adds	r2, r0, #1
 800831c:	d101      	bne.n	8008322 <__sflush_r+0x7a>
 800831e:	682b      	ldr	r3, [r5, #0]
 8008320:	b903      	cbnz	r3, 8008324 <__sflush_r+0x7c>
 8008322:	6560      	str	r0, [r4, #84]	; 0x54
 8008324:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008326:	602f      	str	r7, [r5, #0]
 8008328:	2900      	cmp	r1, #0
 800832a:	d0ca      	beq.n	80082c2 <__sflush_r+0x1a>
 800832c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008330:	4299      	cmp	r1, r3
 8008332:	d002      	beq.n	800833a <__sflush_r+0x92>
 8008334:	4628      	mov	r0, r5
 8008336:	f000 f9d5 	bl	80086e4 <_free_r>
 800833a:	2000      	movs	r0, #0
 800833c:	6360      	str	r0, [r4, #52]	; 0x34
 800833e:	e7c1      	b.n	80082c4 <__sflush_r+0x1c>
 8008340:	6a21      	ldr	r1, [r4, #32]
 8008342:	2301      	movs	r3, #1
 8008344:	4628      	mov	r0, r5
 8008346:	47b0      	blx	r6
 8008348:	1c41      	adds	r1, r0, #1
 800834a:	d1c7      	bne.n	80082dc <__sflush_r+0x34>
 800834c:	682b      	ldr	r3, [r5, #0]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d0c4      	beq.n	80082dc <__sflush_r+0x34>
 8008352:	2b1d      	cmp	r3, #29
 8008354:	d001      	beq.n	800835a <__sflush_r+0xb2>
 8008356:	2b16      	cmp	r3, #22
 8008358:	d101      	bne.n	800835e <__sflush_r+0xb6>
 800835a:	602f      	str	r7, [r5, #0]
 800835c:	e7b1      	b.n	80082c2 <__sflush_r+0x1a>
 800835e:	89a3      	ldrh	r3, [r4, #12]
 8008360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008364:	81a3      	strh	r3, [r4, #12]
 8008366:	e7ad      	b.n	80082c4 <__sflush_r+0x1c>
 8008368:	690f      	ldr	r7, [r1, #16]
 800836a:	2f00      	cmp	r7, #0
 800836c:	d0a9      	beq.n	80082c2 <__sflush_r+0x1a>
 800836e:	0793      	lsls	r3, r2, #30
 8008370:	680e      	ldr	r6, [r1, #0]
 8008372:	bf08      	it	eq
 8008374:	694b      	ldreq	r3, [r1, #20]
 8008376:	600f      	str	r7, [r1, #0]
 8008378:	bf18      	it	ne
 800837a:	2300      	movne	r3, #0
 800837c:	eba6 0807 	sub.w	r8, r6, r7
 8008380:	608b      	str	r3, [r1, #8]
 8008382:	f1b8 0f00 	cmp.w	r8, #0
 8008386:	dd9c      	ble.n	80082c2 <__sflush_r+0x1a>
 8008388:	6a21      	ldr	r1, [r4, #32]
 800838a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800838c:	4643      	mov	r3, r8
 800838e:	463a      	mov	r2, r7
 8008390:	4628      	mov	r0, r5
 8008392:	47b0      	blx	r6
 8008394:	2800      	cmp	r0, #0
 8008396:	dc06      	bgt.n	80083a6 <__sflush_r+0xfe>
 8008398:	89a3      	ldrh	r3, [r4, #12]
 800839a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800839e:	81a3      	strh	r3, [r4, #12]
 80083a0:	f04f 30ff 	mov.w	r0, #4294967295
 80083a4:	e78e      	b.n	80082c4 <__sflush_r+0x1c>
 80083a6:	4407      	add	r7, r0
 80083a8:	eba8 0800 	sub.w	r8, r8, r0
 80083ac:	e7e9      	b.n	8008382 <__sflush_r+0xda>
 80083ae:	bf00      	nop
 80083b0:	20400001 	.word	0x20400001

080083b4 <_fflush_r>:
 80083b4:	b538      	push	{r3, r4, r5, lr}
 80083b6:	690b      	ldr	r3, [r1, #16]
 80083b8:	4605      	mov	r5, r0
 80083ba:	460c      	mov	r4, r1
 80083bc:	b913      	cbnz	r3, 80083c4 <_fflush_r+0x10>
 80083be:	2500      	movs	r5, #0
 80083c0:	4628      	mov	r0, r5
 80083c2:	bd38      	pop	{r3, r4, r5, pc}
 80083c4:	b118      	cbz	r0, 80083ce <_fflush_r+0x1a>
 80083c6:	6983      	ldr	r3, [r0, #24]
 80083c8:	b90b      	cbnz	r3, 80083ce <_fflush_r+0x1a>
 80083ca:	f000 f887 	bl	80084dc <__sinit>
 80083ce:	4b14      	ldr	r3, [pc, #80]	; (8008420 <_fflush_r+0x6c>)
 80083d0:	429c      	cmp	r4, r3
 80083d2:	d11b      	bne.n	800840c <_fflush_r+0x58>
 80083d4:	686c      	ldr	r4, [r5, #4]
 80083d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d0ef      	beq.n	80083be <_fflush_r+0xa>
 80083de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80083e0:	07d0      	lsls	r0, r2, #31
 80083e2:	d404      	bmi.n	80083ee <_fflush_r+0x3a>
 80083e4:	0599      	lsls	r1, r3, #22
 80083e6:	d402      	bmi.n	80083ee <_fflush_r+0x3a>
 80083e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083ea:	f000 f915 	bl	8008618 <__retarget_lock_acquire_recursive>
 80083ee:	4628      	mov	r0, r5
 80083f0:	4621      	mov	r1, r4
 80083f2:	f7ff ff59 	bl	80082a8 <__sflush_r>
 80083f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083f8:	07da      	lsls	r2, r3, #31
 80083fa:	4605      	mov	r5, r0
 80083fc:	d4e0      	bmi.n	80083c0 <_fflush_r+0xc>
 80083fe:	89a3      	ldrh	r3, [r4, #12]
 8008400:	059b      	lsls	r3, r3, #22
 8008402:	d4dd      	bmi.n	80083c0 <_fflush_r+0xc>
 8008404:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008406:	f000 f908 	bl	800861a <__retarget_lock_release_recursive>
 800840a:	e7d9      	b.n	80083c0 <_fflush_r+0xc>
 800840c:	4b05      	ldr	r3, [pc, #20]	; (8008424 <_fflush_r+0x70>)
 800840e:	429c      	cmp	r4, r3
 8008410:	d101      	bne.n	8008416 <_fflush_r+0x62>
 8008412:	68ac      	ldr	r4, [r5, #8]
 8008414:	e7df      	b.n	80083d6 <_fflush_r+0x22>
 8008416:	4b04      	ldr	r3, [pc, #16]	; (8008428 <_fflush_r+0x74>)
 8008418:	429c      	cmp	r4, r3
 800841a:	bf08      	it	eq
 800841c:	68ec      	ldreq	r4, [r5, #12]
 800841e:	e7da      	b.n	80083d6 <_fflush_r+0x22>
 8008420:	0800957c 	.word	0x0800957c
 8008424:	0800959c 	.word	0x0800959c
 8008428:	0800955c 	.word	0x0800955c

0800842c <std>:
 800842c:	2300      	movs	r3, #0
 800842e:	b510      	push	{r4, lr}
 8008430:	4604      	mov	r4, r0
 8008432:	e9c0 3300 	strd	r3, r3, [r0]
 8008436:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800843a:	6083      	str	r3, [r0, #8]
 800843c:	8181      	strh	r1, [r0, #12]
 800843e:	6643      	str	r3, [r0, #100]	; 0x64
 8008440:	81c2      	strh	r2, [r0, #14]
 8008442:	6183      	str	r3, [r0, #24]
 8008444:	4619      	mov	r1, r3
 8008446:	2208      	movs	r2, #8
 8008448:	305c      	adds	r0, #92	; 0x5c
 800844a:	f7ff fdb7 	bl	8007fbc <memset>
 800844e:	4b05      	ldr	r3, [pc, #20]	; (8008464 <std+0x38>)
 8008450:	6263      	str	r3, [r4, #36]	; 0x24
 8008452:	4b05      	ldr	r3, [pc, #20]	; (8008468 <std+0x3c>)
 8008454:	62a3      	str	r3, [r4, #40]	; 0x28
 8008456:	4b05      	ldr	r3, [pc, #20]	; (800846c <std+0x40>)
 8008458:	62e3      	str	r3, [r4, #44]	; 0x2c
 800845a:	4b05      	ldr	r3, [pc, #20]	; (8008470 <std+0x44>)
 800845c:	6224      	str	r4, [r4, #32]
 800845e:	6323      	str	r3, [r4, #48]	; 0x30
 8008460:	bd10      	pop	{r4, pc}
 8008462:	bf00      	nop
 8008464:	080090ed 	.word	0x080090ed
 8008468:	0800910f 	.word	0x0800910f
 800846c:	08009147 	.word	0x08009147
 8008470:	0800916b 	.word	0x0800916b

08008474 <_cleanup_r>:
 8008474:	4901      	ldr	r1, [pc, #4]	; (800847c <_cleanup_r+0x8>)
 8008476:	f000 b8af 	b.w	80085d8 <_fwalk_reent>
 800847a:	bf00      	nop
 800847c:	080083b5 	.word	0x080083b5

08008480 <__sfmoreglue>:
 8008480:	b570      	push	{r4, r5, r6, lr}
 8008482:	1e4a      	subs	r2, r1, #1
 8008484:	2568      	movs	r5, #104	; 0x68
 8008486:	4355      	muls	r5, r2
 8008488:	460e      	mov	r6, r1
 800848a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800848e:	f000 f979 	bl	8008784 <_malloc_r>
 8008492:	4604      	mov	r4, r0
 8008494:	b140      	cbz	r0, 80084a8 <__sfmoreglue+0x28>
 8008496:	2100      	movs	r1, #0
 8008498:	e9c0 1600 	strd	r1, r6, [r0]
 800849c:	300c      	adds	r0, #12
 800849e:	60a0      	str	r0, [r4, #8]
 80084a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80084a4:	f7ff fd8a 	bl	8007fbc <memset>
 80084a8:	4620      	mov	r0, r4
 80084aa:	bd70      	pop	{r4, r5, r6, pc}

080084ac <__sfp_lock_acquire>:
 80084ac:	4801      	ldr	r0, [pc, #4]	; (80084b4 <__sfp_lock_acquire+0x8>)
 80084ae:	f000 b8b3 	b.w	8008618 <__retarget_lock_acquire_recursive>
 80084b2:	bf00      	nop
 80084b4:	20004374 	.word	0x20004374

080084b8 <__sfp_lock_release>:
 80084b8:	4801      	ldr	r0, [pc, #4]	; (80084c0 <__sfp_lock_release+0x8>)
 80084ba:	f000 b8ae 	b.w	800861a <__retarget_lock_release_recursive>
 80084be:	bf00      	nop
 80084c0:	20004374 	.word	0x20004374

080084c4 <__sinit_lock_acquire>:
 80084c4:	4801      	ldr	r0, [pc, #4]	; (80084cc <__sinit_lock_acquire+0x8>)
 80084c6:	f000 b8a7 	b.w	8008618 <__retarget_lock_acquire_recursive>
 80084ca:	bf00      	nop
 80084cc:	2000436f 	.word	0x2000436f

080084d0 <__sinit_lock_release>:
 80084d0:	4801      	ldr	r0, [pc, #4]	; (80084d8 <__sinit_lock_release+0x8>)
 80084d2:	f000 b8a2 	b.w	800861a <__retarget_lock_release_recursive>
 80084d6:	bf00      	nop
 80084d8:	2000436f 	.word	0x2000436f

080084dc <__sinit>:
 80084dc:	b510      	push	{r4, lr}
 80084de:	4604      	mov	r4, r0
 80084e0:	f7ff fff0 	bl	80084c4 <__sinit_lock_acquire>
 80084e4:	69a3      	ldr	r3, [r4, #24]
 80084e6:	b11b      	cbz	r3, 80084f0 <__sinit+0x14>
 80084e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084ec:	f7ff bff0 	b.w	80084d0 <__sinit_lock_release>
 80084f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80084f4:	6523      	str	r3, [r4, #80]	; 0x50
 80084f6:	4b13      	ldr	r3, [pc, #76]	; (8008544 <__sinit+0x68>)
 80084f8:	4a13      	ldr	r2, [pc, #76]	; (8008548 <__sinit+0x6c>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80084fe:	42a3      	cmp	r3, r4
 8008500:	bf04      	itt	eq
 8008502:	2301      	moveq	r3, #1
 8008504:	61a3      	streq	r3, [r4, #24]
 8008506:	4620      	mov	r0, r4
 8008508:	f000 f820 	bl	800854c <__sfp>
 800850c:	6060      	str	r0, [r4, #4]
 800850e:	4620      	mov	r0, r4
 8008510:	f000 f81c 	bl	800854c <__sfp>
 8008514:	60a0      	str	r0, [r4, #8]
 8008516:	4620      	mov	r0, r4
 8008518:	f000 f818 	bl	800854c <__sfp>
 800851c:	2200      	movs	r2, #0
 800851e:	60e0      	str	r0, [r4, #12]
 8008520:	2104      	movs	r1, #4
 8008522:	6860      	ldr	r0, [r4, #4]
 8008524:	f7ff ff82 	bl	800842c <std>
 8008528:	68a0      	ldr	r0, [r4, #8]
 800852a:	2201      	movs	r2, #1
 800852c:	2109      	movs	r1, #9
 800852e:	f7ff ff7d 	bl	800842c <std>
 8008532:	68e0      	ldr	r0, [r4, #12]
 8008534:	2202      	movs	r2, #2
 8008536:	2112      	movs	r1, #18
 8008538:	f7ff ff78 	bl	800842c <std>
 800853c:	2301      	movs	r3, #1
 800853e:	61a3      	str	r3, [r4, #24]
 8008540:	e7d2      	b.n	80084e8 <__sinit+0xc>
 8008542:	bf00      	nop
 8008544:	08009558 	.word	0x08009558
 8008548:	08008475 	.word	0x08008475

0800854c <__sfp>:
 800854c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800854e:	4607      	mov	r7, r0
 8008550:	f7ff ffac 	bl	80084ac <__sfp_lock_acquire>
 8008554:	4b1e      	ldr	r3, [pc, #120]	; (80085d0 <__sfp+0x84>)
 8008556:	681e      	ldr	r6, [r3, #0]
 8008558:	69b3      	ldr	r3, [r6, #24]
 800855a:	b913      	cbnz	r3, 8008562 <__sfp+0x16>
 800855c:	4630      	mov	r0, r6
 800855e:	f7ff ffbd 	bl	80084dc <__sinit>
 8008562:	3648      	adds	r6, #72	; 0x48
 8008564:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008568:	3b01      	subs	r3, #1
 800856a:	d503      	bpl.n	8008574 <__sfp+0x28>
 800856c:	6833      	ldr	r3, [r6, #0]
 800856e:	b30b      	cbz	r3, 80085b4 <__sfp+0x68>
 8008570:	6836      	ldr	r6, [r6, #0]
 8008572:	e7f7      	b.n	8008564 <__sfp+0x18>
 8008574:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008578:	b9d5      	cbnz	r5, 80085b0 <__sfp+0x64>
 800857a:	4b16      	ldr	r3, [pc, #88]	; (80085d4 <__sfp+0x88>)
 800857c:	60e3      	str	r3, [r4, #12]
 800857e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008582:	6665      	str	r5, [r4, #100]	; 0x64
 8008584:	f000 f847 	bl	8008616 <__retarget_lock_init_recursive>
 8008588:	f7ff ff96 	bl	80084b8 <__sfp_lock_release>
 800858c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008590:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008594:	6025      	str	r5, [r4, #0]
 8008596:	61a5      	str	r5, [r4, #24]
 8008598:	2208      	movs	r2, #8
 800859a:	4629      	mov	r1, r5
 800859c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80085a0:	f7ff fd0c 	bl	8007fbc <memset>
 80085a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80085a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80085ac:	4620      	mov	r0, r4
 80085ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085b0:	3468      	adds	r4, #104	; 0x68
 80085b2:	e7d9      	b.n	8008568 <__sfp+0x1c>
 80085b4:	2104      	movs	r1, #4
 80085b6:	4638      	mov	r0, r7
 80085b8:	f7ff ff62 	bl	8008480 <__sfmoreglue>
 80085bc:	4604      	mov	r4, r0
 80085be:	6030      	str	r0, [r6, #0]
 80085c0:	2800      	cmp	r0, #0
 80085c2:	d1d5      	bne.n	8008570 <__sfp+0x24>
 80085c4:	f7ff ff78 	bl	80084b8 <__sfp_lock_release>
 80085c8:	230c      	movs	r3, #12
 80085ca:	603b      	str	r3, [r7, #0]
 80085cc:	e7ee      	b.n	80085ac <__sfp+0x60>
 80085ce:	bf00      	nop
 80085d0:	08009558 	.word	0x08009558
 80085d4:	ffff0001 	.word	0xffff0001

080085d8 <_fwalk_reent>:
 80085d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085dc:	4606      	mov	r6, r0
 80085de:	4688      	mov	r8, r1
 80085e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80085e4:	2700      	movs	r7, #0
 80085e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80085ea:	f1b9 0901 	subs.w	r9, r9, #1
 80085ee:	d505      	bpl.n	80085fc <_fwalk_reent+0x24>
 80085f0:	6824      	ldr	r4, [r4, #0]
 80085f2:	2c00      	cmp	r4, #0
 80085f4:	d1f7      	bne.n	80085e6 <_fwalk_reent+0xe>
 80085f6:	4638      	mov	r0, r7
 80085f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085fc:	89ab      	ldrh	r3, [r5, #12]
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d907      	bls.n	8008612 <_fwalk_reent+0x3a>
 8008602:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008606:	3301      	adds	r3, #1
 8008608:	d003      	beq.n	8008612 <_fwalk_reent+0x3a>
 800860a:	4629      	mov	r1, r5
 800860c:	4630      	mov	r0, r6
 800860e:	47c0      	blx	r8
 8008610:	4307      	orrs	r7, r0
 8008612:	3568      	adds	r5, #104	; 0x68
 8008614:	e7e9      	b.n	80085ea <_fwalk_reent+0x12>

08008616 <__retarget_lock_init_recursive>:
 8008616:	4770      	bx	lr

08008618 <__retarget_lock_acquire_recursive>:
 8008618:	4770      	bx	lr

0800861a <__retarget_lock_release_recursive>:
 800861a:	4770      	bx	lr

0800861c <__swhatbuf_r>:
 800861c:	b570      	push	{r4, r5, r6, lr}
 800861e:	460e      	mov	r6, r1
 8008620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008624:	2900      	cmp	r1, #0
 8008626:	b096      	sub	sp, #88	; 0x58
 8008628:	4614      	mov	r4, r2
 800862a:	461d      	mov	r5, r3
 800862c:	da07      	bge.n	800863e <__swhatbuf_r+0x22>
 800862e:	2300      	movs	r3, #0
 8008630:	602b      	str	r3, [r5, #0]
 8008632:	89b3      	ldrh	r3, [r6, #12]
 8008634:	061a      	lsls	r2, r3, #24
 8008636:	d410      	bmi.n	800865a <__swhatbuf_r+0x3e>
 8008638:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800863c:	e00e      	b.n	800865c <__swhatbuf_r+0x40>
 800863e:	466a      	mov	r2, sp
 8008640:	f000 fdba 	bl	80091b8 <_fstat_r>
 8008644:	2800      	cmp	r0, #0
 8008646:	dbf2      	blt.n	800862e <__swhatbuf_r+0x12>
 8008648:	9a01      	ldr	r2, [sp, #4]
 800864a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800864e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008652:	425a      	negs	r2, r3
 8008654:	415a      	adcs	r2, r3
 8008656:	602a      	str	r2, [r5, #0]
 8008658:	e7ee      	b.n	8008638 <__swhatbuf_r+0x1c>
 800865a:	2340      	movs	r3, #64	; 0x40
 800865c:	2000      	movs	r0, #0
 800865e:	6023      	str	r3, [r4, #0]
 8008660:	b016      	add	sp, #88	; 0x58
 8008662:	bd70      	pop	{r4, r5, r6, pc}

08008664 <__smakebuf_r>:
 8008664:	898b      	ldrh	r3, [r1, #12]
 8008666:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008668:	079d      	lsls	r5, r3, #30
 800866a:	4606      	mov	r6, r0
 800866c:	460c      	mov	r4, r1
 800866e:	d507      	bpl.n	8008680 <__smakebuf_r+0x1c>
 8008670:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008674:	6023      	str	r3, [r4, #0]
 8008676:	6123      	str	r3, [r4, #16]
 8008678:	2301      	movs	r3, #1
 800867a:	6163      	str	r3, [r4, #20]
 800867c:	b002      	add	sp, #8
 800867e:	bd70      	pop	{r4, r5, r6, pc}
 8008680:	ab01      	add	r3, sp, #4
 8008682:	466a      	mov	r2, sp
 8008684:	f7ff ffca 	bl	800861c <__swhatbuf_r>
 8008688:	9900      	ldr	r1, [sp, #0]
 800868a:	4605      	mov	r5, r0
 800868c:	4630      	mov	r0, r6
 800868e:	f000 f879 	bl	8008784 <_malloc_r>
 8008692:	b948      	cbnz	r0, 80086a8 <__smakebuf_r+0x44>
 8008694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008698:	059a      	lsls	r2, r3, #22
 800869a:	d4ef      	bmi.n	800867c <__smakebuf_r+0x18>
 800869c:	f023 0303 	bic.w	r3, r3, #3
 80086a0:	f043 0302 	orr.w	r3, r3, #2
 80086a4:	81a3      	strh	r3, [r4, #12]
 80086a6:	e7e3      	b.n	8008670 <__smakebuf_r+0xc>
 80086a8:	4b0d      	ldr	r3, [pc, #52]	; (80086e0 <__smakebuf_r+0x7c>)
 80086aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80086ac:	89a3      	ldrh	r3, [r4, #12]
 80086ae:	6020      	str	r0, [r4, #0]
 80086b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086b4:	81a3      	strh	r3, [r4, #12]
 80086b6:	9b00      	ldr	r3, [sp, #0]
 80086b8:	6163      	str	r3, [r4, #20]
 80086ba:	9b01      	ldr	r3, [sp, #4]
 80086bc:	6120      	str	r0, [r4, #16]
 80086be:	b15b      	cbz	r3, 80086d8 <__smakebuf_r+0x74>
 80086c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086c4:	4630      	mov	r0, r6
 80086c6:	f000 fd89 	bl	80091dc <_isatty_r>
 80086ca:	b128      	cbz	r0, 80086d8 <__smakebuf_r+0x74>
 80086cc:	89a3      	ldrh	r3, [r4, #12]
 80086ce:	f023 0303 	bic.w	r3, r3, #3
 80086d2:	f043 0301 	orr.w	r3, r3, #1
 80086d6:	81a3      	strh	r3, [r4, #12]
 80086d8:	89a0      	ldrh	r0, [r4, #12]
 80086da:	4305      	orrs	r5, r0
 80086dc:	81a5      	strh	r5, [r4, #12]
 80086de:	e7cd      	b.n	800867c <__smakebuf_r+0x18>
 80086e0:	08008475 	.word	0x08008475

080086e4 <_free_r>:
 80086e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086e6:	2900      	cmp	r1, #0
 80086e8:	d048      	beq.n	800877c <_free_r+0x98>
 80086ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086ee:	9001      	str	r0, [sp, #4]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	f1a1 0404 	sub.w	r4, r1, #4
 80086f6:	bfb8      	it	lt
 80086f8:	18e4      	addlt	r4, r4, r3
 80086fa:	f000 fdb9 	bl	8009270 <__malloc_lock>
 80086fe:	4a20      	ldr	r2, [pc, #128]	; (8008780 <_free_r+0x9c>)
 8008700:	9801      	ldr	r0, [sp, #4]
 8008702:	6813      	ldr	r3, [r2, #0]
 8008704:	4615      	mov	r5, r2
 8008706:	b933      	cbnz	r3, 8008716 <_free_r+0x32>
 8008708:	6063      	str	r3, [r4, #4]
 800870a:	6014      	str	r4, [r2, #0]
 800870c:	b003      	add	sp, #12
 800870e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008712:	f000 bdb3 	b.w	800927c <__malloc_unlock>
 8008716:	42a3      	cmp	r3, r4
 8008718:	d90b      	bls.n	8008732 <_free_r+0x4e>
 800871a:	6821      	ldr	r1, [r4, #0]
 800871c:	1862      	adds	r2, r4, r1
 800871e:	4293      	cmp	r3, r2
 8008720:	bf04      	itt	eq
 8008722:	681a      	ldreq	r2, [r3, #0]
 8008724:	685b      	ldreq	r3, [r3, #4]
 8008726:	6063      	str	r3, [r4, #4]
 8008728:	bf04      	itt	eq
 800872a:	1852      	addeq	r2, r2, r1
 800872c:	6022      	streq	r2, [r4, #0]
 800872e:	602c      	str	r4, [r5, #0]
 8008730:	e7ec      	b.n	800870c <_free_r+0x28>
 8008732:	461a      	mov	r2, r3
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	b10b      	cbz	r3, 800873c <_free_r+0x58>
 8008738:	42a3      	cmp	r3, r4
 800873a:	d9fa      	bls.n	8008732 <_free_r+0x4e>
 800873c:	6811      	ldr	r1, [r2, #0]
 800873e:	1855      	adds	r5, r2, r1
 8008740:	42a5      	cmp	r5, r4
 8008742:	d10b      	bne.n	800875c <_free_r+0x78>
 8008744:	6824      	ldr	r4, [r4, #0]
 8008746:	4421      	add	r1, r4
 8008748:	1854      	adds	r4, r2, r1
 800874a:	42a3      	cmp	r3, r4
 800874c:	6011      	str	r1, [r2, #0]
 800874e:	d1dd      	bne.n	800870c <_free_r+0x28>
 8008750:	681c      	ldr	r4, [r3, #0]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	6053      	str	r3, [r2, #4]
 8008756:	4421      	add	r1, r4
 8008758:	6011      	str	r1, [r2, #0]
 800875a:	e7d7      	b.n	800870c <_free_r+0x28>
 800875c:	d902      	bls.n	8008764 <_free_r+0x80>
 800875e:	230c      	movs	r3, #12
 8008760:	6003      	str	r3, [r0, #0]
 8008762:	e7d3      	b.n	800870c <_free_r+0x28>
 8008764:	6825      	ldr	r5, [r4, #0]
 8008766:	1961      	adds	r1, r4, r5
 8008768:	428b      	cmp	r3, r1
 800876a:	bf04      	itt	eq
 800876c:	6819      	ldreq	r1, [r3, #0]
 800876e:	685b      	ldreq	r3, [r3, #4]
 8008770:	6063      	str	r3, [r4, #4]
 8008772:	bf04      	itt	eq
 8008774:	1949      	addeq	r1, r1, r5
 8008776:	6021      	streq	r1, [r4, #0]
 8008778:	6054      	str	r4, [r2, #4]
 800877a:	e7c7      	b.n	800870c <_free_r+0x28>
 800877c:	b003      	add	sp, #12
 800877e:	bd30      	pop	{r4, r5, pc}
 8008780:	20000100 	.word	0x20000100

08008784 <_malloc_r>:
 8008784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008786:	1ccd      	adds	r5, r1, #3
 8008788:	f025 0503 	bic.w	r5, r5, #3
 800878c:	3508      	adds	r5, #8
 800878e:	2d0c      	cmp	r5, #12
 8008790:	bf38      	it	cc
 8008792:	250c      	movcc	r5, #12
 8008794:	2d00      	cmp	r5, #0
 8008796:	4606      	mov	r6, r0
 8008798:	db01      	blt.n	800879e <_malloc_r+0x1a>
 800879a:	42a9      	cmp	r1, r5
 800879c:	d903      	bls.n	80087a6 <_malloc_r+0x22>
 800879e:	230c      	movs	r3, #12
 80087a0:	6033      	str	r3, [r6, #0]
 80087a2:	2000      	movs	r0, #0
 80087a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087a6:	f000 fd63 	bl	8009270 <__malloc_lock>
 80087aa:	4921      	ldr	r1, [pc, #132]	; (8008830 <_malloc_r+0xac>)
 80087ac:	680a      	ldr	r2, [r1, #0]
 80087ae:	4614      	mov	r4, r2
 80087b0:	b99c      	cbnz	r4, 80087da <_malloc_r+0x56>
 80087b2:	4f20      	ldr	r7, [pc, #128]	; (8008834 <_malloc_r+0xb0>)
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	b923      	cbnz	r3, 80087c2 <_malloc_r+0x3e>
 80087b8:	4621      	mov	r1, r4
 80087ba:	4630      	mov	r0, r6
 80087bc:	f000 fc86 	bl	80090cc <_sbrk_r>
 80087c0:	6038      	str	r0, [r7, #0]
 80087c2:	4629      	mov	r1, r5
 80087c4:	4630      	mov	r0, r6
 80087c6:	f000 fc81 	bl	80090cc <_sbrk_r>
 80087ca:	1c43      	adds	r3, r0, #1
 80087cc:	d123      	bne.n	8008816 <_malloc_r+0x92>
 80087ce:	230c      	movs	r3, #12
 80087d0:	6033      	str	r3, [r6, #0]
 80087d2:	4630      	mov	r0, r6
 80087d4:	f000 fd52 	bl	800927c <__malloc_unlock>
 80087d8:	e7e3      	b.n	80087a2 <_malloc_r+0x1e>
 80087da:	6823      	ldr	r3, [r4, #0]
 80087dc:	1b5b      	subs	r3, r3, r5
 80087de:	d417      	bmi.n	8008810 <_malloc_r+0x8c>
 80087e0:	2b0b      	cmp	r3, #11
 80087e2:	d903      	bls.n	80087ec <_malloc_r+0x68>
 80087e4:	6023      	str	r3, [r4, #0]
 80087e6:	441c      	add	r4, r3
 80087e8:	6025      	str	r5, [r4, #0]
 80087ea:	e004      	b.n	80087f6 <_malloc_r+0x72>
 80087ec:	6863      	ldr	r3, [r4, #4]
 80087ee:	42a2      	cmp	r2, r4
 80087f0:	bf0c      	ite	eq
 80087f2:	600b      	streq	r3, [r1, #0]
 80087f4:	6053      	strne	r3, [r2, #4]
 80087f6:	4630      	mov	r0, r6
 80087f8:	f000 fd40 	bl	800927c <__malloc_unlock>
 80087fc:	f104 000b 	add.w	r0, r4, #11
 8008800:	1d23      	adds	r3, r4, #4
 8008802:	f020 0007 	bic.w	r0, r0, #7
 8008806:	1ac2      	subs	r2, r0, r3
 8008808:	d0cc      	beq.n	80087a4 <_malloc_r+0x20>
 800880a:	1a1b      	subs	r3, r3, r0
 800880c:	50a3      	str	r3, [r4, r2]
 800880e:	e7c9      	b.n	80087a4 <_malloc_r+0x20>
 8008810:	4622      	mov	r2, r4
 8008812:	6864      	ldr	r4, [r4, #4]
 8008814:	e7cc      	b.n	80087b0 <_malloc_r+0x2c>
 8008816:	1cc4      	adds	r4, r0, #3
 8008818:	f024 0403 	bic.w	r4, r4, #3
 800881c:	42a0      	cmp	r0, r4
 800881e:	d0e3      	beq.n	80087e8 <_malloc_r+0x64>
 8008820:	1a21      	subs	r1, r4, r0
 8008822:	4630      	mov	r0, r6
 8008824:	f000 fc52 	bl	80090cc <_sbrk_r>
 8008828:	3001      	adds	r0, #1
 800882a:	d1dd      	bne.n	80087e8 <_malloc_r+0x64>
 800882c:	e7cf      	b.n	80087ce <_malloc_r+0x4a>
 800882e:	bf00      	nop
 8008830:	20000100 	.word	0x20000100
 8008834:	20000104 	.word	0x20000104

08008838 <__ssputs_r>:
 8008838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800883c:	688e      	ldr	r6, [r1, #8]
 800883e:	429e      	cmp	r6, r3
 8008840:	4682      	mov	sl, r0
 8008842:	460c      	mov	r4, r1
 8008844:	4690      	mov	r8, r2
 8008846:	461f      	mov	r7, r3
 8008848:	d838      	bhi.n	80088bc <__ssputs_r+0x84>
 800884a:	898a      	ldrh	r2, [r1, #12]
 800884c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008850:	d032      	beq.n	80088b8 <__ssputs_r+0x80>
 8008852:	6825      	ldr	r5, [r4, #0]
 8008854:	6909      	ldr	r1, [r1, #16]
 8008856:	eba5 0901 	sub.w	r9, r5, r1
 800885a:	6965      	ldr	r5, [r4, #20]
 800885c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008860:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008864:	3301      	adds	r3, #1
 8008866:	444b      	add	r3, r9
 8008868:	106d      	asrs	r5, r5, #1
 800886a:	429d      	cmp	r5, r3
 800886c:	bf38      	it	cc
 800886e:	461d      	movcc	r5, r3
 8008870:	0553      	lsls	r3, r2, #21
 8008872:	d531      	bpl.n	80088d8 <__ssputs_r+0xa0>
 8008874:	4629      	mov	r1, r5
 8008876:	f7ff ff85 	bl	8008784 <_malloc_r>
 800887a:	4606      	mov	r6, r0
 800887c:	b950      	cbnz	r0, 8008894 <__ssputs_r+0x5c>
 800887e:	230c      	movs	r3, #12
 8008880:	f8ca 3000 	str.w	r3, [sl]
 8008884:	89a3      	ldrh	r3, [r4, #12]
 8008886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800888a:	81a3      	strh	r3, [r4, #12]
 800888c:	f04f 30ff 	mov.w	r0, #4294967295
 8008890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008894:	6921      	ldr	r1, [r4, #16]
 8008896:	464a      	mov	r2, r9
 8008898:	f000 fcc2 	bl	8009220 <memcpy>
 800889c:	89a3      	ldrh	r3, [r4, #12]
 800889e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80088a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088a6:	81a3      	strh	r3, [r4, #12]
 80088a8:	6126      	str	r6, [r4, #16]
 80088aa:	6165      	str	r5, [r4, #20]
 80088ac:	444e      	add	r6, r9
 80088ae:	eba5 0509 	sub.w	r5, r5, r9
 80088b2:	6026      	str	r6, [r4, #0]
 80088b4:	60a5      	str	r5, [r4, #8]
 80088b6:	463e      	mov	r6, r7
 80088b8:	42be      	cmp	r6, r7
 80088ba:	d900      	bls.n	80088be <__ssputs_r+0x86>
 80088bc:	463e      	mov	r6, r7
 80088be:	4632      	mov	r2, r6
 80088c0:	6820      	ldr	r0, [r4, #0]
 80088c2:	4641      	mov	r1, r8
 80088c4:	f000 fcba 	bl	800923c <memmove>
 80088c8:	68a3      	ldr	r3, [r4, #8]
 80088ca:	6822      	ldr	r2, [r4, #0]
 80088cc:	1b9b      	subs	r3, r3, r6
 80088ce:	4432      	add	r2, r6
 80088d0:	60a3      	str	r3, [r4, #8]
 80088d2:	6022      	str	r2, [r4, #0]
 80088d4:	2000      	movs	r0, #0
 80088d6:	e7db      	b.n	8008890 <__ssputs_r+0x58>
 80088d8:	462a      	mov	r2, r5
 80088da:	f000 fcd5 	bl	8009288 <_realloc_r>
 80088de:	4606      	mov	r6, r0
 80088e0:	2800      	cmp	r0, #0
 80088e2:	d1e1      	bne.n	80088a8 <__ssputs_r+0x70>
 80088e4:	6921      	ldr	r1, [r4, #16]
 80088e6:	4650      	mov	r0, sl
 80088e8:	f7ff fefc 	bl	80086e4 <_free_r>
 80088ec:	e7c7      	b.n	800887e <__ssputs_r+0x46>
	...

080088f0 <_svfiprintf_r>:
 80088f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088f4:	4698      	mov	r8, r3
 80088f6:	898b      	ldrh	r3, [r1, #12]
 80088f8:	061b      	lsls	r3, r3, #24
 80088fa:	b09d      	sub	sp, #116	; 0x74
 80088fc:	4607      	mov	r7, r0
 80088fe:	460d      	mov	r5, r1
 8008900:	4614      	mov	r4, r2
 8008902:	d50e      	bpl.n	8008922 <_svfiprintf_r+0x32>
 8008904:	690b      	ldr	r3, [r1, #16]
 8008906:	b963      	cbnz	r3, 8008922 <_svfiprintf_r+0x32>
 8008908:	2140      	movs	r1, #64	; 0x40
 800890a:	f7ff ff3b 	bl	8008784 <_malloc_r>
 800890e:	6028      	str	r0, [r5, #0]
 8008910:	6128      	str	r0, [r5, #16]
 8008912:	b920      	cbnz	r0, 800891e <_svfiprintf_r+0x2e>
 8008914:	230c      	movs	r3, #12
 8008916:	603b      	str	r3, [r7, #0]
 8008918:	f04f 30ff 	mov.w	r0, #4294967295
 800891c:	e0d1      	b.n	8008ac2 <_svfiprintf_r+0x1d2>
 800891e:	2340      	movs	r3, #64	; 0x40
 8008920:	616b      	str	r3, [r5, #20]
 8008922:	2300      	movs	r3, #0
 8008924:	9309      	str	r3, [sp, #36]	; 0x24
 8008926:	2320      	movs	r3, #32
 8008928:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800892c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008930:	2330      	movs	r3, #48	; 0x30
 8008932:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008adc <_svfiprintf_r+0x1ec>
 8008936:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800893a:	f04f 0901 	mov.w	r9, #1
 800893e:	4623      	mov	r3, r4
 8008940:	469a      	mov	sl, r3
 8008942:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008946:	b10a      	cbz	r2, 800894c <_svfiprintf_r+0x5c>
 8008948:	2a25      	cmp	r2, #37	; 0x25
 800894a:	d1f9      	bne.n	8008940 <_svfiprintf_r+0x50>
 800894c:	ebba 0b04 	subs.w	fp, sl, r4
 8008950:	d00b      	beq.n	800896a <_svfiprintf_r+0x7a>
 8008952:	465b      	mov	r3, fp
 8008954:	4622      	mov	r2, r4
 8008956:	4629      	mov	r1, r5
 8008958:	4638      	mov	r0, r7
 800895a:	f7ff ff6d 	bl	8008838 <__ssputs_r>
 800895e:	3001      	adds	r0, #1
 8008960:	f000 80aa 	beq.w	8008ab8 <_svfiprintf_r+0x1c8>
 8008964:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008966:	445a      	add	r2, fp
 8008968:	9209      	str	r2, [sp, #36]	; 0x24
 800896a:	f89a 3000 	ldrb.w	r3, [sl]
 800896e:	2b00      	cmp	r3, #0
 8008970:	f000 80a2 	beq.w	8008ab8 <_svfiprintf_r+0x1c8>
 8008974:	2300      	movs	r3, #0
 8008976:	f04f 32ff 	mov.w	r2, #4294967295
 800897a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800897e:	f10a 0a01 	add.w	sl, sl, #1
 8008982:	9304      	str	r3, [sp, #16]
 8008984:	9307      	str	r3, [sp, #28]
 8008986:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800898a:	931a      	str	r3, [sp, #104]	; 0x68
 800898c:	4654      	mov	r4, sl
 800898e:	2205      	movs	r2, #5
 8008990:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008994:	4851      	ldr	r0, [pc, #324]	; (8008adc <_svfiprintf_r+0x1ec>)
 8008996:	f7f7 fc33 	bl	8000200 <memchr>
 800899a:	9a04      	ldr	r2, [sp, #16]
 800899c:	b9d8      	cbnz	r0, 80089d6 <_svfiprintf_r+0xe6>
 800899e:	06d0      	lsls	r0, r2, #27
 80089a0:	bf44      	itt	mi
 80089a2:	2320      	movmi	r3, #32
 80089a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089a8:	0711      	lsls	r1, r2, #28
 80089aa:	bf44      	itt	mi
 80089ac:	232b      	movmi	r3, #43	; 0x2b
 80089ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089b2:	f89a 3000 	ldrb.w	r3, [sl]
 80089b6:	2b2a      	cmp	r3, #42	; 0x2a
 80089b8:	d015      	beq.n	80089e6 <_svfiprintf_r+0xf6>
 80089ba:	9a07      	ldr	r2, [sp, #28]
 80089bc:	4654      	mov	r4, sl
 80089be:	2000      	movs	r0, #0
 80089c0:	f04f 0c0a 	mov.w	ip, #10
 80089c4:	4621      	mov	r1, r4
 80089c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089ca:	3b30      	subs	r3, #48	; 0x30
 80089cc:	2b09      	cmp	r3, #9
 80089ce:	d94e      	bls.n	8008a6e <_svfiprintf_r+0x17e>
 80089d0:	b1b0      	cbz	r0, 8008a00 <_svfiprintf_r+0x110>
 80089d2:	9207      	str	r2, [sp, #28]
 80089d4:	e014      	b.n	8008a00 <_svfiprintf_r+0x110>
 80089d6:	eba0 0308 	sub.w	r3, r0, r8
 80089da:	fa09 f303 	lsl.w	r3, r9, r3
 80089de:	4313      	orrs	r3, r2
 80089e0:	9304      	str	r3, [sp, #16]
 80089e2:	46a2      	mov	sl, r4
 80089e4:	e7d2      	b.n	800898c <_svfiprintf_r+0x9c>
 80089e6:	9b03      	ldr	r3, [sp, #12]
 80089e8:	1d19      	adds	r1, r3, #4
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	9103      	str	r1, [sp, #12]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	bfbb      	ittet	lt
 80089f2:	425b      	neglt	r3, r3
 80089f4:	f042 0202 	orrlt.w	r2, r2, #2
 80089f8:	9307      	strge	r3, [sp, #28]
 80089fa:	9307      	strlt	r3, [sp, #28]
 80089fc:	bfb8      	it	lt
 80089fe:	9204      	strlt	r2, [sp, #16]
 8008a00:	7823      	ldrb	r3, [r4, #0]
 8008a02:	2b2e      	cmp	r3, #46	; 0x2e
 8008a04:	d10c      	bne.n	8008a20 <_svfiprintf_r+0x130>
 8008a06:	7863      	ldrb	r3, [r4, #1]
 8008a08:	2b2a      	cmp	r3, #42	; 0x2a
 8008a0a:	d135      	bne.n	8008a78 <_svfiprintf_r+0x188>
 8008a0c:	9b03      	ldr	r3, [sp, #12]
 8008a0e:	1d1a      	adds	r2, r3, #4
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	9203      	str	r2, [sp, #12]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	bfb8      	it	lt
 8008a18:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a1c:	3402      	adds	r4, #2
 8008a1e:	9305      	str	r3, [sp, #20]
 8008a20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008aec <_svfiprintf_r+0x1fc>
 8008a24:	7821      	ldrb	r1, [r4, #0]
 8008a26:	2203      	movs	r2, #3
 8008a28:	4650      	mov	r0, sl
 8008a2a:	f7f7 fbe9 	bl	8000200 <memchr>
 8008a2e:	b140      	cbz	r0, 8008a42 <_svfiprintf_r+0x152>
 8008a30:	2340      	movs	r3, #64	; 0x40
 8008a32:	eba0 000a 	sub.w	r0, r0, sl
 8008a36:	fa03 f000 	lsl.w	r0, r3, r0
 8008a3a:	9b04      	ldr	r3, [sp, #16]
 8008a3c:	4303      	orrs	r3, r0
 8008a3e:	3401      	adds	r4, #1
 8008a40:	9304      	str	r3, [sp, #16]
 8008a42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a46:	4826      	ldr	r0, [pc, #152]	; (8008ae0 <_svfiprintf_r+0x1f0>)
 8008a48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a4c:	2206      	movs	r2, #6
 8008a4e:	f7f7 fbd7 	bl	8000200 <memchr>
 8008a52:	2800      	cmp	r0, #0
 8008a54:	d038      	beq.n	8008ac8 <_svfiprintf_r+0x1d8>
 8008a56:	4b23      	ldr	r3, [pc, #140]	; (8008ae4 <_svfiprintf_r+0x1f4>)
 8008a58:	bb1b      	cbnz	r3, 8008aa2 <_svfiprintf_r+0x1b2>
 8008a5a:	9b03      	ldr	r3, [sp, #12]
 8008a5c:	3307      	adds	r3, #7
 8008a5e:	f023 0307 	bic.w	r3, r3, #7
 8008a62:	3308      	adds	r3, #8
 8008a64:	9303      	str	r3, [sp, #12]
 8008a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a68:	4433      	add	r3, r6
 8008a6a:	9309      	str	r3, [sp, #36]	; 0x24
 8008a6c:	e767      	b.n	800893e <_svfiprintf_r+0x4e>
 8008a6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a72:	460c      	mov	r4, r1
 8008a74:	2001      	movs	r0, #1
 8008a76:	e7a5      	b.n	80089c4 <_svfiprintf_r+0xd4>
 8008a78:	2300      	movs	r3, #0
 8008a7a:	3401      	adds	r4, #1
 8008a7c:	9305      	str	r3, [sp, #20]
 8008a7e:	4619      	mov	r1, r3
 8008a80:	f04f 0c0a 	mov.w	ip, #10
 8008a84:	4620      	mov	r0, r4
 8008a86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a8a:	3a30      	subs	r2, #48	; 0x30
 8008a8c:	2a09      	cmp	r2, #9
 8008a8e:	d903      	bls.n	8008a98 <_svfiprintf_r+0x1a8>
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d0c5      	beq.n	8008a20 <_svfiprintf_r+0x130>
 8008a94:	9105      	str	r1, [sp, #20]
 8008a96:	e7c3      	b.n	8008a20 <_svfiprintf_r+0x130>
 8008a98:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a9c:	4604      	mov	r4, r0
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	e7f0      	b.n	8008a84 <_svfiprintf_r+0x194>
 8008aa2:	ab03      	add	r3, sp, #12
 8008aa4:	9300      	str	r3, [sp, #0]
 8008aa6:	462a      	mov	r2, r5
 8008aa8:	4b0f      	ldr	r3, [pc, #60]	; (8008ae8 <_svfiprintf_r+0x1f8>)
 8008aaa:	a904      	add	r1, sp, #16
 8008aac:	4638      	mov	r0, r7
 8008aae:	f3af 8000 	nop.w
 8008ab2:	1c42      	adds	r2, r0, #1
 8008ab4:	4606      	mov	r6, r0
 8008ab6:	d1d6      	bne.n	8008a66 <_svfiprintf_r+0x176>
 8008ab8:	89ab      	ldrh	r3, [r5, #12]
 8008aba:	065b      	lsls	r3, r3, #25
 8008abc:	f53f af2c 	bmi.w	8008918 <_svfiprintf_r+0x28>
 8008ac0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ac2:	b01d      	add	sp, #116	; 0x74
 8008ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ac8:	ab03      	add	r3, sp, #12
 8008aca:	9300      	str	r3, [sp, #0]
 8008acc:	462a      	mov	r2, r5
 8008ace:	4b06      	ldr	r3, [pc, #24]	; (8008ae8 <_svfiprintf_r+0x1f8>)
 8008ad0:	a904      	add	r1, sp, #16
 8008ad2:	4638      	mov	r0, r7
 8008ad4:	f000 f9d4 	bl	8008e80 <_printf_i>
 8008ad8:	e7eb      	b.n	8008ab2 <_svfiprintf_r+0x1c2>
 8008ada:	bf00      	nop
 8008adc:	080095bc 	.word	0x080095bc
 8008ae0:	080095c6 	.word	0x080095c6
 8008ae4:	00000000 	.word	0x00000000
 8008ae8:	08008839 	.word	0x08008839
 8008aec:	080095c2 	.word	0x080095c2

08008af0 <__sfputc_r>:
 8008af0:	6893      	ldr	r3, [r2, #8]
 8008af2:	3b01      	subs	r3, #1
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	b410      	push	{r4}
 8008af8:	6093      	str	r3, [r2, #8]
 8008afa:	da08      	bge.n	8008b0e <__sfputc_r+0x1e>
 8008afc:	6994      	ldr	r4, [r2, #24]
 8008afe:	42a3      	cmp	r3, r4
 8008b00:	db01      	blt.n	8008b06 <__sfputc_r+0x16>
 8008b02:	290a      	cmp	r1, #10
 8008b04:	d103      	bne.n	8008b0e <__sfputc_r+0x1e>
 8008b06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b0a:	f7ff bb0d 	b.w	8008128 <__swbuf_r>
 8008b0e:	6813      	ldr	r3, [r2, #0]
 8008b10:	1c58      	adds	r0, r3, #1
 8008b12:	6010      	str	r0, [r2, #0]
 8008b14:	7019      	strb	r1, [r3, #0]
 8008b16:	4608      	mov	r0, r1
 8008b18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b1c:	4770      	bx	lr

08008b1e <__sfputs_r>:
 8008b1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b20:	4606      	mov	r6, r0
 8008b22:	460f      	mov	r7, r1
 8008b24:	4614      	mov	r4, r2
 8008b26:	18d5      	adds	r5, r2, r3
 8008b28:	42ac      	cmp	r4, r5
 8008b2a:	d101      	bne.n	8008b30 <__sfputs_r+0x12>
 8008b2c:	2000      	movs	r0, #0
 8008b2e:	e007      	b.n	8008b40 <__sfputs_r+0x22>
 8008b30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b34:	463a      	mov	r2, r7
 8008b36:	4630      	mov	r0, r6
 8008b38:	f7ff ffda 	bl	8008af0 <__sfputc_r>
 8008b3c:	1c43      	adds	r3, r0, #1
 8008b3e:	d1f3      	bne.n	8008b28 <__sfputs_r+0xa>
 8008b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008b44 <_vfiprintf_r>:
 8008b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b48:	460d      	mov	r5, r1
 8008b4a:	b09d      	sub	sp, #116	; 0x74
 8008b4c:	4614      	mov	r4, r2
 8008b4e:	4698      	mov	r8, r3
 8008b50:	4606      	mov	r6, r0
 8008b52:	b118      	cbz	r0, 8008b5c <_vfiprintf_r+0x18>
 8008b54:	6983      	ldr	r3, [r0, #24]
 8008b56:	b90b      	cbnz	r3, 8008b5c <_vfiprintf_r+0x18>
 8008b58:	f7ff fcc0 	bl	80084dc <__sinit>
 8008b5c:	4b89      	ldr	r3, [pc, #548]	; (8008d84 <_vfiprintf_r+0x240>)
 8008b5e:	429d      	cmp	r5, r3
 8008b60:	d11b      	bne.n	8008b9a <_vfiprintf_r+0x56>
 8008b62:	6875      	ldr	r5, [r6, #4]
 8008b64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b66:	07d9      	lsls	r1, r3, #31
 8008b68:	d405      	bmi.n	8008b76 <_vfiprintf_r+0x32>
 8008b6a:	89ab      	ldrh	r3, [r5, #12]
 8008b6c:	059a      	lsls	r2, r3, #22
 8008b6e:	d402      	bmi.n	8008b76 <_vfiprintf_r+0x32>
 8008b70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b72:	f7ff fd51 	bl	8008618 <__retarget_lock_acquire_recursive>
 8008b76:	89ab      	ldrh	r3, [r5, #12]
 8008b78:	071b      	lsls	r3, r3, #28
 8008b7a:	d501      	bpl.n	8008b80 <_vfiprintf_r+0x3c>
 8008b7c:	692b      	ldr	r3, [r5, #16]
 8008b7e:	b9eb      	cbnz	r3, 8008bbc <_vfiprintf_r+0x78>
 8008b80:	4629      	mov	r1, r5
 8008b82:	4630      	mov	r0, r6
 8008b84:	f7ff fb22 	bl	80081cc <__swsetup_r>
 8008b88:	b1c0      	cbz	r0, 8008bbc <_vfiprintf_r+0x78>
 8008b8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b8c:	07dc      	lsls	r4, r3, #31
 8008b8e:	d50e      	bpl.n	8008bae <_vfiprintf_r+0x6a>
 8008b90:	f04f 30ff 	mov.w	r0, #4294967295
 8008b94:	b01d      	add	sp, #116	; 0x74
 8008b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b9a:	4b7b      	ldr	r3, [pc, #492]	; (8008d88 <_vfiprintf_r+0x244>)
 8008b9c:	429d      	cmp	r5, r3
 8008b9e:	d101      	bne.n	8008ba4 <_vfiprintf_r+0x60>
 8008ba0:	68b5      	ldr	r5, [r6, #8]
 8008ba2:	e7df      	b.n	8008b64 <_vfiprintf_r+0x20>
 8008ba4:	4b79      	ldr	r3, [pc, #484]	; (8008d8c <_vfiprintf_r+0x248>)
 8008ba6:	429d      	cmp	r5, r3
 8008ba8:	bf08      	it	eq
 8008baa:	68f5      	ldreq	r5, [r6, #12]
 8008bac:	e7da      	b.n	8008b64 <_vfiprintf_r+0x20>
 8008bae:	89ab      	ldrh	r3, [r5, #12]
 8008bb0:	0598      	lsls	r0, r3, #22
 8008bb2:	d4ed      	bmi.n	8008b90 <_vfiprintf_r+0x4c>
 8008bb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bb6:	f7ff fd30 	bl	800861a <__retarget_lock_release_recursive>
 8008bba:	e7e9      	b.n	8008b90 <_vfiprintf_r+0x4c>
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	9309      	str	r3, [sp, #36]	; 0x24
 8008bc0:	2320      	movs	r3, #32
 8008bc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bca:	2330      	movs	r3, #48	; 0x30
 8008bcc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008d90 <_vfiprintf_r+0x24c>
 8008bd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bd4:	f04f 0901 	mov.w	r9, #1
 8008bd8:	4623      	mov	r3, r4
 8008bda:	469a      	mov	sl, r3
 8008bdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008be0:	b10a      	cbz	r2, 8008be6 <_vfiprintf_r+0xa2>
 8008be2:	2a25      	cmp	r2, #37	; 0x25
 8008be4:	d1f9      	bne.n	8008bda <_vfiprintf_r+0x96>
 8008be6:	ebba 0b04 	subs.w	fp, sl, r4
 8008bea:	d00b      	beq.n	8008c04 <_vfiprintf_r+0xc0>
 8008bec:	465b      	mov	r3, fp
 8008bee:	4622      	mov	r2, r4
 8008bf0:	4629      	mov	r1, r5
 8008bf2:	4630      	mov	r0, r6
 8008bf4:	f7ff ff93 	bl	8008b1e <__sfputs_r>
 8008bf8:	3001      	adds	r0, #1
 8008bfa:	f000 80aa 	beq.w	8008d52 <_vfiprintf_r+0x20e>
 8008bfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c00:	445a      	add	r2, fp
 8008c02:	9209      	str	r2, [sp, #36]	; 0x24
 8008c04:	f89a 3000 	ldrb.w	r3, [sl]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	f000 80a2 	beq.w	8008d52 <_vfiprintf_r+0x20e>
 8008c0e:	2300      	movs	r3, #0
 8008c10:	f04f 32ff 	mov.w	r2, #4294967295
 8008c14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c18:	f10a 0a01 	add.w	sl, sl, #1
 8008c1c:	9304      	str	r3, [sp, #16]
 8008c1e:	9307      	str	r3, [sp, #28]
 8008c20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c24:	931a      	str	r3, [sp, #104]	; 0x68
 8008c26:	4654      	mov	r4, sl
 8008c28:	2205      	movs	r2, #5
 8008c2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c2e:	4858      	ldr	r0, [pc, #352]	; (8008d90 <_vfiprintf_r+0x24c>)
 8008c30:	f7f7 fae6 	bl	8000200 <memchr>
 8008c34:	9a04      	ldr	r2, [sp, #16]
 8008c36:	b9d8      	cbnz	r0, 8008c70 <_vfiprintf_r+0x12c>
 8008c38:	06d1      	lsls	r1, r2, #27
 8008c3a:	bf44      	itt	mi
 8008c3c:	2320      	movmi	r3, #32
 8008c3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c42:	0713      	lsls	r3, r2, #28
 8008c44:	bf44      	itt	mi
 8008c46:	232b      	movmi	r3, #43	; 0x2b
 8008c48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c4c:	f89a 3000 	ldrb.w	r3, [sl]
 8008c50:	2b2a      	cmp	r3, #42	; 0x2a
 8008c52:	d015      	beq.n	8008c80 <_vfiprintf_r+0x13c>
 8008c54:	9a07      	ldr	r2, [sp, #28]
 8008c56:	4654      	mov	r4, sl
 8008c58:	2000      	movs	r0, #0
 8008c5a:	f04f 0c0a 	mov.w	ip, #10
 8008c5e:	4621      	mov	r1, r4
 8008c60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c64:	3b30      	subs	r3, #48	; 0x30
 8008c66:	2b09      	cmp	r3, #9
 8008c68:	d94e      	bls.n	8008d08 <_vfiprintf_r+0x1c4>
 8008c6a:	b1b0      	cbz	r0, 8008c9a <_vfiprintf_r+0x156>
 8008c6c:	9207      	str	r2, [sp, #28]
 8008c6e:	e014      	b.n	8008c9a <_vfiprintf_r+0x156>
 8008c70:	eba0 0308 	sub.w	r3, r0, r8
 8008c74:	fa09 f303 	lsl.w	r3, r9, r3
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	9304      	str	r3, [sp, #16]
 8008c7c:	46a2      	mov	sl, r4
 8008c7e:	e7d2      	b.n	8008c26 <_vfiprintf_r+0xe2>
 8008c80:	9b03      	ldr	r3, [sp, #12]
 8008c82:	1d19      	adds	r1, r3, #4
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	9103      	str	r1, [sp, #12]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	bfbb      	ittet	lt
 8008c8c:	425b      	neglt	r3, r3
 8008c8e:	f042 0202 	orrlt.w	r2, r2, #2
 8008c92:	9307      	strge	r3, [sp, #28]
 8008c94:	9307      	strlt	r3, [sp, #28]
 8008c96:	bfb8      	it	lt
 8008c98:	9204      	strlt	r2, [sp, #16]
 8008c9a:	7823      	ldrb	r3, [r4, #0]
 8008c9c:	2b2e      	cmp	r3, #46	; 0x2e
 8008c9e:	d10c      	bne.n	8008cba <_vfiprintf_r+0x176>
 8008ca0:	7863      	ldrb	r3, [r4, #1]
 8008ca2:	2b2a      	cmp	r3, #42	; 0x2a
 8008ca4:	d135      	bne.n	8008d12 <_vfiprintf_r+0x1ce>
 8008ca6:	9b03      	ldr	r3, [sp, #12]
 8008ca8:	1d1a      	adds	r2, r3, #4
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	9203      	str	r2, [sp, #12]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	bfb8      	it	lt
 8008cb2:	f04f 33ff 	movlt.w	r3, #4294967295
 8008cb6:	3402      	adds	r4, #2
 8008cb8:	9305      	str	r3, [sp, #20]
 8008cba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008da0 <_vfiprintf_r+0x25c>
 8008cbe:	7821      	ldrb	r1, [r4, #0]
 8008cc0:	2203      	movs	r2, #3
 8008cc2:	4650      	mov	r0, sl
 8008cc4:	f7f7 fa9c 	bl	8000200 <memchr>
 8008cc8:	b140      	cbz	r0, 8008cdc <_vfiprintf_r+0x198>
 8008cca:	2340      	movs	r3, #64	; 0x40
 8008ccc:	eba0 000a 	sub.w	r0, r0, sl
 8008cd0:	fa03 f000 	lsl.w	r0, r3, r0
 8008cd4:	9b04      	ldr	r3, [sp, #16]
 8008cd6:	4303      	orrs	r3, r0
 8008cd8:	3401      	adds	r4, #1
 8008cda:	9304      	str	r3, [sp, #16]
 8008cdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ce0:	482c      	ldr	r0, [pc, #176]	; (8008d94 <_vfiprintf_r+0x250>)
 8008ce2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ce6:	2206      	movs	r2, #6
 8008ce8:	f7f7 fa8a 	bl	8000200 <memchr>
 8008cec:	2800      	cmp	r0, #0
 8008cee:	d03f      	beq.n	8008d70 <_vfiprintf_r+0x22c>
 8008cf0:	4b29      	ldr	r3, [pc, #164]	; (8008d98 <_vfiprintf_r+0x254>)
 8008cf2:	bb1b      	cbnz	r3, 8008d3c <_vfiprintf_r+0x1f8>
 8008cf4:	9b03      	ldr	r3, [sp, #12]
 8008cf6:	3307      	adds	r3, #7
 8008cf8:	f023 0307 	bic.w	r3, r3, #7
 8008cfc:	3308      	adds	r3, #8
 8008cfe:	9303      	str	r3, [sp, #12]
 8008d00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d02:	443b      	add	r3, r7
 8008d04:	9309      	str	r3, [sp, #36]	; 0x24
 8008d06:	e767      	b.n	8008bd8 <_vfiprintf_r+0x94>
 8008d08:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d0c:	460c      	mov	r4, r1
 8008d0e:	2001      	movs	r0, #1
 8008d10:	e7a5      	b.n	8008c5e <_vfiprintf_r+0x11a>
 8008d12:	2300      	movs	r3, #0
 8008d14:	3401      	adds	r4, #1
 8008d16:	9305      	str	r3, [sp, #20]
 8008d18:	4619      	mov	r1, r3
 8008d1a:	f04f 0c0a 	mov.w	ip, #10
 8008d1e:	4620      	mov	r0, r4
 8008d20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d24:	3a30      	subs	r2, #48	; 0x30
 8008d26:	2a09      	cmp	r2, #9
 8008d28:	d903      	bls.n	8008d32 <_vfiprintf_r+0x1ee>
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d0c5      	beq.n	8008cba <_vfiprintf_r+0x176>
 8008d2e:	9105      	str	r1, [sp, #20]
 8008d30:	e7c3      	b.n	8008cba <_vfiprintf_r+0x176>
 8008d32:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d36:	4604      	mov	r4, r0
 8008d38:	2301      	movs	r3, #1
 8008d3a:	e7f0      	b.n	8008d1e <_vfiprintf_r+0x1da>
 8008d3c:	ab03      	add	r3, sp, #12
 8008d3e:	9300      	str	r3, [sp, #0]
 8008d40:	462a      	mov	r2, r5
 8008d42:	4b16      	ldr	r3, [pc, #88]	; (8008d9c <_vfiprintf_r+0x258>)
 8008d44:	a904      	add	r1, sp, #16
 8008d46:	4630      	mov	r0, r6
 8008d48:	f3af 8000 	nop.w
 8008d4c:	4607      	mov	r7, r0
 8008d4e:	1c78      	adds	r0, r7, #1
 8008d50:	d1d6      	bne.n	8008d00 <_vfiprintf_r+0x1bc>
 8008d52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d54:	07d9      	lsls	r1, r3, #31
 8008d56:	d405      	bmi.n	8008d64 <_vfiprintf_r+0x220>
 8008d58:	89ab      	ldrh	r3, [r5, #12]
 8008d5a:	059a      	lsls	r2, r3, #22
 8008d5c:	d402      	bmi.n	8008d64 <_vfiprintf_r+0x220>
 8008d5e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d60:	f7ff fc5b 	bl	800861a <__retarget_lock_release_recursive>
 8008d64:	89ab      	ldrh	r3, [r5, #12]
 8008d66:	065b      	lsls	r3, r3, #25
 8008d68:	f53f af12 	bmi.w	8008b90 <_vfiprintf_r+0x4c>
 8008d6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d6e:	e711      	b.n	8008b94 <_vfiprintf_r+0x50>
 8008d70:	ab03      	add	r3, sp, #12
 8008d72:	9300      	str	r3, [sp, #0]
 8008d74:	462a      	mov	r2, r5
 8008d76:	4b09      	ldr	r3, [pc, #36]	; (8008d9c <_vfiprintf_r+0x258>)
 8008d78:	a904      	add	r1, sp, #16
 8008d7a:	4630      	mov	r0, r6
 8008d7c:	f000 f880 	bl	8008e80 <_printf_i>
 8008d80:	e7e4      	b.n	8008d4c <_vfiprintf_r+0x208>
 8008d82:	bf00      	nop
 8008d84:	0800957c 	.word	0x0800957c
 8008d88:	0800959c 	.word	0x0800959c
 8008d8c:	0800955c 	.word	0x0800955c
 8008d90:	080095bc 	.word	0x080095bc
 8008d94:	080095c6 	.word	0x080095c6
 8008d98:	00000000 	.word	0x00000000
 8008d9c:	08008b1f 	.word	0x08008b1f
 8008da0:	080095c2 	.word	0x080095c2

08008da4 <_printf_common>:
 8008da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008da8:	4616      	mov	r6, r2
 8008daa:	4699      	mov	r9, r3
 8008dac:	688a      	ldr	r2, [r1, #8]
 8008dae:	690b      	ldr	r3, [r1, #16]
 8008db0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008db4:	4293      	cmp	r3, r2
 8008db6:	bfb8      	it	lt
 8008db8:	4613      	movlt	r3, r2
 8008dba:	6033      	str	r3, [r6, #0]
 8008dbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008dc0:	4607      	mov	r7, r0
 8008dc2:	460c      	mov	r4, r1
 8008dc4:	b10a      	cbz	r2, 8008dca <_printf_common+0x26>
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	6033      	str	r3, [r6, #0]
 8008dca:	6823      	ldr	r3, [r4, #0]
 8008dcc:	0699      	lsls	r1, r3, #26
 8008dce:	bf42      	ittt	mi
 8008dd0:	6833      	ldrmi	r3, [r6, #0]
 8008dd2:	3302      	addmi	r3, #2
 8008dd4:	6033      	strmi	r3, [r6, #0]
 8008dd6:	6825      	ldr	r5, [r4, #0]
 8008dd8:	f015 0506 	ands.w	r5, r5, #6
 8008ddc:	d106      	bne.n	8008dec <_printf_common+0x48>
 8008dde:	f104 0a19 	add.w	sl, r4, #25
 8008de2:	68e3      	ldr	r3, [r4, #12]
 8008de4:	6832      	ldr	r2, [r6, #0]
 8008de6:	1a9b      	subs	r3, r3, r2
 8008de8:	42ab      	cmp	r3, r5
 8008dea:	dc26      	bgt.n	8008e3a <_printf_common+0x96>
 8008dec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008df0:	1e13      	subs	r3, r2, #0
 8008df2:	6822      	ldr	r2, [r4, #0]
 8008df4:	bf18      	it	ne
 8008df6:	2301      	movne	r3, #1
 8008df8:	0692      	lsls	r2, r2, #26
 8008dfa:	d42b      	bmi.n	8008e54 <_printf_common+0xb0>
 8008dfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e00:	4649      	mov	r1, r9
 8008e02:	4638      	mov	r0, r7
 8008e04:	47c0      	blx	r8
 8008e06:	3001      	adds	r0, #1
 8008e08:	d01e      	beq.n	8008e48 <_printf_common+0xa4>
 8008e0a:	6823      	ldr	r3, [r4, #0]
 8008e0c:	68e5      	ldr	r5, [r4, #12]
 8008e0e:	6832      	ldr	r2, [r6, #0]
 8008e10:	f003 0306 	and.w	r3, r3, #6
 8008e14:	2b04      	cmp	r3, #4
 8008e16:	bf08      	it	eq
 8008e18:	1aad      	subeq	r5, r5, r2
 8008e1a:	68a3      	ldr	r3, [r4, #8]
 8008e1c:	6922      	ldr	r2, [r4, #16]
 8008e1e:	bf0c      	ite	eq
 8008e20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e24:	2500      	movne	r5, #0
 8008e26:	4293      	cmp	r3, r2
 8008e28:	bfc4      	itt	gt
 8008e2a:	1a9b      	subgt	r3, r3, r2
 8008e2c:	18ed      	addgt	r5, r5, r3
 8008e2e:	2600      	movs	r6, #0
 8008e30:	341a      	adds	r4, #26
 8008e32:	42b5      	cmp	r5, r6
 8008e34:	d11a      	bne.n	8008e6c <_printf_common+0xc8>
 8008e36:	2000      	movs	r0, #0
 8008e38:	e008      	b.n	8008e4c <_printf_common+0xa8>
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	4652      	mov	r2, sl
 8008e3e:	4649      	mov	r1, r9
 8008e40:	4638      	mov	r0, r7
 8008e42:	47c0      	blx	r8
 8008e44:	3001      	adds	r0, #1
 8008e46:	d103      	bne.n	8008e50 <_printf_common+0xac>
 8008e48:	f04f 30ff 	mov.w	r0, #4294967295
 8008e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e50:	3501      	adds	r5, #1
 8008e52:	e7c6      	b.n	8008de2 <_printf_common+0x3e>
 8008e54:	18e1      	adds	r1, r4, r3
 8008e56:	1c5a      	adds	r2, r3, #1
 8008e58:	2030      	movs	r0, #48	; 0x30
 8008e5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e5e:	4422      	add	r2, r4
 8008e60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e68:	3302      	adds	r3, #2
 8008e6a:	e7c7      	b.n	8008dfc <_printf_common+0x58>
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	4622      	mov	r2, r4
 8008e70:	4649      	mov	r1, r9
 8008e72:	4638      	mov	r0, r7
 8008e74:	47c0      	blx	r8
 8008e76:	3001      	adds	r0, #1
 8008e78:	d0e6      	beq.n	8008e48 <_printf_common+0xa4>
 8008e7a:	3601      	adds	r6, #1
 8008e7c:	e7d9      	b.n	8008e32 <_printf_common+0x8e>
	...

08008e80 <_printf_i>:
 8008e80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e84:	460c      	mov	r4, r1
 8008e86:	4691      	mov	r9, r2
 8008e88:	7e27      	ldrb	r7, [r4, #24]
 8008e8a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008e8c:	2f78      	cmp	r7, #120	; 0x78
 8008e8e:	4680      	mov	r8, r0
 8008e90:	469a      	mov	sl, r3
 8008e92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e96:	d807      	bhi.n	8008ea8 <_printf_i+0x28>
 8008e98:	2f62      	cmp	r7, #98	; 0x62
 8008e9a:	d80a      	bhi.n	8008eb2 <_printf_i+0x32>
 8008e9c:	2f00      	cmp	r7, #0
 8008e9e:	f000 80d8 	beq.w	8009052 <_printf_i+0x1d2>
 8008ea2:	2f58      	cmp	r7, #88	; 0x58
 8008ea4:	f000 80a3 	beq.w	8008fee <_printf_i+0x16e>
 8008ea8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008eac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008eb0:	e03a      	b.n	8008f28 <_printf_i+0xa8>
 8008eb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008eb6:	2b15      	cmp	r3, #21
 8008eb8:	d8f6      	bhi.n	8008ea8 <_printf_i+0x28>
 8008eba:	a001      	add	r0, pc, #4	; (adr r0, 8008ec0 <_printf_i+0x40>)
 8008ebc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008ec0:	08008f19 	.word	0x08008f19
 8008ec4:	08008f2d 	.word	0x08008f2d
 8008ec8:	08008ea9 	.word	0x08008ea9
 8008ecc:	08008ea9 	.word	0x08008ea9
 8008ed0:	08008ea9 	.word	0x08008ea9
 8008ed4:	08008ea9 	.word	0x08008ea9
 8008ed8:	08008f2d 	.word	0x08008f2d
 8008edc:	08008ea9 	.word	0x08008ea9
 8008ee0:	08008ea9 	.word	0x08008ea9
 8008ee4:	08008ea9 	.word	0x08008ea9
 8008ee8:	08008ea9 	.word	0x08008ea9
 8008eec:	08009039 	.word	0x08009039
 8008ef0:	08008f5d 	.word	0x08008f5d
 8008ef4:	0800901b 	.word	0x0800901b
 8008ef8:	08008ea9 	.word	0x08008ea9
 8008efc:	08008ea9 	.word	0x08008ea9
 8008f00:	0800905b 	.word	0x0800905b
 8008f04:	08008ea9 	.word	0x08008ea9
 8008f08:	08008f5d 	.word	0x08008f5d
 8008f0c:	08008ea9 	.word	0x08008ea9
 8008f10:	08008ea9 	.word	0x08008ea9
 8008f14:	08009023 	.word	0x08009023
 8008f18:	680b      	ldr	r3, [r1, #0]
 8008f1a:	1d1a      	adds	r2, r3, #4
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	600a      	str	r2, [r1, #0]
 8008f20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008f24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f28:	2301      	movs	r3, #1
 8008f2a:	e0a3      	b.n	8009074 <_printf_i+0x1f4>
 8008f2c:	6825      	ldr	r5, [r4, #0]
 8008f2e:	6808      	ldr	r0, [r1, #0]
 8008f30:	062e      	lsls	r6, r5, #24
 8008f32:	f100 0304 	add.w	r3, r0, #4
 8008f36:	d50a      	bpl.n	8008f4e <_printf_i+0xce>
 8008f38:	6805      	ldr	r5, [r0, #0]
 8008f3a:	600b      	str	r3, [r1, #0]
 8008f3c:	2d00      	cmp	r5, #0
 8008f3e:	da03      	bge.n	8008f48 <_printf_i+0xc8>
 8008f40:	232d      	movs	r3, #45	; 0x2d
 8008f42:	426d      	negs	r5, r5
 8008f44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f48:	485e      	ldr	r0, [pc, #376]	; (80090c4 <_printf_i+0x244>)
 8008f4a:	230a      	movs	r3, #10
 8008f4c:	e019      	b.n	8008f82 <_printf_i+0x102>
 8008f4e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008f52:	6805      	ldr	r5, [r0, #0]
 8008f54:	600b      	str	r3, [r1, #0]
 8008f56:	bf18      	it	ne
 8008f58:	b22d      	sxthne	r5, r5
 8008f5a:	e7ef      	b.n	8008f3c <_printf_i+0xbc>
 8008f5c:	680b      	ldr	r3, [r1, #0]
 8008f5e:	6825      	ldr	r5, [r4, #0]
 8008f60:	1d18      	adds	r0, r3, #4
 8008f62:	6008      	str	r0, [r1, #0]
 8008f64:	0628      	lsls	r0, r5, #24
 8008f66:	d501      	bpl.n	8008f6c <_printf_i+0xec>
 8008f68:	681d      	ldr	r5, [r3, #0]
 8008f6a:	e002      	b.n	8008f72 <_printf_i+0xf2>
 8008f6c:	0669      	lsls	r1, r5, #25
 8008f6e:	d5fb      	bpl.n	8008f68 <_printf_i+0xe8>
 8008f70:	881d      	ldrh	r5, [r3, #0]
 8008f72:	4854      	ldr	r0, [pc, #336]	; (80090c4 <_printf_i+0x244>)
 8008f74:	2f6f      	cmp	r7, #111	; 0x6f
 8008f76:	bf0c      	ite	eq
 8008f78:	2308      	moveq	r3, #8
 8008f7a:	230a      	movne	r3, #10
 8008f7c:	2100      	movs	r1, #0
 8008f7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f82:	6866      	ldr	r6, [r4, #4]
 8008f84:	60a6      	str	r6, [r4, #8]
 8008f86:	2e00      	cmp	r6, #0
 8008f88:	bfa2      	ittt	ge
 8008f8a:	6821      	ldrge	r1, [r4, #0]
 8008f8c:	f021 0104 	bicge.w	r1, r1, #4
 8008f90:	6021      	strge	r1, [r4, #0]
 8008f92:	b90d      	cbnz	r5, 8008f98 <_printf_i+0x118>
 8008f94:	2e00      	cmp	r6, #0
 8008f96:	d04d      	beq.n	8009034 <_printf_i+0x1b4>
 8008f98:	4616      	mov	r6, r2
 8008f9a:	fbb5 f1f3 	udiv	r1, r5, r3
 8008f9e:	fb03 5711 	mls	r7, r3, r1, r5
 8008fa2:	5dc7      	ldrb	r7, [r0, r7]
 8008fa4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008fa8:	462f      	mov	r7, r5
 8008faa:	42bb      	cmp	r3, r7
 8008fac:	460d      	mov	r5, r1
 8008fae:	d9f4      	bls.n	8008f9a <_printf_i+0x11a>
 8008fb0:	2b08      	cmp	r3, #8
 8008fb2:	d10b      	bne.n	8008fcc <_printf_i+0x14c>
 8008fb4:	6823      	ldr	r3, [r4, #0]
 8008fb6:	07df      	lsls	r7, r3, #31
 8008fb8:	d508      	bpl.n	8008fcc <_printf_i+0x14c>
 8008fba:	6923      	ldr	r3, [r4, #16]
 8008fbc:	6861      	ldr	r1, [r4, #4]
 8008fbe:	4299      	cmp	r1, r3
 8008fc0:	bfde      	ittt	le
 8008fc2:	2330      	movle	r3, #48	; 0x30
 8008fc4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008fc8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008fcc:	1b92      	subs	r2, r2, r6
 8008fce:	6122      	str	r2, [r4, #16]
 8008fd0:	f8cd a000 	str.w	sl, [sp]
 8008fd4:	464b      	mov	r3, r9
 8008fd6:	aa03      	add	r2, sp, #12
 8008fd8:	4621      	mov	r1, r4
 8008fda:	4640      	mov	r0, r8
 8008fdc:	f7ff fee2 	bl	8008da4 <_printf_common>
 8008fe0:	3001      	adds	r0, #1
 8008fe2:	d14c      	bne.n	800907e <_printf_i+0x1fe>
 8008fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fe8:	b004      	add	sp, #16
 8008fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fee:	4835      	ldr	r0, [pc, #212]	; (80090c4 <_printf_i+0x244>)
 8008ff0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008ff4:	6823      	ldr	r3, [r4, #0]
 8008ff6:	680e      	ldr	r6, [r1, #0]
 8008ff8:	061f      	lsls	r7, r3, #24
 8008ffa:	f856 5b04 	ldr.w	r5, [r6], #4
 8008ffe:	600e      	str	r6, [r1, #0]
 8009000:	d514      	bpl.n	800902c <_printf_i+0x1ac>
 8009002:	07d9      	lsls	r1, r3, #31
 8009004:	bf44      	itt	mi
 8009006:	f043 0320 	orrmi.w	r3, r3, #32
 800900a:	6023      	strmi	r3, [r4, #0]
 800900c:	b91d      	cbnz	r5, 8009016 <_printf_i+0x196>
 800900e:	6823      	ldr	r3, [r4, #0]
 8009010:	f023 0320 	bic.w	r3, r3, #32
 8009014:	6023      	str	r3, [r4, #0]
 8009016:	2310      	movs	r3, #16
 8009018:	e7b0      	b.n	8008f7c <_printf_i+0xfc>
 800901a:	6823      	ldr	r3, [r4, #0]
 800901c:	f043 0320 	orr.w	r3, r3, #32
 8009020:	6023      	str	r3, [r4, #0]
 8009022:	2378      	movs	r3, #120	; 0x78
 8009024:	4828      	ldr	r0, [pc, #160]	; (80090c8 <_printf_i+0x248>)
 8009026:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800902a:	e7e3      	b.n	8008ff4 <_printf_i+0x174>
 800902c:	065e      	lsls	r6, r3, #25
 800902e:	bf48      	it	mi
 8009030:	b2ad      	uxthmi	r5, r5
 8009032:	e7e6      	b.n	8009002 <_printf_i+0x182>
 8009034:	4616      	mov	r6, r2
 8009036:	e7bb      	b.n	8008fb0 <_printf_i+0x130>
 8009038:	680b      	ldr	r3, [r1, #0]
 800903a:	6826      	ldr	r6, [r4, #0]
 800903c:	6960      	ldr	r0, [r4, #20]
 800903e:	1d1d      	adds	r5, r3, #4
 8009040:	600d      	str	r5, [r1, #0]
 8009042:	0635      	lsls	r5, r6, #24
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	d501      	bpl.n	800904c <_printf_i+0x1cc>
 8009048:	6018      	str	r0, [r3, #0]
 800904a:	e002      	b.n	8009052 <_printf_i+0x1d2>
 800904c:	0671      	lsls	r1, r6, #25
 800904e:	d5fb      	bpl.n	8009048 <_printf_i+0x1c8>
 8009050:	8018      	strh	r0, [r3, #0]
 8009052:	2300      	movs	r3, #0
 8009054:	6123      	str	r3, [r4, #16]
 8009056:	4616      	mov	r6, r2
 8009058:	e7ba      	b.n	8008fd0 <_printf_i+0x150>
 800905a:	680b      	ldr	r3, [r1, #0]
 800905c:	1d1a      	adds	r2, r3, #4
 800905e:	600a      	str	r2, [r1, #0]
 8009060:	681e      	ldr	r6, [r3, #0]
 8009062:	6862      	ldr	r2, [r4, #4]
 8009064:	2100      	movs	r1, #0
 8009066:	4630      	mov	r0, r6
 8009068:	f7f7 f8ca 	bl	8000200 <memchr>
 800906c:	b108      	cbz	r0, 8009072 <_printf_i+0x1f2>
 800906e:	1b80      	subs	r0, r0, r6
 8009070:	6060      	str	r0, [r4, #4]
 8009072:	6863      	ldr	r3, [r4, #4]
 8009074:	6123      	str	r3, [r4, #16]
 8009076:	2300      	movs	r3, #0
 8009078:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800907c:	e7a8      	b.n	8008fd0 <_printf_i+0x150>
 800907e:	6923      	ldr	r3, [r4, #16]
 8009080:	4632      	mov	r2, r6
 8009082:	4649      	mov	r1, r9
 8009084:	4640      	mov	r0, r8
 8009086:	47d0      	blx	sl
 8009088:	3001      	adds	r0, #1
 800908a:	d0ab      	beq.n	8008fe4 <_printf_i+0x164>
 800908c:	6823      	ldr	r3, [r4, #0]
 800908e:	079b      	lsls	r3, r3, #30
 8009090:	d413      	bmi.n	80090ba <_printf_i+0x23a>
 8009092:	68e0      	ldr	r0, [r4, #12]
 8009094:	9b03      	ldr	r3, [sp, #12]
 8009096:	4298      	cmp	r0, r3
 8009098:	bfb8      	it	lt
 800909a:	4618      	movlt	r0, r3
 800909c:	e7a4      	b.n	8008fe8 <_printf_i+0x168>
 800909e:	2301      	movs	r3, #1
 80090a0:	4632      	mov	r2, r6
 80090a2:	4649      	mov	r1, r9
 80090a4:	4640      	mov	r0, r8
 80090a6:	47d0      	blx	sl
 80090a8:	3001      	adds	r0, #1
 80090aa:	d09b      	beq.n	8008fe4 <_printf_i+0x164>
 80090ac:	3501      	adds	r5, #1
 80090ae:	68e3      	ldr	r3, [r4, #12]
 80090b0:	9903      	ldr	r1, [sp, #12]
 80090b2:	1a5b      	subs	r3, r3, r1
 80090b4:	42ab      	cmp	r3, r5
 80090b6:	dcf2      	bgt.n	800909e <_printf_i+0x21e>
 80090b8:	e7eb      	b.n	8009092 <_printf_i+0x212>
 80090ba:	2500      	movs	r5, #0
 80090bc:	f104 0619 	add.w	r6, r4, #25
 80090c0:	e7f5      	b.n	80090ae <_printf_i+0x22e>
 80090c2:	bf00      	nop
 80090c4:	080095cd 	.word	0x080095cd
 80090c8:	080095de 	.word	0x080095de

080090cc <_sbrk_r>:
 80090cc:	b538      	push	{r3, r4, r5, lr}
 80090ce:	4d06      	ldr	r5, [pc, #24]	; (80090e8 <_sbrk_r+0x1c>)
 80090d0:	2300      	movs	r3, #0
 80090d2:	4604      	mov	r4, r0
 80090d4:	4608      	mov	r0, r1
 80090d6:	602b      	str	r3, [r5, #0]
 80090d8:	f7f8 fb20 	bl	800171c <_sbrk>
 80090dc:	1c43      	adds	r3, r0, #1
 80090de:	d102      	bne.n	80090e6 <_sbrk_r+0x1a>
 80090e0:	682b      	ldr	r3, [r5, #0]
 80090e2:	b103      	cbz	r3, 80090e6 <_sbrk_r+0x1a>
 80090e4:	6023      	str	r3, [r4, #0]
 80090e6:	bd38      	pop	{r3, r4, r5, pc}
 80090e8:	20004378 	.word	0x20004378

080090ec <__sread>:
 80090ec:	b510      	push	{r4, lr}
 80090ee:	460c      	mov	r4, r1
 80090f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090f4:	f000 f8ee 	bl	80092d4 <_read_r>
 80090f8:	2800      	cmp	r0, #0
 80090fa:	bfab      	itete	ge
 80090fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80090fe:	89a3      	ldrhlt	r3, [r4, #12]
 8009100:	181b      	addge	r3, r3, r0
 8009102:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009106:	bfac      	ite	ge
 8009108:	6563      	strge	r3, [r4, #84]	; 0x54
 800910a:	81a3      	strhlt	r3, [r4, #12]
 800910c:	bd10      	pop	{r4, pc}

0800910e <__swrite>:
 800910e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009112:	461f      	mov	r7, r3
 8009114:	898b      	ldrh	r3, [r1, #12]
 8009116:	05db      	lsls	r3, r3, #23
 8009118:	4605      	mov	r5, r0
 800911a:	460c      	mov	r4, r1
 800911c:	4616      	mov	r6, r2
 800911e:	d505      	bpl.n	800912c <__swrite+0x1e>
 8009120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009124:	2302      	movs	r3, #2
 8009126:	2200      	movs	r2, #0
 8009128:	f000 f868 	bl	80091fc <_lseek_r>
 800912c:	89a3      	ldrh	r3, [r4, #12]
 800912e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009132:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009136:	81a3      	strh	r3, [r4, #12]
 8009138:	4632      	mov	r2, r6
 800913a:	463b      	mov	r3, r7
 800913c:	4628      	mov	r0, r5
 800913e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009142:	f000 b817 	b.w	8009174 <_write_r>

08009146 <__sseek>:
 8009146:	b510      	push	{r4, lr}
 8009148:	460c      	mov	r4, r1
 800914a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800914e:	f000 f855 	bl	80091fc <_lseek_r>
 8009152:	1c43      	adds	r3, r0, #1
 8009154:	89a3      	ldrh	r3, [r4, #12]
 8009156:	bf15      	itete	ne
 8009158:	6560      	strne	r0, [r4, #84]	; 0x54
 800915a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800915e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009162:	81a3      	strheq	r3, [r4, #12]
 8009164:	bf18      	it	ne
 8009166:	81a3      	strhne	r3, [r4, #12]
 8009168:	bd10      	pop	{r4, pc}

0800916a <__sclose>:
 800916a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800916e:	f000 b813 	b.w	8009198 <_close_r>
	...

08009174 <_write_r>:
 8009174:	b538      	push	{r3, r4, r5, lr}
 8009176:	4d07      	ldr	r5, [pc, #28]	; (8009194 <_write_r+0x20>)
 8009178:	4604      	mov	r4, r0
 800917a:	4608      	mov	r0, r1
 800917c:	4611      	mov	r1, r2
 800917e:	2200      	movs	r2, #0
 8009180:	602a      	str	r2, [r5, #0]
 8009182:	461a      	mov	r2, r3
 8009184:	f7f7 fec2 	bl	8000f0c <_write>
 8009188:	1c43      	adds	r3, r0, #1
 800918a:	d102      	bne.n	8009192 <_write_r+0x1e>
 800918c:	682b      	ldr	r3, [r5, #0]
 800918e:	b103      	cbz	r3, 8009192 <_write_r+0x1e>
 8009190:	6023      	str	r3, [r4, #0]
 8009192:	bd38      	pop	{r3, r4, r5, pc}
 8009194:	20004378 	.word	0x20004378

08009198 <_close_r>:
 8009198:	b538      	push	{r3, r4, r5, lr}
 800919a:	4d06      	ldr	r5, [pc, #24]	; (80091b4 <_close_r+0x1c>)
 800919c:	2300      	movs	r3, #0
 800919e:	4604      	mov	r4, r0
 80091a0:	4608      	mov	r0, r1
 80091a2:	602b      	str	r3, [r5, #0]
 80091a4:	f7f8 fa85 	bl	80016b2 <_close>
 80091a8:	1c43      	adds	r3, r0, #1
 80091aa:	d102      	bne.n	80091b2 <_close_r+0x1a>
 80091ac:	682b      	ldr	r3, [r5, #0]
 80091ae:	b103      	cbz	r3, 80091b2 <_close_r+0x1a>
 80091b0:	6023      	str	r3, [r4, #0]
 80091b2:	bd38      	pop	{r3, r4, r5, pc}
 80091b4:	20004378 	.word	0x20004378

080091b8 <_fstat_r>:
 80091b8:	b538      	push	{r3, r4, r5, lr}
 80091ba:	4d07      	ldr	r5, [pc, #28]	; (80091d8 <_fstat_r+0x20>)
 80091bc:	2300      	movs	r3, #0
 80091be:	4604      	mov	r4, r0
 80091c0:	4608      	mov	r0, r1
 80091c2:	4611      	mov	r1, r2
 80091c4:	602b      	str	r3, [r5, #0]
 80091c6:	f7f8 fa80 	bl	80016ca <_fstat>
 80091ca:	1c43      	adds	r3, r0, #1
 80091cc:	d102      	bne.n	80091d4 <_fstat_r+0x1c>
 80091ce:	682b      	ldr	r3, [r5, #0]
 80091d0:	b103      	cbz	r3, 80091d4 <_fstat_r+0x1c>
 80091d2:	6023      	str	r3, [r4, #0]
 80091d4:	bd38      	pop	{r3, r4, r5, pc}
 80091d6:	bf00      	nop
 80091d8:	20004378 	.word	0x20004378

080091dc <_isatty_r>:
 80091dc:	b538      	push	{r3, r4, r5, lr}
 80091de:	4d06      	ldr	r5, [pc, #24]	; (80091f8 <_isatty_r+0x1c>)
 80091e0:	2300      	movs	r3, #0
 80091e2:	4604      	mov	r4, r0
 80091e4:	4608      	mov	r0, r1
 80091e6:	602b      	str	r3, [r5, #0]
 80091e8:	f7f8 fa7f 	bl	80016ea <_isatty>
 80091ec:	1c43      	adds	r3, r0, #1
 80091ee:	d102      	bne.n	80091f6 <_isatty_r+0x1a>
 80091f0:	682b      	ldr	r3, [r5, #0]
 80091f2:	b103      	cbz	r3, 80091f6 <_isatty_r+0x1a>
 80091f4:	6023      	str	r3, [r4, #0]
 80091f6:	bd38      	pop	{r3, r4, r5, pc}
 80091f8:	20004378 	.word	0x20004378

080091fc <_lseek_r>:
 80091fc:	b538      	push	{r3, r4, r5, lr}
 80091fe:	4d07      	ldr	r5, [pc, #28]	; (800921c <_lseek_r+0x20>)
 8009200:	4604      	mov	r4, r0
 8009202:	4608      	mov	r0, r1
 8009204:	4611      	mov	r1, r2
 8009206:	2200      	movs	r2, #0
 8009208:	602a      	str	r2, [r5, #0]
 800920a:	461a      	mov	r2, r3
 800920c:	f7f8 fa78 	bl	8001700 <_lseek>
 8009210:	1c43      	adds	r3, r0, #1
 8009212:	d102      	bne.n	800921a <_lseek_r+0x1e>
 8009214:	682b      	ldr	r3, [r5, #0]
 8009216:	b103      	cbz	r3, 800921a <_lseek_r+0x1e>
 8009218:	6023      	str	r3, [r4, #0]
 800921a:	bd38      	pop	{r3, r4, r5, pc}
 800921c:	20004378 	.word	0x20004378

08009220 <memcpy>:
 8009220:	440a      	add	r2, r1
 8009222:	4291      	cmp	r1, r2
 8009224:	f100 33ff 	add.w	r3, r0, #4294967295
 8009228:	d100      	bne.n	800922c <memcpy+0xc>
 800922a:	4770      	bx	lr
 800922c:	b510      	push	{r4, lr}
 800922e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009232:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009236:	4291      	cmp	r1, r2
 8009238:	d1f9      	bne.n	800922e <memcpy+0xe>
 800923a:	bd10      	pop	{r4, pc}

0800923c <memmove>:
 800923c:	4288      	cmp	r0, r1
 800923e:	b510      	push	{r4, lr}
 8009240:	eb01 0402 	add.w	r4, r1, r2
 8009244:	d902      	bls.n	800924c <memmove+0x10>
 8009246:	4284      	cmp	r4, r0
 8009248:	4623      	mov	r3, r4
 800924a:	d807      	bhi.n	800925c <memmove+0x20>
 800924c:	1e43      	subs	r3, r0, #1
 800924e:	42a1      	cmp	r1, r4
 8009250:	d008      	beq.n	8009264 <memmove+0x28>
 8009252:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009256:	f803 2f01 	strb.w	r2, [r3, #1]!
 800925a:	e7f8      	b.n	800924e <memmove+0x12>
 800925c:	4402      	add	r2, r0
 800925e:	4601      	mov	r1, r0
 8009260:	428a      	cmp	r2, r1
 8009262:	d100      	bne.n	8009266 <memmove+0x2a>
 8009264:	bd10      	pop	{r4, pc}
 8009266:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800926a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800926e:	e7f7      	b.n	8009260 <memmove+0x24>

08009270 <__malloc_lock>:
 8009270:	4801      	ldr	r0, [pc, #4]	; (8009278 <__malloc_lock+0x8>)
 8009272:	f7ff b9d1 	b.w	8008618 <__retarget_lock_acquire_recursive>
 8009276:	bf00      	nop
 8009278:	20004370 	.word	0x20004370

0800927c <__malloc_unlock>:
 800927c:	4801      	ldr	r0, [pc, #4]	; (8009284 <__malloc_unlock+0x8>)
 800927e:	f7ff b9cc 	b.w	800861a <__retarget_lock_release_recursive>
 8009282:	bf00      	nop
 8009284:	20004370 	.word	0x20004370

08009288 <_realloc_r>:
 8009288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800928a:	4607      	mov	r7, r0
 800928c:	4614      	mov	r4, r2
 800928e:	460e      	mov	r6, r1
 8009290:	b921      	cbnz	r1, 800929c <_realloc_r+0x14>
 8009292:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009296:	4611      	mov	r1, r2
 8009298:	f7ff ba74 	b.w	8008784 <_malloc_r>
 800929c:	b922      	cbnz	r2, 80092a8 <_realloc_r+0x20>
 800929e:	f7ff fa21 	bl	80086e4 <_free_r>
 80092a2:	4625      	mov	r5, r4
 80092a4:	4628      	mov	r0, r5
 80092a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092a8:	f000 f826 	bl	80092f8 <_malloc_usable_size_r>
 80092ac:	42a0      	cmp	r0, r4
 80092ae:	d20f      	bcs.n	80092d0 <_realloc_r+0x48>
 80092b0:	4621      	mov	r1, r4
 80092b2:	4638      	mov	r0, r7
 80092b4:	f7ff fa66 	bl	8008784 <_malloc_r>
 80092b8:	4605      	mov	r5, r0
 80092ba:	2800      	cmp	r0, #0
 80092bc:	d0f2      	beq.n	80092a4 <_realloc_r+0x1c>
 80092be:	4631      	mov	r1, r6
 80092c0:	4622      	mov	r2, r4
 80092c2:	f7ff ffad 	bl	8009220 <memcpy>
 80092c6:	4631      	mov	r1, r6
 80092c8:	4638      	mov	r0, r7
 80092ca:	f7ff fa0b 	bl	80086e4 <_free_r>
 80092ce:	e7e9      	b.n	80092a4 <_realloc_r+0x1c>
 80092d0:	4635      	mov	r5, r6
 80092d2:	e7e7      	b.n	80092a4 <_realloc_r+0x1c>

080092d4 <_read_r>:
 80092d4:	b538      	push	{r3, r4, r5, lr}
 80092d6:	4d07      	ldr	r5, [pc, #28]	; (80092f4 <_read_r+0x20>)
 80092d8:	4604      	mov	r4, r0
 80092da:	4608      	mov	r0, r1
 80092dc:	4611      	mov	r1, r2
 80092de:	2200      	movs	r2, #0
 80092e0:	602a      	str	r2, [r5, #0]
 80092e2:	461a      	mov	r2, r3
 80092e4:	f7f8 f9c8 	bl	8001678 <_read>
 80092e8:	1c43      	adds	r3, r0, #1
 80092ea:	d102      	bne.n	80092f2 <_read_r+0x1e>
 80092ec:	682b      	ldr	r3, [r5, #0]
 80092ee:	b103      	cbz	r3, 80092f2 <_read_r+0x1e>
 80092f0:	6023      	str	r3, [r4, #0]
 80092f2:	bd38      	pop	{r3, r4, r5, pc}
 80092f4:	20004378 	.word	0x20004378

080092f8 <_malloc_usable_size_r>:
 80092f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092fc:	1f18      	subs	r0, r3, #4
 80092fe:	2b00      	cmp	r3, #0
 8009300:	bfbc      	itt	lt
 8009302:	580b      	ldrlt	r3, [r1, r0]
 8009304:	18c0      	addlt	r0, r0, r3
 8009306:	4770      	bx	lr

08009308 <_init>:
 8009308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800930a:	bf00      	nop
 800930c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800930e:	bc08      	pop	{r3}
 8009310:	469e      	mov	lr, r3
 8009312:	4770      	bx	lr

08009314 <_fini>:
 8009314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009316:	bf00      	nop
 8009318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800931a:	bc08      	pop	{r3}
 800931c:	469e      	mov	lr, r3
 800931e:	4770      	bx	lr

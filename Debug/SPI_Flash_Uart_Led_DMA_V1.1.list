
SPI_Flash_Uart_Led_DMA_V1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cf4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08007ea4  08007ea4  00017ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080c4  080080c4  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080080c4  080080c4  000180c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080cc  080080cc  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080cc  080080cc  000180cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080d0  080080d0  000180d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080080d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          000042f4  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000437c  2000437c  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016c6a  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e7c  00000000  00000000  00036d22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e00  00000000  00000000  00039ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ce8  00000000  00000000  0003a9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025c62  00000000  00000000  0003b688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000127ea  00000000  00000000  000612ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7425  00000000  00000000  00073ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014aef9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004324  00000000  00000000  0014af4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007e8c 	.word	0x08007e8c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	08007e8c 	.word	0x08007e8c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b96e 	b.w	8000d70 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	468c      	mov	ip, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	f040 8083 	bne.w	8000bc2 <__udivmoddi4+0x116>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4617      	mov	r7, r2
 8000ac0:	d947      	bls.n	8000b52 <__udivmoddi4+0xa6>
 8000ac2:	fab2 f282 	clz	r2, r2
 8000ac6:	b142      	cbz	r2, 8000ada <__udivmoddi4+0x2e>
 8000ac8:	f1c2 0020 	rsb	r0, r2, #32
 8000acc:	fa24 f000 	lsr.w	r0, r4, r0
 8000ad0:	4091      	lsls	r1, r2
 8000ad2:	4097      	lsls	r7, r2
 8000ad4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ad8:	4094      	lsls	r4, r2
 8000ada:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ade:	0c23      	lsrs	r3, r4, #16
 8000ae0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ae4:	fa1f fe87 	uxth.w	lr, r7
 8000ae8:	fb08 c116 	mls	r1, r8, r6, ip
 8000aec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000af0:	fb06 f10e 	mul.w	r1, r6, lr
 8000af4:	4299      	cmp	r1, r3
 8000af6:	d909      	bls.n	8000b0c <__udivmoddi4+0x60>
 8000af8:	18fb      	adds	r3, r7, r3
 8000afa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000afe:	f080 8119 	bcs.w	8000d34 <__udivmoddi4+0x288>
 8000b02:	4299      	cmp	r1, r3
 8000b04:	f240 8116 	bls.w	8000d34 <__udivmoddi4+0x288>
 8000b08:	3e02      	subs	r6, #2
 8000b0a:	443b      	add	r3, r7
 8000b0c:	1a5b      	subs	r3, r3, r1
 8000b0e:	b2a4      	uxth	r4, r4
 8000b10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b14:	fb08 3310 	mls	r3, r8, r0, r3
 8000b18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b20:	45a6      	cmp	lr, r4
 8000b22:	d909      	bls.n	8000b38 <__udivmoddi4+0x8c>
 8000b24:	193c      	adds	r4, r7, r4
 8000b26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b2a:	f080 8105 	bcs.w	8000d38 <__udivmoddi4+0x28c>
 8000b2e:	45a6      	cmp	lr, r4
 8000b30:	f240 8102 	bls.w	8000d38 <__udivmoddi4+0x28c>
 8000b34:	3802      	subs	r0, #2
 8000b36:	443c      	add	r4, r7
 8000b38:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b3c:	eba4 040e 	sub.w	r4, r4, lr
 8000b40:	2600      	movs	r6, #0
 8000b42:	b11d      	cbz	r5, 8000b4c <__udivmoddi4+0xa0>
 8000b44:	40d4      	lsrs	r4, r2
 8000b46:	2300      	movs	r3, #0
 8000b48:	e9c5 4300 	strd	r4, r3, [r5]
 8000b4c:	4631      	mov	r1, r6
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	b902      	cbnz	r2, 8000b56 <__udivmoddi4+0xaa>
 8000b54:	deff      	udf	#255	; 0xff
 8000b56:	fab2 f282 	clz	r2, r2
 8000b5a:	2a00      	cmp	r2, #0
 8000b5c:	d150      	bne.n	8000c00 <__udivmoddi4+0x154>
 8000b5e:	1bcb      	subs	r3, r1, r7
 8000b60:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b64:	fa1f f887 	uxth.w	r8, r7
 8000b68:	2601      	movs	r6, #1
 8000b6a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b6e:	0c21      	lsrs	r1, r4, #16
 8000b70:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b78:	fb08 f30c 	mul.w	r3, r8, ip
 8000b7c:	428b      	cmp	r3, r1
 8000b7e:	d907      	bls.n	8000b90 <__udivmoddi4+0xe4>
 8000b80:	1879      	adds	r1, r7, r1
 8000b82:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b86:	d202      	bcs.n	8000b8e <__udivmoddi4+0xe2>
 8000b88:	428b      	cmp	r3, r1
 8000b8a:	f200 80e9 	bhi.w	8000d60 <__udivmoddi4+0x2b4>
 8000b8e:	4684      	mov	ip, r0
 8000b90:	1ac9      	subs	r1, r1, r3
 8000b92:	b2a3      	uxth	r3, r4
 8000b94:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b98:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b9c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ba0:	fb08 f800 	mul.w	r8, r8, r0
 8000ba4:	45a0      	cmp	r8, r4
 8000ba6:	d907      	bls.n	8000bb8 <__udivmoddi4+0x10c>
 8000ba8:	193c      	adds	r4, r7, r4
 8000baa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x10a>
 8000bb0:	45a0      	cmp	r8, r4
 8000bb2:	f200 80d9 	bhi.w	8000d68 <__udivmoddi4+0x2bc>
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	eba4 0408 	sub.w	r4, r4, r8
 8000bbc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bc0:	e7bf      	b.n	8000b42 <__udivmoddi4+0x96>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d909      	bls.n	8000bda <__udivmoddi4+0x12e>
 8000bc6:	2d00      	cmp	r5, #0
 8000bc8:	f000 80b1 	beq.w	8000d2e <__udivmoddi4+0x282>
 8000bcc:	2600      	movs	r6, #0
 8000bce:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd2:	4630      	mov	r0, r6
 8000bd4:	4631      	mov	r1, r6
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	fab3 f683 	clz	r6, r3
 8000bde:	2e00      	cmp	r6, #0
 8000be0:	d14a      	bne.n	8000c78 <__udivmoddi4+0x1cc>
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d302      	bcc.n	8000bec <__udivmoddi4+0x140>
 8000be6:	4282      	cmp	r2, r0
 8000be8:	f200 80b8 	bhi.w	8000d5c <__udivmoddi4+0x2b0>
 8000bec:	1a84      	subs	r4, r0, r2
 8000bee:	eb61 0103 	sbc.w	r1, r1, r3
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	468c      	mov	ip, r1
 8000bf6:	2d00      	cmp	r5, #0
 8000bf8:	d0a8      	beq.n	8000b4c <__udivmoddi4+0xa0>
 8000bfa:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bfe:	e7a5      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000c00:	f1c2 0320 	rsb	r3, r2, #32
 8000c04:	fa20 f603 	lsr.w	r6, r0, r3
 8000c08:	4097      	lsls	r7, r2
 8000c0a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c0e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c12:	40d9      	lsrs	r1, r3
 8000c14:	4330      	orrs	r0, r6
 8000c16:	0c03      	lsrs	r3, r0, #16
 8000c18:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c1c:	fa1f f887 	uxth.w	r8, r7
 8000c20:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c28:	fb06 f108 	mul.w	r1, r6, r8
 8000c2c:	4299      	cmp	r1, r3
 8000c2e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x19c>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c3a:	f080 808d 	bcs.w	8000d58 <__udivmoddi4+0x2ac>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 808a 	bls.w	8000d58 <__udivmoddi4+0x2ac>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b281      	uxth	r1, r0
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c58:	fb00 f308 	mul.w	r3, r0, r8
 8000c5c:	428b      	cmp	r3, r1
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0x1c4>
 8000c60:	1879      	adds	r1, r7, r1
 8000c62:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c66:	d273      	bcs.n	8000d50 <__udivmoddi4+0x2a4>
 8000c68:	428b      	cmp	r3, r1
 8000c6a:	d971      	bls.n	8000d50 <__udivmoddi4+0x2a4>
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	4439      	add	r1, r7
 8000c70:	1acb      	subs	r3, r1, r3
 8000c72:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c76:	e778      	b.n	8000b6a <__udivmoddi4+0xbe>
 8000c78:	f1c6 0c20 	rsb	ip, r6, #32
 8000c7c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c80:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c84:	431c      	orrs	r4, r3
 8000c86:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c8e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c92:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c96:	431f      	orrs	r7, r3
 8000c98:	0c3b      	lsrs	r3, r7, #16
 8000c9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c9e:	fa1f f884 	uxth.w	r8, r4
 8000ca2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ca6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000caa:	fb09 fa08 	mul.w	sl, r9, r8
 8000cae:	458a      	cmp	sl, r1
 8000cb0:	fa02 f206 	lsl.w	r2, r2, r6
 8000cb4:	fa00 f306 	lsl.w	r3, r0, r6
 8000cb8:	d908      	bls.n	8000ccc <__udivmoddi4+0x220>
 8000cba:	1861      	adds	r1, r4, r1
 8000cbc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cc0:	d248      	bcs.n	8000d54 <__udivmoddi4+0x2a8>
 8000cc2:	458a      	cmp	sl, r1
 8000cc4:	d946      	bls.n	8000d54 <__udivmoddi4+0x2a8>
 8000cc6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cca:	4421      	add	r1, r4
 8000ccc:	eba1 010a 	sub.w	r1, r1, sl
 8000cd0:	b2bf      	uxth	r7, r7
 8000cd2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cda:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cde:	fb00 f808 	mul.w	r8, r0, r8
 8000ce2:	45b8      	cmp	r8, r7
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x24a>
 8000ce6:	19e7      	adds	r7, r4, r7
 8000ce8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cec:	d22e      	bcs.n	8000d4c <__udivmoddi4+0x2a0>
 8000cee:	45b8      	cmp	r8, r7
 8000cf0:	d92c      	bls.n	8000d4c <__udivmoddi4+0x2a0>
 8000cf2:	3802      	subs	r0, #2
 8000cf4:	4427      	add	r7, r4
 8000cf6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cfa:	eba7 0708 	sub.w	r7, r7, r8
 8000cfe:	fba0 8902 	umull	r8, r9, r0, r2
 8000d02:	454f      	cmp	r7, r9
 8000d04:	46c6      	mov	lr, r8
 8000d06:	4649      	mov	r1, r9
 8000d08:	d31a      	bcc.n	8000d40 <__udivmoddi4+0x294>
 8000d0a:	d017      	beq.n	8000d3c <__udivmoddi4+0x290>
 8000d0c:	b15d      	cbz	r5, 8000d26 <__udivmoddi4+0x27a>
 8000d0e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d12:	eb67 0701 	sbc.w	r7, r7, r1
 8000d16:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d1a:	40f2      	lsrs	r2, r6
 8000d1c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d20:	40f7      	lsrs	r7, r6
 8000d22:	e9c5 2700 	strd	r2, r7, [r5]
 8000d26:	2600      	movs	r6, #0
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e70b      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e9      	b.n	8000b0c <__udivmoddi4+0x60>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6fd      	b.n	8000b38 <__udivmoddi4+0x8c>
 8000d3c:	4543      	cmp	r3, r8
 8000d3e:	d2e5      	bcs.n	8000d0c <__udivmoddi4+0x260>
 8000d40:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d44:	eb69 0104 	sbc.w	r1, r9, r4
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7df      	b.n	8000d0c <__udivmoddi4+0x260>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e7d2      	b.n	8000cf6 <__udivmoddi4+0x24a>
 8000d50:	4660      	mov	r0, ip
 8000d52:	e78d      	b.n	8000c70 <__udivmoddi4+0x1c4>
 8000d54:	4681      	mov	r9, r0
 8000d56:	e7b9      	b.n	8000ccc <__udivmoddi4+0x220>
 8000d58:	4666      	mov	r6, ip
 8000d5a:	e775      	b.n	8000c48 <__udivmoddi4+0x19c>
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	e74a      	b.n	8000bf6 <__udivmoddi4+0x14a>
 8000d60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d64:	4439      	add	r1, r7
 8000d66:	e713      	b.n	8000b90 <__udivmoddi4+0xe4>
 8000d68:	3802      	subs	r0, #2
 8000d6a:	443c      	add	r4, r7
 8000d6c:	e724      	b.n	8000bb8 <__udivmoddi4+0x10c>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_idiv0>:
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop

08000d74 <ff_getCapacity>:
  * @param	*free_byte :[OUT] kByte of free Capacity
  * @param  *total_byte:[OUT] kByte of total Capacity
  * @retval DRESULT: Operation result
  */
FRESULT ff_getCapacity (const TCHAR* path, DWORD* free_byte, DWORD* total_byte)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08e      	sub	sp, #56	; 0x38
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
	FRESULT fRes = FR_OK;
 8000d80:	2300      	movs	r3, #0
 8000d82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	DWORD fre_clust;
	DWORD sect_size = _MIN_SS;
 8000d86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d8a:	633b      	str	r3, [r7, #48]	; 0x30
	double fre_sect, tot_sect, coef;
	FATFS *fs;

    fRes = f_getfree(path, &fre_clust, &fs);
 8000d8c:	f107 0210 	add.w	r2, r7, #16
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	4619      	mov	r1, r3
 8000d96:	68f8      	ldr	r0, [r7, #12]
 8000d98:	f005 fd96 	bl	80068c8 <f_getfree>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (fRes != FR_OK)
 8000da2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d002      	beq.n	8000db0 <ff_getCapacity+0x3c>
    {
    	return fRes;
 8000daa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000dae:	e048      	b.n	8000e42 <ff_getCapacity+0xce>
    }

#if _MAX_SS != _MIN_SS
    sect_size = fs->ssize;
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	899b      	ldrh	r3, [r3, #12]
 8000db4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

    /* Get total sectors and free sectors */
    tot_sect = (fs->n_fatent - 2) * fs->csize;
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	3b02      	subs	r3, #2
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	8952      	ldrh	r2, [r2, #10]
 8000dc0:	fb02 f303 	mul.w	r3, r2, r3
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fbad 	bl	8000524 <__aeabi_ui2d>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	460b      	mov	r3, r1
 8000dce:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    fre_sect = fre_clust * fs->csize;
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	895b      	ldrh	r3, [r3, #10]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	fb03 f302 	mul.w	r3, r3, r2
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fba0 	bl	8000524 <__aeabi_ui2d>
 8000de4:	4602      	mov	r2, r0
 8000de6:	460b      	mov	r3, r1
 8000de8:	e9c7 2308 	strd	r2, r3, [r7, #32]

    coef = ((double)sect_size)/(1024.0);
 8000dec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000dee:	f7ff fb99 	bl	8000524 <__aeabi_ui2d>
 8000df2:	f04f 0200 	mov.w	r2, #0
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <ff_getCapacity+0xd8>)
 8000df8:	f7ff fd38 	bl	800086c <__aeabi_ddiv>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	460b      	mov	r3, r1
 8000e00:	e9c7 2306 	strd	r2, r3, [r7, #24]

    *total_byte = tot_sect * coef;
 8000e04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000e08:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000e0c:	f7ff fc04 	bl	8000618 <__aeabi_dmul>
 8000e10:	4602      	mov	r2, r0
 8000e12:	460b      	mov	r3, r1
 8000e14:	4610      	mov	r0, r2
 8000e16:	4619      	mov	r1, r3
 8000e18:	f7ff fe10 	bl	8000a3c <__aeabi_d2uiz>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	601a      	str	r2, [r3, #0]
    *free_byte  = fre_sect * coef;
 8000e22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000e26:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000e2a:	f7ff fbf5 	bl	8000618 <__aeabi_dmul>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	460b      	mov	r3, r1
 8000e32:	4610      	mov	r0, r2
 8000e34:	4619      	mov	r1, r3
 8000e36:	f7ff fe01 	bl	8000a3c <__aeabi_d2uiz>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	601a      	str	r2, [r3, #0]

    return FR_OK;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3738      	adds	r7, #56	; 0x38
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40900000 	.word	0x40900000

08000e50 <ff_scanDisk>:
  *		// ff_scanDisk(path)
  * @param	*path  :[IN]  Start node to be scanned
  * @retval DRESULT: Operation result
  */
FRESULT ff_scanDisk (TCHAR* path)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b090      	sub	sp, #64	; 0x40
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
    DIR dir;
    UINT i;
    static FILINFO fno;


    res = f_opendir(&dir, path);                       	   /* Open the directory */
 8000e58:	f107 0308 	add.w	r3, r7, #8
 8000e5c:	6879      	ldr	r1, [r7, #4]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f005 fc5c 	bl	800671c <f_opendir>
 8000e64:	4603      	mov	r3, r0
 8000e66:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (res == FR_OK) {
 8000e6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d13e      	bne.n	8000ef0 <ff_scanDisk+0xa0>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000e72:	f107 0308 	add.w	r3, r7, #8
 8000e76:	4921      	ldr	r1, [pc, #132]	; (8000efc <ff_scanDisk+0xac>)
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f005 fce8 	bl	800684e <f_readdir>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8000e84:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d12c      	bne.n	8000ee6 <ff_scanDisk+0x96>
 8000e8c:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <ff_scanDisk+0xac>)
 8000e8e:	7a5b      	ldrb	r3, [r3, #9]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d028      	beq.n	8000ee6 <ff_scanDisk+0x96>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 8000e94:	4b19      	ldr	r3, [pc, #100]	; (8000efc <ff_scanDisk+0xac>)
 8000e96:	7a1b      	ldrb	r3, [r3, #8]
 8000e98:	f003 0310 	and.w	r3, r3, #16
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d01b      	beq.n	8000ed8 <ff_scanDisk+0x88>
                i = strlen(path);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff f9a5 	bl	80001f0 <strlen>
 8000ea6:	63b8      	str	r0, [r7, #56]	; 0x38
                sprintf(&path[i], "/%s", fno.fname);
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000eac:	4413      	add	r3, r2
 8000eae:	4a14      	ldr	r2, [pc, #80]	; (8000f00 <ff_scanDisk+0xb0>)
 8000eb0:	4914      	ldr	r1, [pc, #80]	; (8000f04 <ff_scanDisk+0xb4>)
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f005 feda 	bl	8006c6c <siprintf>
                res = ff_scanDisk(path);                    /* Enter the directory */
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff ffc9 	bl	8000e50 <ff_scanDisk>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                if (res != FR_OK) break;
 8000ec4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d10b      	bne.n	8000ee4 <ff_scanDisk+0x94>
                path[i] = 0;
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ed0:	4413      	add	r3, r2
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
 8000ed6:	e7cc      	b.n	8000e72 <ff_scanDisk+0x22>
            } else {                                       /* It is a file. */
                printf("%s/%s\n", path, fno.fname);
 8000ed8:	4a09      	ldr	r2, [pc, #36]	; (8000f00 <ff_scanDisk+0xb0>)
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	480a      	ldr	r0, [pc, #40]	; (8000f08 <ff_scanDisk+0xb8>)
 8000ede:	f005 fe37 	bl	8006b50 <iprintf>
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000ee2:	e7c6      	b.n	8000e72 <ff_scanDisk+0x22>
                if (res != FR_OK) break;
 8000ee4:	bf00      	nop
            }
        }
        f_closedir(&dir);
 8000ee6:	f107 0308 	add.w	r3, r7, #8
 8000eea:	4618      	mov	r0, r3
 8000eec:	f005 fc89 	bl	8006802 <f_closedir>
    }

    return res;
 8000ef0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3740      	adds	r7, #64	; 0x40
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200000a4 	.word	0x200000a4
 8000f00:	200000ad 	.word	0x200000ad
 8000f04:	08007ea4 	.word	0x08007ea4
 8000f08:	08007ea8 	.word	0x08007ea8

08000f0c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, 100);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	2364      	movs	r3, #100	; 0x64
 8000f1e:	68b9      	ldr	r1, [r7, #8]
 8000f20:	4803      	ldr	r0, [pc, #12]	; (8000f30 <_write+0x24>)
 8000f22:	f003 fc40 	bl	80047a6 <HAL_UART_Transmit>
	return len;
 8000f26:	687b      	ldr	r3, [r7, #4]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200011f4 	.word	0x200011f4

08000f34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b090      	sub	sp, #64	; 0x40
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3a:	f001 f9d5 	bl	80022e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3e:	f000 f865 	bl	800100c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f42:	f000 f955 	bl	80011f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f46:	f000 f92b 	bl	80011a0 <MX_DMA_Init>
  MX_SPI5_Init();
 8000f4a:	f000 f8c9 	bl	80010e0 <MX_SPI5_Init>
  MX_USART1_UART_Init();
 8000f4e:	f000 f8fd 	bl	800114c <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000f52:	f003 fef1 	bl	8004d38 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  FRESULT fres;
  fres = f_mount(&w25qxxx_fs, "0:", 1);
 8000f56:	2201      	movs	r2, #1
 8000f58:	4925      	ldr	r1, [pc, #148]	; (8000ff0 <main+0xbc>)
 8000f5a:	4826      	ldr	r0, [pc, #152]	; (8000ff4 <main+0xc0>)
 8000f5c:	f005 fb98 	bl	8006690 <f_mount>
 8000f60:	4603      	mov	r3, r0
 8000f62:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (fres == FR_OK)
 8000f66:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d133      	bne.n	8000fd6 <main+0xa2>
  {
	  printf("  spi flash w25qxxx mount ok...\r\n");
 8000f6e:	4822      	ldr	r0, [pc, #136]	; (8000ff8 <main+0xc4>)
 8000f70:	f005 fe74 	bl	8006c5c <puts>

	  DWORD free_byte[1], total_byte[1];
	  fres = ff_getCapacity("0:", free_byte, total_byte);
 8000f74:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000f78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	481c      	ldr	r0, [pc, #112]	; (8000ff0 <main+0xbc>)
 8000f80:	f7ff fef8 	bl	8000d74 <ff_getCapacity>
 8000f84:	4603      	mov	r3, r0
 8000f86:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  if (fres == FR_OK)
 8000f8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d124      	bne.n	8000fdc <main+0xa8>
	  {
		  printf("  total capacity : %ld KiByte\r\n", total_byte[0]);
 8000f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f94:	4619      	mov	r1, r3
 8000f96:	4819      	ldr	r0, [pc, #100]	; (8000ffc <main+0xc8>)
 8000f98:	f005 fdda 	bl	8006b50 <iprintf>
		  printf("  free  capacity : %ld KiByte\r\n", free_byte[0]);
 8000f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4817      	ldr	r0, [pc, #92]	; (8001000 <main+0xcc>)
 8000fa2:	f005 fdd5 	bl	8006b50 <iprintf>

		  TCHAR path[50] = "0:";
 8000fa6:	f643 2330 	movw	r3, #14896	; 0x3a30
 8000faa:	603b      	str	r3, [r7, #0]
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	222e      	movs	r2, #46	; 0x2e
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f005 fdc4 	bl	8006b40 <memset>
		  fres = ff_scanDisk(path);
 8000fb8:	463b      	mov	r3, r7
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff ff48 	bl	8000e50 <ff_scanDisk>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		  if (fres == FR_OK)
 8000fc6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d106      	bne.n	8000fdc <main+0xa8>
		  {
			  printf("----- scan spi flash -----\r\n");
 8000fce:	480d      	ldr	r0, [pc, #52]	; (8001004 <main+0xd0>)
 8000fd0:	f005 fe44 	bl	8006c5c <puts>
 8000fd4:	e002      	b.n	8000fdc <main+0xa8>
		  }
	  }

  }
  else
	  printf("  spi flash w25qxxx mount ok...\r\n");
 8000fd6:	4808      	ldr	r0, [pc, #32]	; (8000ff8 <main+0xc4>)
 8000fd8:	f005 fe40 	bl	8006c5c <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LD3_Blue_GPIO_Port, LD3_Blue_Pin);
 8000fdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fe0:	4809      	ldr	r0, [pc, #36]	; (8001008 <main+0xd4>)
 8000fe2:	f002 f880 	bl	80030e6 <HAL_GPIO_TogglePin>
	  HAL_Delay(300);
 8000fe6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000fea:	f001 f9ef 	bl	80023cc <HAL_Delay>
	  HAL_GPIO_TogglePin(LD3_Blue_GPIO_Port, LD3_Blue_Pin);
 8000fee:	e7f5      	b.n	8000fdc <main+0xa8>
 8000ff0:	08007eb0 	.word	0x08007eb0
 8000ff4:	20000108 	.word	0x20000108
 8000ff8:	08007eb4 	.word	0x08007eb4
 8000ffc:	08007ed8 	.word	0x08007ed8
 8001000:	08007ef8 	.word	0x08007ef8
 8001004:	08007f18 	.word	0x08007f18
 8001008:	40021c00 	.word	0x40021c00

0800100c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b094      	sub	sp, #80	; 0x50
 8001010:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001012:	f107 0320 	add.w	r3, r7, #32
 8001016:	2230      	movs	r2, #48	; 0x30
 8001018:	2100      	movs	r1, #0
 800101a:	4618      	mov	r0, r3
 800101c:	f005 fd90 	bl	8006b40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001020:	f107 030c 	add.w	r3, r7, #12
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001030:	2300      	movs	r3, #0
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	4b28      	ldr	r3, [pc, #160]	; (80010d8 <SystemClock_Config+0xcc>)
 8001036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001038:	4a27      	ldr	r2, [pc, #156]	; (80010d8 <SystemClock_Config+0xcc>)
 800103a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800103e:	6413      	str	r3, [r2, #64]	; 0x40
 8001040:	4b25      	ldr	r3, [pc, #148]	; (80010d8 <SystemClock_Config+0xcc>)
 8001042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800104c:	2300      	movs	r3, #0
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	4b22      	ldr	r3, [pc, #136]	; (80010dc <SystemClock_Config+0xd0>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a21      	ldr	r2, [pc, #132]	; (80010dc <SystemClock_Config+0xd0>)
 8001056:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	4b1f      	ldr	r3, [pc, #124]	; (80010dc <SystemClock_Config+0xd0>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001068:	2301      	movs	r3, #1
 800106a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800106c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001072:	2302      	movs	r3, #2
 8001074:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001076:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800107a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800107c:	2319      	movs	r3, #25
 800107e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001080:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001084:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001086:	2302      	movs	r3, #2
 8001088:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800108a:	2304      	movs	r3, #4
 800108c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800108e:	f107 0320 	add.w	r3, r7, #32
 8001092:	4618      	mov	r0, r3
 8001094:	f002 f842 	bl	800311c <HAL_RCC_OscConfig>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800109e:	f000 f90f 	bl	80012c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a2:	230f      	movs	r3, #15
 80010a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010a6:	2302      	movs	r3, #2
 80010a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010ba:	f107 030c 	add.w	r3, r7, #12
 80010be:	2105      	movs	r1, #5
 80010c0:	4618      	mov	r0, r3
 80010c2:	f002 faa3 	bl	800360c <HAL_RCC_ClockConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80010cc:	f000 f8f8 	bl	80012c0 <Error_Handler>
  }
}
 80010d0:	bf00      	nop
 80010d2:	3750      	adds	r7, #80	; 0x50
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40007000 	.word	0x40007000

080010e0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80010e4:	4b17      	ldr	r3, [pc, #92]	; (8001144 <MX_SPI5_Init+0x64>)
 80010e6:	4a18      	ldr	r2, [pc, #96]	; (8001148 <MX_SPI5_Init+0x68>)
 80010e8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80010ea:	4b16      	ldr	r3, [pc, #88]	; (8001144 <MX_SPI5_Init+0x64>)
 80010ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010f0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80010f2:	4b14      	ldr	r3, [pc, #80]	; (8001144 <MX_SPI5_Init+0x64>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <MX_SPI5_Init+0x64>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010fe:	4b11      	ldr	r3, [pc, #68]	; (8001144 <MX_SPI5_Init+0x64>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <MX_SPI5_Init+0x64>)
 8001106:	2200      	movs	r2, #0
 8001108:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <MX_SPI5_Init+0x64>)
 800110c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001110:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001112:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <MX_SPI5_Init+0x64>)
 8001114:	2200      	movs	r2, #0
 8001116:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001118:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <MX_SPI5_Init+0x64>)
 800111a:	2200      	movs	r2, #0
 800111c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800111e:	4b09      	ldr	r3, [pc, #36]	; (8001144 <MX_SPI5_Init+0x64>)
 8001120:	2200      	movs	r2, #0
 8001122:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001124:	4b07      	ldr	r3, [pc, #28]	; (8001144 <MX_SPI5_Init+0x64>)
 8001126:	2200      	movs	r2, #0
 8001128:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <MX_SPI5_Init+0x64>)
 800112c:	220a      	movs	r2, #10
 800112e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001130:	4804      	ldr	r0, [pc, #16]	; (8001144 <MX_SPI5_Init+0x64>)
 8001132:	f002 fc3b 	bl	80039ac <HAL_SPI_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800113c:	f000 f8c0 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}
 8001144:	2000113c 	.word	0x2000113c
 8001148:	40015000 	.word	0x40015000

0800114c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <MX_USART1_UART_Init+0x4c>)
 8001152:	4a12      	ldr	r2, [pc, #72]	; (800119c <MX_USART1_UART_Init+0x50>)
 8001154:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001156:	4b10      	ldr	r3, [pc, #64]	; (8001198 <MX_USART1_UART_Init+0x4c>)
 8001158:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800115c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <MX_USART1_UART_Init+0x4c>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001164:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <MX_USART1_UART_Init+0x4c>)
 8001166:	2200      	movs	r2, #0
 8001168:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800116a:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <MX_USART1_UART_Init+0x4c>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001170:	4b09      	ldr	r3, [pc, #36]	; (8001198 <MX_USART1_UART_Init+0x4c>)
 8001172:	220c      	movs	r2, #12
 8001174:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001176:	4b08      	ldr	r3, [pc, #32]	; (8001198 <MX_USART1_UART_Init+0x4c>)
 8001178:	2200      	movs	r2, #0
 800117a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <MX_USART1_UART_Init+0x4c>)
 800117e:	2200      	movs	r2, #0
 8001180:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001182:	4805      	ldr	r0, [pc, #20]	; (8001198 <MX_USART1_UART_Init+0x4c>)
 8001184:	f003 fac2 	bl	800470c <HAL_UART_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800118e:	f000 f897 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	200011f4 	.word	0x200011f4
 800119c:	40011000 	.word	0x40011000

080011a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	4b10      	ldr	r3, [pc, #64]	; (80011ec <MX_DMA_Init+0x4c>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a0f      	ldr	r2, [pc, #60]	; (80011ec <MX_DMA_Init+0x4c>)
 80011b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <MX_DMA_Init+0x4c>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2100      	movs	r1, #0
 80011c6:	203b      	movs	r0, #59	; 0x3b
 80011c8:	f001 f9ff 	bl	80025ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80011cc:	203b      	movs	r0, #59	; 0x3b
 80011ce:	f001 fa18 	bl	8002602 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2100      	movs	r1, #0
 80011d6:	203c      	movs	r0, #60	; 0x3c
 80011d8:	f001 f9f7 	bl	80025ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80011dc:	203c      	movs	r0, #60	; 0x3c
 80011de:	f001 fa10 	bl	8002602 <HAL_NVIC_EnableIRQ>

}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800

080011f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b088      	sub	sp, #32
 80011f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f6:	f107 030c 	add.w	r3, r7, #12
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	4b2a      	ldr	r3, [pc, #168]	; (80012b4 <MX_GPIO_Init+0xc4>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a29      	ldr	r2, [pc, #164]	; (80012b4 <MX_GPIO_Init+0xc4>)
 8001210:	f043 0320 	orr.w	r3, r3, #32
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b27      	ldr	r3, [pc, #156]	; (80012b4 <MX_GPIO_Init+0xc4>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0320 	and.w	r3, r3, #32
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	4b23      	ldr	r3, [pc, #140]	; (80012b4 <MX_GPIO_Init+0xc4>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a22      	ldr	r2, [pc, #136]	; (80012b4 <MX_GPIO_Init+0xc4>)
 800122c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <MX_GPIO_Init+0xc4>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	603b      	str	r3, [r7, #0]
 8001242:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <MX_GPIO_Init+0xc4>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a1b      	ldr	r2, [pc, #108]	; (80012b4 <MX_GPIO_Init+0xc4>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <MX_GPIO_Init+0xc4>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI5_CS_GPIO_Port, SPI5_CS_Pin, GPIO_PIN_SET);
 800125a:	2201      	movs	r2, #1
 800125c:	2140      	movs	r1, #64	; 0x40
 800125e:	4816      	ldr	r0, [pc, #88]	; (80012b8 <MX_GPIO_Init+0xc8>)
 8001260:	f001 ff28 	bl	80030b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LD__Red_Pin|LD2_Green_Pin|LD3_Blue_Pin, GPIO_PIN_SET);
 8001264:	2201      	movs	r2, #1
 8001266:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800126a:	4814      	ldr	r0, [pc, #80]	; (80012bc <MX_GPIO_Init+0xcc>)
 800126c:	f001 ff22 	bl	80030b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI5_CS_Pin */
  GPIO_InitStruct.Pin = SPI5_CS_Pin;
 8001270:	2340      	movs	r3, #64	; 0x40
 8001272:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001274:	2301      	movs	r3, #1
 8001276:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	2300      	movs	r3, #0
 800127e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI5_CS_GPIO_Port, &GPIO_InitStruct);
 8001280:	f107 030c 	add.w	r3, r7, #12
 8001284:	4619      	mov	r1, r3
 8001286:	480c      	ldr	r0, [pc, #48]	; (80012b8 <MX_GPIO_Init+0xc8>)
 8001288:	f001 fd68 	bl	8002d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD__Red_Pin LD2_Green_Pin LD3_Blue_Pin */
  GPIO_InitStruct.Pin = LD__Red_Pin|LD2_Green_Pin|LD3_Blue_Pin;
 800128c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001290:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001292:	2301      	movs	r3, #1
 8001294:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129a:	2300      	movs	r3, #0
 800129c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800129e:	f107 030c 	add.w	r3, r7, #12
 80012a2:	4619      	mov	r1, r3
 80012a4:	4805      	ldr	r0, [pc, #20]	; (80012bc <MX_GPIO_Init+0xcc>)
 80012a6:	f001 fd59 	bl	8002d5c <HAL_GPIO_Init>

}
 80012aa:	bf00      	nop
 80012ac:	3720      	adds	r7, #32
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40021400 	.word	0x40021400
 80012bc:	40021c00 	.word	0x40021c00

080012c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c4:	b672      	cpsid	i
}
 80012c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <Error_Handler+0x8>
	...

080012cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	4b10      	ldr	r3, [pc, #64]	; (8001318 <HAL_MspInit+0x4c>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	4a0f      	ldr	r2, [pc, #60]	; (8001318 <HAL_MspInit+0x4c>)
 80012dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e0:	6453      	str	r3, [r2, #68]	; 0x44
 80012e2:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <HAL_MspInit+0x4c>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	603b      	str	r3, [r7, #0]
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <HAL_MspInit+0x4c>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	4a08      	ldr	r2, [pc, #32]	; (8001318 <HAL_MspInit+0x4c>)
 80012f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012fc:	6413      	str	r3, [r2, #64]	; 0x40
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <HAL_MspInit+0x4c>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001306:	603b      	str	r3, [r7, #0]
 8001308:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800

0800131c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	; 0x28
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a4c      	ldr	r2, [pc, #304]	; (800146c <HAL_SPI_MspInit+0x150>)
 800133a:	4293      	cmp	r3, r2
 800133c:	f040 8091 	bne.w	8001462 <HAL_SPI_MspInit+0x146>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001340:	2300      	movs	r3, #0
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	4b4a      	ldr	r3, [pc, #296]	; (8001470 <HAL_SPI_MspInit+0x154>)
 8001346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001348:	4a49      	ldr	r2, [pc, #292]	; (8001470 <HAL_SPI_MspInit+0x154>)
 800134a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800134e:	6453      	str	r3, [r2, #68]	; 0x44
 8001350:	4b47      	ldr	r3, [pc, #284]	; (8001470 <HAL_SPI_MspInit+0x154>)
 8001352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001354:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800135c:	2300      	movs	r3, #0
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	4b43      	ldr	r3, [pc, #268]	; (8001470 <HAL_SPI_MspInit+0x154>)
 8001362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001364:	4a42      	ldr	r2, [pc, #264]	; (8001470 <HAL_SPI_MspInit+0x154>)
 8001366:	f043 0320 	orr.w	r3, r3, #32
 800136a:	6313      	str	r3, [r2, #48]	; 0x30
 800136c:	4b40      	ldr	r3, [pc, #256]	; (8001470 <HAL_SPI_MspInit+0x154>)
 800136e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001370:	f003 0320 	and.w	r3, r3, #32
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001378:	f44f 7360 	mov.w	r3, #896	; 0x380
 800137c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137e:	2302      	movs	r3, #2
 8001380:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001386:	2303      	movs	r3, #3
 8001388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800138a:	2305      	movs	r3, #5
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	4619      	mov	r1, r3
 8001394:	4837      	ldr	r0, [pc, #220]	; (8001474 <HAL_SPI_MspInit+0x158>)
 8001396:	f001 fce1 	bl	8002d5c <HAL_GPIO_Init>

    /* SPI5 DMA Init */
    /* SPI5_RX Init */
    hdma_spi5_rx.Instance = DMA2_Stream3;
 800139a:	4b37      	ldr	r3, [pc, #220]	; (8001478 <HAL_SPI_MspInit+0x15c>)
 800139c:	4a37      	ldr	r2, [pc, #220]	; (800147c <HAL_SPI_MspInit+0x160>)
 800139e:	601a      	str	r2, [r3, #0]
    hdma_spi5_rx.Init.Channel = DMA_CHANNEL_2;
 80013a0:	4b35      	ldr	r3, [pc, #212]	; (8001478 <HAL_SPI_MspInit+0x15c>)
 80013a2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80013a6:	605a      	str	r2, [r3, #4]
    hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013a8:	4b33      	ldr	r3, [pc, #204]	; (8001478 <HAL_SPI_MspInit+0x15c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
    hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013ae:	4b32      	ldr	r3, [pc, #200]	; (8001478 <HAL_SPI_MspInit+0x15c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	60da      	str	r2, [r3, #12]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013b4:	4b30      	ldr	r3, [pc, #192]	; (8001478 <HAL_SPI_MspInit+0x15c>)
 80013b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013ba:	611a      	str	r2, [r3, #16]
    hdma_spi5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013bc:	4b2e      	ldr	r3, [pc, #184]	; (8001478 <HAL_SPI_MspInit+0x15c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	615a      	str	r2, [r3, #20]
    hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013c2:	4b2d      	ldr	r3, [pc, #180]	; (8001478 <HAL_SPI_MspInit+0x15c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
    hdma_spi5_rx.Init.Mode = DMA_NORMAL;
 80013c8:	4b2b      	ldr	r3, [pc, #172]	; (8001478 <HAL_SPI_MspInit+0x15c>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	61da      	str	r2, [r3, #28]
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013ce:	4b2a      	ldr	r3, [pc, #168]	; (8001478 <HAL_SPI_MspInit+0x15c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	621a      	str	r2, [r3, #32]
    hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013d4:	4b28      	ldr	r3, [pc, #160]	; (8001478 <HAL_SPI_MspInit+0x15c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 80013da:	4827      	ldr	r0, [pc, #156]	; (8001478 <HAL_SPI_MspInit+0x15c>)
 80013dc:	f001 f92c 	bl	8002638 <HAL_DMA_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 80013e6:	f7ff ff6b 	bl	80012c0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi5_rx);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a22      	ldr	r2, [pc, #136]	; (8001478 <HAL_SPI_MspInit+0x15c>)
 80013ee:	64da      	str	r2, [r3, #76]	; 0x4c
 80013f0:	4a21      	ldr	r2, [pc, #132]	; (8001478 <HAL_SPI_MspInit+0x15c>)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI5_TX Init */
    hdma_spi5_tx.Instance = DMA2_Stream4;
 80013f6:	4b22      	ldr	r3, [pc, #136]	; (8001480 <HAL_SPI_MspInit+0x164>)
 80013f8:	4a22      	ldr	r2, [pc, #136]	; (8001484 <HAL_SPI_MspInit+0x168>)
 80013fa:	601a      	str	r2, [r3, #0]
    hdma_spi5_tx.Init.Channel = DMA_CHANNEL_2;
 80013fc:	4b20      	ldr	r3, [pc, #128]	; (8001480 <HAL_SPI_MspInit+0x164>)
 80013fe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001402:	605a      	str	r2, [r3, #4]
    hdma_spi5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001404:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <HAL_SPI_MspInit+0x164>)
 8001406:	2240      	movs	r2, #64	; 0x40
 8001408:	609a      	str	r2, [r3, #8]
    hdma_spi5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800140a:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <HAL_SPI_MspInit+0x164>)
 800140c:	2200      	movs	r2, #0
 800140e:	60da      	str	r2, [r3, #12]
    hdma_spi5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001410:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <HAL_SPI_MspInit+0x164>)
 8001412:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001416:	611a      	str	r2, [r3, #16]
    hdma_spi5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001418:	4b19      	ldr	r3, [pc, #100]	; (8001480 <HAL_SPI_MspInit+0x164>)
 800141a:	2200      	movs	r2, #0
 800141c:	615a      	str	r2, [r3, #20]
    hdma_spi5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800141e:	4b18      	ldr	r3, [pc, #96]	; (8001480 <HAL_SPI_MspInit+0x164>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
    hdma_spi5_tx.Init.Mode = DMA_NORMAL;
 8001424:	4b16      	ldr	r3, [pc, #88]	; (8001480 <HAL_SPI_MspInit+0x164>)
 8001426:	2200      	movs	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
    hdma_spi5_tx.Init.Priority = DMA_PRIORITY_LOW;
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <HAL_SPI_MspInit+0x164>)
 800142c:	2200      	movs	r2, #0
 800142e:	621a      	str	r2, [r3, #32]
    hdma_spi5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001430:	4b13      	ldr	r3, [pc, #76]	; (8001480 <HAL_SPI_MspInit+0x164>)
 8001432:	2200      	movs	r2, #0
 8001434:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi5_tx) != HAL_OK)
 8001436:	4812      	ldr	r0, [pc, #72]	; (8001480 <HAL_SPI_MspInit+0x164>)
 8001438:	f001 f8fe 	bl	8002638 <HAL_DMA_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 8001442:	f7ff ff3d 	bl	80012c0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi5_tx);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a0d      	ldr	r2, [pc, #52]	; (8001480 <HAL_SPI_MspInit+0x164>)
 800144a:	649a      	str	r2, [r3, #72]	; 0x48
 800144c:	4a0c      	ldr	r2, [pc, #48]	; (8001480 <HAL_SPI_MspInit+0x164>)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI5 interrupt Init */
    HAL_NVIC_SetPriority(SPI5_IRQn, 0, 0);
 8001452:	2200      	movs	r2, #0
 8001454:	2100      	movs	r1, #0
 8001456:	2055      	movs	r0, #85	; 0x55
 8001458:	f001 f8b7 	bl	80025ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 800145c:	2055      	movs	r0, #85	; 0x55
 800145e:	f001 f8d0 	bl	8002602 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001462:	bf00      	nop
 8001464:	3728      	adds	r7, #40	; 0x28
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40015000 	.word	0x40015000
 8001470:	40023800 	.word	0x40023800
 8001474:	40021400 	.word	0x40021400
 8001478:	20001194 	.word	0x20001194
 800147c:	40026458 	.word	0x40026458
 8001480:	20001238 	.word	0x20001238
 8001484:	40026470 	.word	0x40026470

08001488 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08a      	sub	sp, #40	; 0x28
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a19      	ldr	r2, [pc, #100]	; (800150c <HAL_UART_MspInit+0x84>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d12c      	bne.n	8001504 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
 80014ae:	4b18      	ldr	r3, [pc, #96]	; (8001510 <HAL_UART_MspInit+0x88>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b2:	4a17      	ldr	r2, [pc, #92]	; (8001510 <HAL_UART_MspInit+0x88>)
 80014b4:	f043 0310 	orr.w	r3, r3, #16
 80014b8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ba:	4b15      	ldr	r3, [pc, #84]	; (8001510 <HAL_UART_MspInit+0x88>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	f003 0310 	and.w	r3, r3, #16
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	4b11      	ldr	r3, [pc, #68]	; (8001510 <HAL_UART_MspInit+0x88>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a10      	ldr	r2, [pc, #64]	; (8001510 <HAL_UART_MspInit+0x88>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <HAL_UART_MspInit+0x88>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80014e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e8:	2302      	movs	r3, #2
 80014ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f0:	2303      	movs	r3, #3
 80014f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014f4:	2307      	movs	r3, #7
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	4619      	mov	r1, r3
 80014fe:	4805      	ldr	r0, [pc, #20]	; (8001514 <HAL_UART_MspInit+0x8c>)
 8001500:	f001 fc2c 	bl	8002d5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001504:	bf00      	nop
 8001506:	3728      	adds	r7, #40	; 0x28
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40011000 	.word	0x40011000
 8001510:	40023800 	.word	0x40023800
 8001514:	40020000 	.word	0x40020000

08001518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800151c:	e7fe      	b.n	800151c <NMI_Handler+0x4>

0800151e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001522:	e7fe      	b.n	8001522 <HardFault_Handler+0x4>

08001524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <MemManage_Handler+0x4>

0800152a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800152e:	e7fe      	b.n	800152e <BusFault_Handler+0x4>

08001530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <UsageFault_Handler+0x4>

08001536 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001564:	f000 ff12 	bl	800238c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}

0800156c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_rx);
 8001570:	4802      	ldr	r0, [pc, #8]	; (800157c <DMA2_Stream3_IRQHandler+0x10>)
 8001572:	f001 f989 	bl	8002888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20001194 	.word	0x20001194

08001580 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_tx);
 8001584:	4802      	ldr	r0, [pc, #8]	; (8001590 <DMA2_Stream4_IRQHandler+0x10>)
 8001586:	f001 f97f 	bl	8002888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20001238 	.word	0x20001238

08001594 <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 8001598:	4802      	ldr	r0, [pc, #8]	; (80015a4 <SPI5_IRQHandler+0x10>)
 800159a:	f002 fd11 	bl	8003fc0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	2000113c 	.word	0x2000113c

080015a8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	e00a      	b.n	80015d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015ba:	f3af 8000 	nop.w
 80015be:	4601      	mov	r1, r0
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	1c5a      	adds	r2, r3, #1
 80015c4:	60ba      	str	r2, [r7, #8]
 80015c6:	b2ca      	uxtb	r2, r1
 80015c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	3301      	adds	r3, #1
 80015ce:	617b      	str	r3, [r7, #20]
 80015d0:	697a      	ldr	r2, [r7, #20]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	dbf0      	blt.n	80015ba <_read+0x12>
	}

return len;
 80015d8:	687b      	ldr	r3, [r7, #4]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3718      	adds	r7, #24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
	return -1;
 80015ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800160a:	605a      	str	r2, [r3, #4]
	return 0;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <_isatty>:

int _isatty(int file)
{
 800161a:	b480      	push	{r7}
 800161c:	b083      	sub	sp, #12
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
	return 1;
 8001622:	2301      	movs	r3, #1
}
 8001624:	4618      	mov	r0, r3
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
	return 0;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
	...

0800164c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001654:	4a14      	ldr	r2, [pc, #80]	; (80016a8 <_sbrk+0x5c>)
 8001656:	4b15      	ldr	r3, [pc, #84]	; (80016ac <_sbrk+0x60>)
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001660:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <_sbrk+0x64>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d102      	bne.n	800166e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001668:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <_sbrk+0x64>)
 800166a:	4a12      	ldr	r2, [pc, #72]	; (80016b4 <_sbrk+0x68>)
 800166c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <_sbrk+0x64>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4413      	add	r3, r2
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	429a      	cmp	r2, r3
 800167a:	d207      	bcs.n	800168c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800167c:	f005 fa36 	bl	8006aec <__errno>
 8001680:	4603      	mov	r3, r0
 8001682:	220c      	movs	r2, #12
 8001684:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001686:	f04f 33ff 	mov.w	r3, #4294967295
 800168a:	e009      	b.n	80016a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800168c:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <_sbrk+0x64>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001692:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <_sbrk+0x64>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4413      	add	r3, r2
 800169a:	4a05      	ldr	r2, [pc, #20]	; (80016b0 <_sbrk+0x64>)
 800169c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800169e:	68fb      	ldr	r3, [r7, #12]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20030000 	.word	0x20030000
 80016ac:	00000400 	.word	0x00000400
 80016b0:	200000bc 	.word	0x200000bc
 80016b4:	20004380 	.word	0x20004380

080016b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <SystemInit+0x20>)
 80016be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016c2:	4a05      	ldr	r2, [pc, #20]	; (80016d8 <SystemInit+0x20>)
 80016c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <W25Qxxx_SPI>:
  * @brief spi transmit and receive
  * @param data: [in] transmit data
  * @retval return received data [Byte]
  */
static uint8_t W25Qxxx_SPI(uint8_t data)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;

	HAL_SPI_TransmitReceive_DMA(&hspi_flash, &data, &ret, 1);
 80016e6:	f107 020f 	add.w	r2, r7, #15
 80016ea:	1df9      	adds	r1, r7, #7
 80016ec:	2301      	movs	r3, #1
 80016ee:	4811      	ldr	r0, [pc, #68]	; (8001734 <W25Qxxx_SPI+0x58>)
 80016f0:	f002 fb64 	bl	8003dbc <HAL_SPI_TransmitReceive_DMA>

	uint32_t endTick = 0, startTick = HAL_GetTick();
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
 80016f8:	f000 fe5c 	bl	80023b4 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]
	do {
		endTick = HAL_GetTick();
 80016fe:	f000 fe59 	bl	80023b4 <HAL_GetTick>
 8001702:	6178      	str	r0, [r7, #20]
	} while ((WriteReadStatus==0) && (endTick-startTick)<SPI_FLASH_TIMEOUT);
 8001704:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <W25Qxxx_SPI+0x5c>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d106      	bne.n	800171a <W25Qxxx_SPI+0x3e>
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	f247 522f 	movw	r2, #29999	; 0x752f
 8001716:	4293      	cmp	r3, r2
 8001718:	d9f1      	bls.n	80016fe <W25Qxxx_SPI+0x22>
	if (WriteReadStatus)
 800171a:	4b07      	ldr	r3, [pc, #28]	; (8001738 <W25Qxxx_SPI+0x5c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d002      	beq.n	8001728 <W25Qxxx_SPI+0x4c>
		WriteReadStatus = 0;
 8001722:	4b05      	ldr	r3, [pc, #20]	; (8001738 <W25Qxxx_SPI+0x5c>)
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
	return ret;
 8001728:	7bfb      	ldrb	r3, [r7, #15]
}
 800172a:	4618      	mov	r0, r3
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	2000113c 	.word	0x2000113c
 8001738:	200000c8 	.word	0x200000c8

0800173c <W25Qxxx_SPI_Tx>:
  * @brief spi transmit
  * @param *pData: [in] transmit data
  * @param Size:   [in] size of data
  */
static void W25Qxxx_SPI_Tx(uint8_t *pData, uint16_t Size)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit_DMA(&hspi_flash, pData, Size);
 8001748:	887b      	ldrh	r3, [r7, #2]
 800174a:	461a      	mov	r2, r3
 800174c:	6879      	ldr	r1, [r7, #4]
 800174e:	4810      	ldr	r0, [pc, #64]	; (8001790 <W25Qxxx_SPI_Tx+0x54>)
 8001750:	f002 f9b6 	bl	8003ac0 <HAL_SPI_Transmit_DMA>

	uint32_t endTick = 0, startTick = HAL_GetTick();
 8001754:	2300      	movs	r3, #0
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	f000 fe2c 	bl	80023b4 <HAL_GetTick>
 800175c:	60b8      	str	r0, [r7, #8]
	do {
		endTick = HAL_GetTick();
 800175e:	f000 fe29 	bl	80023b4 <HAL_GetTick>
 8001762:	60f8      	str	r0, [r7, #12]
	} while ((WriteStatus==0) && (endTick-startTick)<SPI_FLASH_TIMEOUT);
 8001764:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <W25Qxxx_SPI_Tx+0x58>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d106      	bne.n	800177a <W25Qxxx_SPI_Tx+0x3e>
 800176c:	68fa      	ldr	r2, [r7, #12]
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	f247 522f 	movw	r2, #29999	; 0x752f
 8001776:	4293      	cmp	r3, r2
 8001778:	d9f1      	bls.n	800175e <W25Qxxx_SPI_Tx+0x22>
	if (WriteStatus)
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <W25Qxxx_SPI_Tx+0x58>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d002      	beq.n	8001788 <W25Qxxx_SPI_Tx+0x4c>
		WriteStatus = 0;
 8001782:	4b04      	ldr	r3, [pc, #16]	; (8001794 <W25Qxxx_SPI_Tx+0x58>)
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
}
 8001788:	bf00      	nop
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	2000113c 	.word	0x2000113c
 8001794:	200000c0 	.word	0x200000c0

08001798 <W25Qxxx_SPI_Rx>:
  * @param *pData: [in] receive data
  * @param Size:   [in] size of data
  * @retval HAL status
  */
static HAL_StatusTypeDef W25Qxxx_SPI_Rx(uint8_t *pData, uint16_t Size)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	460b      	mov	r3, r1
 80017a2:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef sta = HAL_OK;
 80017a4:	2300      	movs	r3, #0
 80017a6:	75fb      	strb	r3, [r7, #23]
	sta = HAL_SPI_Receive_DMA(&hspi_flash, pData, Size);
 80017a8:	887b      	ldrh	r3, [r7, #2]
 80017aa:	461a      	mov	r2, r3
 80017ac:	6879      	ldr	r1, [r7, #4]
 80017ae:	4816      	ldr	r0, [pc, #88]	; (8001808 <W25Qxxx_SPI_Rx+0x70>)
 80017b0:	f002 fa3c 	bl	8003c2c <HAL_SPI_Receive_DMA>
 80017b4:	4603      	mov	r3, r0
 80017b6:	75fb      	strb	r3, [r7, #23]

	uint32_t endTick = 0, startTick = HAL_GetTick();
 80017b8:	2300      	movs	r3, #0
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	f000 fdfa 	bl	80023b4 <HAL_GetTick>
 80017c0:	60f8      	str	r0, [r7, #12]
	do {
		endTick = HAL_GetTick();
 80017c2:	f000 fdf7 	bl	80023b4 <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]
	} while ((ReadStatus==0) && (endTick-startTick)<SPI_FLASH_TIMEOUT);
 80017c8:	4b10      	ldr	r3, [pc, #64]	; (800180c <W25Qxxx_SPI_Rx+0x74>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d106      	bne.n	80017de <W25Qxxx_SPI_Rx+0x46>
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	f247 522f 	movw	r2, #29999	; 0x752f
 80017da:	4293      	cmp	r3, r2
 80017dc:	d9f1      	bls.n	80017c2 <W25Qxxx_SPI_Rx+0x2a>

	if ((endTick-startTick)>=SPI_FLASH_TIMEOUT)
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	f247 522f 	movw	r2, #29999	; 0x752f
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d901      	bls.n	80017f0 <W25Qxxx_SPI_Rx+0x58>
		return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e007      	b.n	8001800 <W25Qxxx_SPI_Rx+0x68>

	if (ReadStatus)
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <W25Qxxx_SPI_Rx+0x74>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d002      	beq.n	80017fe <W25Qxxx_SPI_Rx+0x66>
		ReadStatus = 0;
 80017f8:	4b04      	ldr	r3, [pc, #16]	; (800180c <W25Qxxx_SPI_Rx+0x74>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]

	return sta;
 80017fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3718      	adds	r7, #24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	2000113c 	.word	0x2000113c
 800180c:	200000c4 	.word	0x200000c4

08001810 <W25Qxxx_Enable>:
  * 	Used before other operations
  * @param  none
  * @retval none
  */
static void W25Qxxx_Enable(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CS_PORT, SPI_CS_PIN, GPIO_PIN_RESET);
 8001814:	2200      	movs	r2, #0
 8001816:	2140      	movs	r1, #64	; 0x40
 8001818:	4802      	ldr	r0, [pc, #8]	; (8001824 <W25Qxxx_Enable+0x14>)
 800181a:	f001 fc4b 	bl	80030b4 <HAL_GPIO_WritePin>
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40021400 	.word	0x40021400

08001828 <W25Qxxx_Disable>:
  * 	Used after other operations
  * @param  none
  * @retval none
  */
static void W25Qxxx_Disable(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CS_PORT, SPI_CS_PIN, GPIO_PIN_SET);
 800182c:	2201      	movs	r2, #1
 800182e:	2140      	movs	r1, #64	; 0x40
 8001830:	4802      	ldr	r0, [pc, #8]	; (800183c <W25Qxxx_Disable+0x14>)
 8001832:	f001 fc3f 	bl	80030b4 <HAL_GPIO_WritePin>
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40021400 	.word	0x40021400

08001840 <W25Qxxx_Power_Up>:


static void W25Qxxx_Power_Up(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
	W25Qxxx_Enable();
 8001844:	f7ff ffe4 	bl	8001810 <W25Qxxx_Enable>

	W25Qxxx_SPI(CMD_Device_ID);
 8001848:	20ab      	movs	r0, #171	; 0xab
 800184a:	f7ff ff47 	bl	80016dc <W25Qxxx_SPI>
	W25Qxxx_SPI(CMD_DUMMY);
 800184e:	2000      	movs	r0, #0
 8001850:	f7ff ff44 	bl	80016dc <W25Qxxx_SPI>
	W25Qxxx_SPI(CMD_DUMMY);
 8001854:	2000      	movs	r0, #0
 8001856:	f7ff ff41 	bl	80016dc <W25Qxxx_SPI>
	W25Qxxx_SPI(CMD_DUMMY);
 800185a:	2000      	movs	r0, #0
 800185c:	f7ff ff3e 	bl	80016dc <W25Qxxx_SPI>
	W25Qxxx_Device_ID = W25Qxxx_SPI(CMD_DUMMY);
 8001860:	2000      	movs	r0, #0
 8001862:	f7ff ff3b 	bl	80016dc <W25Qxxx_SPI>
 8001866:	4603      	mov	r3, r0
 8001868:	461a      	mov	r2, r3
 800186a:	4b03      	ldr	r3, [pc, #12]	; (8001878 <W25Qxxx_Power_Up+0x38>)
 800186c:	701a      	strb	r2, [r3, #0]

	W25Qxxx_Disable();
 800186e:	f7ff ffdb 	bl	8001828 <W25Qxxx_Disable>
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	200022dc 	.word	0x200022dc

0800187c <W25Qxxx_Read_Manu_Dev_ID>:

/** ############################################################################################
  * @brief get W25Qxxx Manufacturer + Device ID [16-bit]
  */
static void W25Qxxx_Read_Manu_Dev_ID(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
	uint16_t Temp0 = 0, Temp1 = 0;
 8001882:	2300      	movs	r3, #0
 8001884:	80fb      	strh	r3, [r7, #6]
 8001886:	2300      	movs	r3, #0
 8001888:	80bb      	strh	r3, [r7, #4]

	W25Qxxx_Enable();
 800188a:	f7ff ffc1 	bl	8001810 <W25Qxxx_Enable>

	W25Qxxx_SPI(CMD_Manufacture_ID);
 800188e:	2090      	movs	r0, #144	; 0x90
 8001890:	f7ff ff24 	bl	80016dc <W25Qxxx_SPI>
	W25Qxxx_SPI(CMD_DUMMY);
 8001894:	2000      	movs	r0, #0
 8001896:	f7ff ff21 	bl	80016dc <W25Qxxx_SPI>
	W25Qxxx_SPI(CMD_DUMMY);
 800189a:	2000      	movs	r0, #0
 800189c:	f7ff ff1e 	bl	80016dc <W25Qxxx_SPI>
	W25Qxxx_SPI(CMD_DUMMY);
 80018a0:	2000      	movs	r0, #0
 80018a2:	f7ff ff1b 	bl	80016dc <W25Qxxx_SPI>
	Temp0 = W25Qxxx_SPI(CMD_DUMMY);
 80018a6:	2000      	movs	r0, #0
 80018a8:	f7ff ff18 	bl	80016dc <W25Qxxx_SPI>
 80018ac:	4603      	mov	r3, r0
 80018ae:	80fb      	strh	r3, [r7, #6]
	Temp1 = W25Qxxx_SPI(CMD_DUMMY);
 80018b0:	2000      	movs	r0, #0
 80018b2:	f7ff ff13 	bl	80016dc <W25Qxxx_SPI>
 80018b6:	4603      	mov	r3, r0
 80018b8:	80bb      	strh	r3, [r7, #4]

	W25Qxxx_Disable();
 80018ba:	f7ff ffb5 	bl	8001828 <W25Qxxx_Disable>
	W25Qxxx_Manufacturer_Device_ID = (Temp0 << 8) | Temp1;
 80018be:	88fb      	ldrh	r3, [r7, #6]
 80018c0:	021b      	lsls	r3, r3, #8
 80018c2:	b21a      	sxth	r2, r3
 80018c4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	b21b      	sxth	r3, r3
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	4b03      	ldr	r3, [pc, #12]	; (80018dc <W25Qxxx_Read_Manu_Dev_ID+0x60>)
 80018d0:	801a      	strh	r2, [r3, #0]
}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	200022f0 	.word	0x200022f0

080018e0 <W25Qxxx_Read_JEDEC_ID>:

/** ############################################################################################
  * @brief get W25Qxxx JEDEC ID [24-bit]
  */
static void W25Qxxx_Read_JEDEC_ID(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
	uint32_t JEDEC_ID = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	2300      	movs	r3, #0
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	2300      	movs	r3, #0
 80018f0:	607b      	str	r3, [r7, #4]
 80018f2:	2300      	movs	r3, #0
 80018f4:	603b      	str	r3, [r7, #0]

	W25Qxxx_Enable();
 80018f6:	f7ff ff8b 	bl	8001810 <W25Qxxx_Enable>

	W25Qxxx_SPI(CMD_JEDEC_ID);
 80018fa:	209f      	movs	r0, #159	; 0x9f
 80018fc:	f7ff feee 	bl	80016dc <W25Qxxx_SPI>
	Temp0 = W25Qxxx_SPI(CMD_DUMMY);
 8001900:	2000      	movs	r0, #0
 8001902:	f7ff feeb 	bl	80016dc <W25Qxxx_SPI>
 8001906:	4603      	mov	r3, r0
 8001908:	60bb      	str	r3, [r7, #8]
	Temp1 = W25Qxxx_SPI(CMD_DUMMY);
 800190a:	2000      	movs	r0, #0
 800190c:	f7ff fee6 	bl	80016dc <W25Qxxx_SPI>
 8001910:	4603      	mov	r3, r0
 8001912:	607b      	str	r3, [r7, #4]
	Temp2 = W25Qxxx_SPI(CMD_DUMMY);
 8001914:	2000      	movs	r0, #0
 8001916:	f7ff fee1 	bl	80016dc <W25Qxxx_SPI>
 800191a:	4603      	mov	r3, r0
 800191c:	603b      	str	r3, [r7, #0]

	W25Qxxx_Disable();
 800191e:	f7ff ff83 	bl	8001828 <W25Qxxx_Disable>
	JEDEC_ID = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	041a      	lsls	r2, r3, #16
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	021b      	lsls	r3, r3, #8
 800192a:	4313      	orrs	r3, r2
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	4313      	orrs	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]
	W25Qxxx_JEDEC_ID = JEDEC_ID;
 8001932:	4a03      	ldr	r2, [pc, #12]	; (8001940 <W25Qxxx_Read_JEDEC_ID+0x60>)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6013      	str	r3, [r2, #0]
}
 8001938:	bf00      	nop
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	200022d0 	.word	0x200022d0

08001944 <W25Qxxx_Read_Unique_ID>:

/** ############################################################################################
  * @brief  get W25Qxxx Unique ID [64-bit 8Byte-array]
  */
static void W25Qxxx_Read_Unique_ID(void)
{
 8001944:	b590      	push	{r4, r7, lr}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
	W25Qxxx_Enable();
 800194a:	f7ff ff61 	bl	8001810 <W25Qxxx_Enable>

	W25Qxxx_SPI(CMD_Unique_ID);
 800194e:	204b      	movs	r0, #75	; 0x4b
 8001950:	f7ff fec4 	bl	80016dc <W25Qxxx_SPI>
	for (uint8_t i = 0; i < 4; i++)
 8001954:	2300      	movs	r3, #0
 8001956:	71fb      	strb	r3, [r7, #7]
 8001958:	e005      	b.n	8001966 <W25Qxxx_Read_Unique_ID+0x22>
		W25Qxxx_SPI(CMD_DUMMY);
 800195a:	2000      	movs	r0, #0
 800195c:	f7ff febe 	bl	80016dc <W25Qxxx_SPI>
	for (uint8_t i = 0; i < 4; i++)
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	3301      	adds	r3, #1
 8001964:	71fb      	strb	r3, [r7, #7]
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	2b03      	cmp	r3, #3
 800196a:	d9f6      	bls.n	800195a <W25Qxxx_Read_Unique_ID+0x16>
	for (uint8_t i = 0; i < 8; i++)
 800196c:	2300      	movs	r3, #0
 800196e:	71bb      	strb	r3, [r7, #6]
 8001970:	e00a      	b.n	8001988 <W25Qxxx_Read_Unique_ID+0x44>
		W25Qxxx_UniqID[i] = W25Qxxx_SPI(CMD_DUMMY);
 8001972:	79bc      	ldrb	r4, [r7, #6]
 8001974:	2000      	movs	r0, #0
 8001976:	f7ff feb1 	bl	80016dc <W25Qxxx_SPI>
 800197a:	4603      	mov	r3, r0
 800197c:	461a      	mov	r2, r3
 800197e:	4b07      	ldr	r3, [pc, #28]	; (800199c <W25Qxxx_Read_Unique_ID+0x58>)
 8001980:	551a      	strb	r2, [r3, r4]
	for (uint8_t i = 0; i < 8; i++)
 8001982:	79bb      	ldrb	r3, [r7, #6]
 8001984:	3301      	adds	r3, #1
 8001986:	71bb      	strb	r3, [r7, #6]
 8001988:	79bb      	ldrb	r3, [r7, #6]
 800198a:	2b07      	cmp	r3, #7
 800198c:	d9f1      	bls.n	8001972 <W25Qxxx_Read_Unique_ID+0x2e>

	W25Qxxx_Disable();
 800198e:	f7ff ff4b 	bl	8001828 <W25Qxxx_Disable>
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	bd90      	pop	{r4, r7, pc}
 800199a:	bf00      	nop
 800199c:	200022d4 	.word	0x200022d4

080019a0 <W25Qxxx_Write_Enable>:
	instruction is entered by driving /CS low, shifting the instruction code “06h” into the Data Input (DI) pin on
	the rising edge of CLK, and then driving /CS high.
  * @param  none
  */
static void W25Qxxx_Write_Enable(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
	W25Qxxx_Enable();
 80019a4:	f7ff ff34 	bl	8001810 <W25Qxxx_Enable>

	W25Qxxx_SPI(CMD_Write_Enable);
 80019a8:	2006      	movs	r0, #6
 80019aa:	f7ff fe97 	bl	80016dc <W25Qxxx_SPI>

	W25Qxxx_Disable();
 80019ae:	f7ff ff3b 	bl	8001828 <W25Qxxx_Disable>
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <W25Qxxx_WaitForWriteEnd>:
/** ############################################################################################
  * @brief detect SR1-bit0 BUSY bit
  *
  */
static int8_t W25Qxxx_WaitForWriteEnd(void)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b084      	sub	sp, #16
 80019ba:	af00      	add	r7, sp, #0
	W25Qxxx_Enable();
 80019bc:	f7ff ff28 	bl	8001810 <W25Qxxx_Enable>

	uint32_t sTime = HAL_GetTick();
 80019c0:	f000 fcf8 	bl	80023b4 <HAL_GetTick>
 80019c4:	60f8      	str	r0, [r7, #12]
	uint32_t useTime = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	60bb      	str	r3, [r7, #8]
	uint8_t reg_res;
	W25Qxxx_SPI(CMD_Reg_1_Read);
 80019ca:	2005      	movs	r0, #5
 80019cc:	f7ff fe86 	bl	80016dc <W25Qxxx_SPI>
	do
	{
		reg_res = W25Qxxx_SPI(CMD_DUMMY);
 80019d0:	2000      	movs	r0, #0
 80019d2:	f7ff fe83 	bl	80016dc <W25Qxxx_SPI>
 80019d6:	4603      	mov	r3, r0
 80019d8:	71fb      	strb	r3, [r7, #7]

		useTime = HAL_GetTick() - sTime;
 80019da:	f000 fceb 	bl	80023b4 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	60bb      	str	r3, [r7, #8]
	} while (((reg_res & SR1_S0_BUSY) == SR1_S0_BUSY) && (useTime < SPI_FLASH_TIMEOUT));
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d004      	beq.n	80019fa <W25Qxxx_WaitForWriteEnd+0x44>
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	f247 522f 	movw	r2, #29999	; 0x752f
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d9ea      	bls.n	80019d0 <W25Qxxx_WaitForWriteEnd+0x1a>

	W25Qxxx_Disable();
 80019fa:	f7ff ff15 	bl	8001828 <W25Qxxx_Disable>

	if (useTime >= SPI_FLASH_TIMEOUT)	// timeOut return 1
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	f247 522f 	movw	r2, #29999	; 0x752f
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d901      	bls.n	8001a0c <W25Qxxx_WaitForWriteEnd+0x56>
		return 1;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e000      	b.n	8001a0e <W25Qxxx_WaitForWriteEnd+0x58>
	return 0;	// passed return 0
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <W25Qxxx_SectorToPage>:
/** ############################################################################################
  * @brief  sector convert to pageAddr
  * @retval return pageAddr
  */
static uint32_t W25Qxxx_SectorToPage(uint32_t SectorAddress)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
	return (SectorAddress * W25Qxxx_SectorSize) / W25Qxxx_PageSize;
 8001a20:	4b07      	ldr	r3, [pc, #28]	; (8001a40 <W25Qxxx_SectorToPage+0x28>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	fb02 f303 	mul.w	r3, r2, r3
 8001a2a:	4a06      	ldr	r2, [pc, #24]	; (8001a44 <W25Qxxx_SectorToPage+0x2c>)
 8001a2c:	8812      	ldrh	r2, [r2, #0]
 8001a2e:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	200022f4 	.word	0x200022f4
 8001a44:	200022c8 	.word	0x200022c8

08001a48 <W25Qxxx_Read_REG_x>:
  * @brief  Read Status Register-1, 2, 3(05h, 35h, 15h)
  * @param  reg_x: [in] 1,2,3
  * @retval retrun SR_x value [Byte]
  */
uint8_t W25Qxxx_Read_REG_x(uint8_t reg_x)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	71fb      	strb	r3, [r7, #7]
	W25Qxxx_Enable();
 8001a52:	f7ff fedd 	bl	8001810 <W25Qxxx_Enable>

	uint8_t res;

	switch(reg_x)
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	2b03      	cmp	r3, #3
 8001a5a:	d018      	beq.n	8001a8e <W25Qxxx_Read_REG_x+0x46>
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	dc1f      	bgt.n	8001aa0 <W25Qxxx_Read_REG_x+0x58>
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d002      	beq.n	8001a6a <W25Qxxx_Read_REG_x+0x22>
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d009      	beq.n	8001a7c <W25Qxxx_Read_REG_x+0x34>
		case 3:	// reg 3
			W25Qxxx_SPI(CMD_Reg_3_Read);
			res = W25Qxxx_SPI(CMD_DUMMY);
			break;
		default:
			break;
 8001a68:	e01a      	b.n	8001aa0 <W25Qxxx_Read_REG_x+0x58>
			W25Qxxx_SPI(CMD_Reg_1_Read);
 8001a6a:	2005      	movs	r0, #5
 8001a6c:	f7ff fe36 	bl	80016dc <W25Qxxx_SPI>
			res = W25Qxxx_SPI(CMD_DUMMY);
 8001a70:	2000      	movs	r0, #0
 8001a72:	f7ff fe33 	bl	80016dc <W25Qxxx_SPI>
 8001a76:	4603      	mov	r3, r0
 8001a78:	73fb      	strb	r3, [r7, #15]
			break;
 8001a7a:	e012      	b.n	8001aa2 <W25Qxxx_Read_REG_x+0x5a>
			W25Qxxx_SPI(CMD_Reg_2_Read);
 8001a7c:	2035      	movs	r0, #53	; 0x35
 8001a7e:	f7ff fe2d 	bl	80016dc <W25Qxxx_SPI>
			res = W25Qxxx_SPI(CMD_DUMMY);
 8001a82:	2000      	movs	r0, #0
 8001a84:	f7ff fe2a 	bl	80016dc <W25Qxxx_SPI>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	73fb      	strb	r3, [r7, #15]
			break;
 8001a8c:	e009      	b.n	8001aa2 <W25Qxxx_Read_REG_x+0x5a>
			W25Qxxx_SPI(CMD_Reg_3_Read);
 8001a8e:	2015      	movs	r0, #21
 8001a90:	f7ff fe24 	bl	80016dc <W25Qxxx_SPI>
			res = W25Qxxx_SPI(CMD_DUMMY);
 8001a94:	2000      	movs	r0, #0
 8001a96:	f7ff fe21 	bl	80016dc <W25Qxxx_SPI>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	73fb      	strb	r3, [r7, #15]
			break;
 8001a9e:	e000      	b.n	8001aa2 <W25Qxxx_Read_REG_x+0x5a>
			break;
 8001aa0:	bf00      	nop
	}

	W25Qxxx_Disable();
 8001aa2:	f7ff fec1 	bl	8001828 <W25Qxxx_Disable>

	return res;
 8001aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <W25Qxxx_Init>:
/** ############################################################################################
  * @brief W25Qxxx Init global static variable
  * @retval status 0:passed  1:failed
  */
uint8_t W25Qxxx_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
	while (HAL_GetTick() < 20)
 8001ab6:	e002      	b.n	8001abe <W25Qxxx_Init+0xe>
		HAL_Delay(1);
 8001ab8:	2001      	movs	r0, #1
 8001aba:	f000 fc87 	bl	80023cc <HAL_Delay>
	while (HAL_GetTick() < 20)
 8001abe:	f000 fc79 	bl	80023b4 <HAL_GetTick>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b13      	cmp	r3, #19
 8001ac6:	d9f7      	bls.n	8001ab8 <W25Qxxx_Init+0x8>
	W25Qxxx_Disable();
 8001ac8:	f7ff feae 	bl	8001828 <W25Qxxx_Disable>
	HAL_Delay(20);
 8001acc:	2014      	movs	r0, #20
 8001ace:	f000 fc7d 	bl	80023cc <HAL_Delay>

	W25Qxxx_Power_Up();
 8001ad2:	f7ff feb5 	bl	8001840 <W25Qxxx_Power_Up>
	W25Qxxx_Read_Manu_Dev_ID();
 8001ad6:	f7ff fed1 	bl	800187c <W25Qxxx_Read_Manu_Dev_ID>
	W25Qxxx_Read_JEDEC_ID();
 8001ada:	f7ff ff01 	bl	80018e0 <W25Qxxx_Read_JEDEC_ID>

	switch (W25Qxxx_JEDEC_ID & 0x000000FF)
 8001ade:	4b57      	ldr	r3, [pc, #348]	; (8001c3c <W25Qxxx_Init+0x18c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	3b11      	subs	r3, #17
 8001ae6:	2b0f      	cmp	r3, #15
 8001ae8:	d86b      	bhi.n	8001bc2 <W25Qxxx_Init+0x112>
 8001aea:	a201      	add	r2, pc, #4	; (adr r2, 8001af0 <W25Qxxx_Init+0x40>)
 8001aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af0:	08001bb5 	.word	0x08001bb5
 8001af4:	08001ba7 	.word	0x08001ba7
 8001af8:	08001b99 	.word	0x08001b99
 8001afc:	08001b8b 	.word	0x08001b8b
 8001b00:	08001b7d 	.word	0x08001b7d
 8001b04:	08001b6f 	.word	0x08001b6f
 8001b08:	08001b61 	.word	0x08001b61
 8001b0c:	08001b51 	.word	0x08001b51
 8001b10:	08001b41 	.word	0x08001b41
 8001b14:	08001bc3 	.word	0x08001bc3
 8001b18:	08001bc3 	.word	0x08001bc3
 8001b1c:	08001bc3 	.word	0x08001bc3
 8001b20:	08001bc3 	.word	0x08001bc3
 8001b24:	08001bc3 	.word	0x08001bc3
 8001b28:	08001bc3 	.word	0x08001bc3
 8001b2c:	08001b31 	.word	0x08001b31
	{
	case 0x20: // 	W25Q512
		W25Qxxx_ID = W25Q512;
 8001b30:	4b43      	ldr	r3, [pc, #268]	; (8001c40 <W25Qxxx_Init+0x190>)
 8001b32:	220a      	movs	r2, #10
 8001b34:	701a      	strb	r2, [r3, #0]
		W25Qxxx_BlockCount = 1024;
 8001b36:	4b43      	ldr	r3, [pc, #268]	; (8001c44 <W25Qxxx_Init+0x194>)
 8001b38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b3c:	601a      	str	r2, [r3, #0]
		break;
 8001b3e:	e042      	b.n	8001bc6 <W25Qxxx_Init+0x116>
	case 0x19: // 	W25Q256
		W25Qxxx_ID = W25Q256;
 8001b40:	4b3f      	ldr	r3, [pc, #252]	; (8001c40 <W25Qxxx_Init+0x190>)
 8001b42:	2209      	movs	r2, #9
 8001b44:	701a      	strb	r2, [r3, #0]
		W25Qxxx_BlockCount = 512;
 8001b46:	4b3f      	ldr	r3, [pc, #252]	; (8001c44 <W25Qxxx_Init+0x194>)
 8001b48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b4c:	601a      	str	r2, [r3, #0]
		break;
 8001b4e:	e03a      	b.n	8001bc6 <W25Qxxx_Init+0x116>
	case 0x18: // 	W25Q128
		W25Qxxx_ID = W25Q128;
 8001b50:	4b3b      	ldr	r3, [pc, #236]	; (8001c40 <W25Qxxx_Init+0x190>)
 8001b52:	2208      	movs	r2, #8
 8001b54:	701a      	strb	r2, [r3, #0]
		W25Qxxx_BlockCount = 256;
 8001b56:	4b3b      	ldr	r3, [pc, #236]	; (8001c44 <W25Qxxx_Init+0x194>)
 8001b58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b5c:	601a      	str	r2, [r3, #0]
		break;
 8001b5e:	e032      	b.n	8001bc6 <W25Qxxx_Init+0x116>
	case 0x17: //	W25Q64
		W25Qxxx_ID = W25Q64;
 8001b60:	4b37      	ldr	r3, [pc, #220]	; (8001c40 <W25Qxxx_Init+0x190>)
 8001b62:	2207      	movs	r2, #7
 8001b64:	701a      	strb	r2, [r3, #0]
		W25Qxxx_BlockCount = 128;
 8001b66:	4b37      	ldr	r3, [pc, #220]	; (8001c44 <W25Qxxx_Init+0x194>)
 8001b68:	2280      	movs	r2, #128	; 0x80
 8001b6a:	601a      	str	r2, [r3, #0]
		break;
 8001b6c:	e02b      	b.n	8001bc6 <W25Qxxx_Init+0x116>
	case 0x16: //	W25Q32
		W25Qxxx_ID = W25Q32;
 8001b6e:	4b34      	ldr	r3, [pc, #208]	; (8001c40 <W25Qxxx_Init+0x190>)
 8001b70:	2206      	movs	r2, #6
 8001b72:	701a      	strb	r2, [r3, #0]
		W25Qxxx_BlockCount = 64;
 8001b74:	4b33      	ldr	r3, [pc, #204]	; (8001c44 <W25Qxxx_Init+0x194>)
 8001b76:	2240      	movs	r2, #64	; 0x40
 8001b78:	601a      	str	r2, [r3, #0]
		break;
 8001b7a:	e024      	b.n	8001bc6 <W25Qxxx_Init+0x116>
	case 0x15: //	W25Q16
		W25Qxxx_ID = W25Q16;
 8001b7c:	4b30      	ldr	r3, [pc, #192]	; (8001c40 <W25Qxxx_Init+0x190>)
 8001b7e:	2205      	movs	r2, #5
 8001b80:	701a      	strb	r2, [r3, #0]
		W25Qxxx_BlockCount = 32;
 8001b82:	4b30      	ldr	r3, [pc, #192]	; (8001c44 <W25Qxxx_Init+0x194>)
 8001b84:	2220      	movs	r2, #32
 8001b86:	601a      	str	r2, [r3, #0]
		break;
 8001b88:	e01d      	b.n	8001bc6 <W25Qxxx_Init+0x116>
	case 0x14: //	W25Q80
		W25Qxxx_ID = W25Q80;
 8001b8a:	4b2d      	ldr	r3, [pc, #180]	; (8001c40 <W25Qxxx_Init+0x190>)
 8001b8c:	2204      	movs	r2, #4
 8001b8e:	701a      	strb	r2, [r3, #0]
		W25Qxxx_BlockCount = 16;
 8001b90:	4b2c      	ldr	r3, [pc, #176]	; (8001c44 <W25Qxxx_Init+0x194>)
 8001b92:	2210      	movs	r2, #16
 8001b94:	601a      	str	r2, [r3, #0]
		break;
 8001b96:	e016      	b.n	8001bc6 <W25Qxxx_Init+0x116>
	case 0x13: //	W25Q40
		W25Qxxx_ID = W25Q40;
 8001b98:	4b29      	ldr	r3, [pc, #164]	; (8001c40 <W25Qxxx_Init+0x190>)
 8001b9a:	2203      	movs	r2, #3
 8001b9c:	701a      	strb	r2, [r3, #0]
		W25Qxxx_BlockCount = 8;
 8001b9e:	4b29      	ldr	r3, [pc, #164]	; (8001c44 <W25Qxxx_Init+0x194>)
 8001ba0:	2208      	movs	r2, #8
 8001ba2:	601a      	str	r2, [r3, #0]
		break;
 8001ba4:	e00f      	b.n	8001bc6 <W25Qxxx_Init+0x116>
	case 0x12: //	W25Q20
		W25Qxxx_ID = W25Q20;
 8001ba6:	4b26      	ldr	r3, [pc, #152]	; (8001c40 <W25Qxxx_Init+0x190>)
 8001ba8:	2202      	movs	r2, #2
 8001baa:	701a      	strb	r2, [r3, #0]
		W25Qxxx_BlockCount = 4;
 8001bac:	4b25      	ldr	r3, [pc, #148]	; (8001c44 <W25Qxxx_Init+0x194>)
 8001bae:	2204      	movs	r2, #4
 8001bb0:	601a      	str	r2, [r3, #0]
		break;
 8001bb2:	e008      	b.n	8001bc6 <W25Qxxx_Init+0x116>
	case 0x11: //	W25Q10
		W25Qxxx_ID = W25Q10;
 8001bb4:	4b22      	ldr	r3, [pc, #136]	; (8001c40 <W25Qxxx_Init+0x190>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	701a      	strb	r2, [r3, #0]
		W25Qxxx_BlockCount = 2;
 8001bba:	4b22      	ldr	r3, [pc, #136]	; (8001c44 <W25Qxxx_Init+0x194>)
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	601a      	str	r2, [r3, #0]
		break;
 8001bc0:	e001      	b.n	8001bc6 <W25Qxxx_Init+0x116>
	default:
		return 1;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e035      	b.n	8001c32 <W25Qxxx_Init+0x182>
	}
	W25Qxxx_PageSize = 256;					// 256  Byte
 8001bc6:	4b20      	ldr	r3, [pc, #128]	; (8001c48 <W25Qxxx_Init+0x198>)
 8001bc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bcc:	801a      	strh	r2, [r3, #0]
	W25Qxxx_SectorSize = 0x1000;			// 4096 Byte
 8001bce:	4b1f      	ldr	r3, [pc, #124]	; (8001c4c <W25Qxxx_Init+0x19c>)
 8001bd0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bd4:	601a      	str	r2, [r3, #0]
	W25Qxxx_SectorCount = W25Qxxx_BlockCount * 16;
 8001bd6:	4b1b      	ldr	r3, [pc, #108]	; (8001c44 <W25Qxxx_Init+0x194>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	011b      	lsls	r3, r3, #4
 8001bdc:	4a1c      	ldr	r2, [pc, #112]	; (8001c50 <W25Qxxx_Init+0x1a0>)
 8001bde:	6013      	str	r3, [r2, #0]
	W25Qxxx_PageCount = (W25Qxxx_SectorCount * W25Qxxx_SectorSize) / W25Qxxx_PageSize;
 8001be0:	4b1b      	ldr	r3, [pc, #108]	; (8001c50 <W25Qxxx_Init+0x1a0>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a19      	ldr	r2, [pc, #100]	; (8001c4c <W25Qxxx_Init+0x19c>)
 8001be6:	6812      	ldr	r2, [r2, #0]
 8001be8:	fb02 f303 	mul.w	r3, r2, r3
 8001bec:	4a16      	ldr	r2, [pc, #88]	; (8001c48 <W25Qxxx_Init+0x198>)
 8001bee:	8812      	ldrh	r2, [r2, #0]
 8001bf0:	fbb3 f3f2 	udiv	r3, r3, r2
 8001bf4:	4a17      	ldr	r2, [pc, #92]	; (8001c54 <W25Qxxx_Init+0x1a4>)
 8001bf6:	6013      	str	r3, [r2, #0]
	W25Qxxx_BlockSize = W25Qxxx_SectorSize * 16;
 8001bf8:	4b14      	ldr	r3, [pc, #80]	; (8001c4c <W25Qxxx_Init+0x19c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	011b      	lsls	r3, r3, #4
 8001bfe:	4a16      	ldr	r2, [pc, #88]	; (8001c58 <W25Qxxx_Init+0x1a8>)
 8001c00:	6013      	str	r3, [r2, #0]
	W25Qxxx_CapacityInKiloByte = (W25Qxxx_SectorCount * W25Qxxx_SectorSize) / 1024;
 8001c02:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <W25Qxxx_Init+0x1a0>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a11      	ldr	r2, [pc, #68]	; (8001c4c <W25Qxxx_Init+0x19c>)
 8001c08:	6812      	ldr	r2, [r2, #0]
 8001c0a:	fb02 f303 	mul.w	r3, r2, r3
 8001c0e:	0a9b      	lsrs	r3, r3, #10
 8001c10:	4a12      	ldr	r2, [pc, #72]	; (8001c5c <W25Qxxx_Init+0x1ac>)
 8001c12:	6013      	str	r3, [r2, #0]
	W25Qxxx_Read_Unique_ID();
 8001c14:	f7ff fe96 	bl	8001944 <W25Qxxx_Read_Unique_ID>

	uint8_t regVal = W25Qxxx_Read_REG_x(1);
 8001c18:	2001      	movs	r0, #1
 8001c1a:	f7ff ff15 	bl	8001a48 <W25Qxxx_Read_REG_x>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	71fb      	strb	r3, [r7, #7]

	if ((regVal&SR1_S0_BUSY) == SR1_S0_BUSY)
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <W25Qxxx_Init+0x180>
		return 1;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e000      	b.n	8001c32 <W25Qxxx_Init+0x182>

	return 0;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	200022d0 	.word	0x200022d0
 8001c40:	200022e8 	.word	0x200022e8
 8001c44:	200022cc 	.word	0x200022cc
 8001c48:	200022c8 	.word	0x200022c8
 8001c4c:	200022f4 	.word	0x200022f4
 8001c50:	200022ec 	.word	0x200022ec
 8001c54:	200022f8 	.word	0x200022f8
 8001c58:	200022e0 	.word	0x200022e0
 8001c5c:	200022e4 	.word	0x200022e4

08001c60 <W25Qxxx_EraseSector>:
  * @brief  Sector erase 4KB
  * @param  SectorAddr: [in] 0 ~ W25Qxxx_SectorCount-1
  * @retval status 0:passed  1:failed
  */
uint8_t W25Qxxx_EraseSector(uint32_t SectorAddr)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
	if (W25Qxxx_ID == 0)
 8001c68:	4b1e      	ldr	r3, [pc, #120]	; (8001ce4 <W25Qxxx_EraseSector+0x84>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <W25Qxxx_EraseSector+0x14>
		return 1;		// w25qxx Unknown
 8001c70:	2301      	movs	r3, #1
 8001c72:	e032      	b.n	8001cda <W25Qxxx_EraseSector+0x7a>

	W25Qxxx_WaitForWriteEnd();
 8001c74:	f7ff fe9f 	bl	80019b6 <W25Qxxx_WaitForWriteEnd>

	SectorAddr = SectorAddr * W25Qxxx_SectorSize;
 8001c78:	4b1b      	ldr	r3, [pc, #108]	; (8001ce8 <W25Qxxx_EraseSector+0x88>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	fb02 f303 	mul.w	r3, r2, r3
 8001c82:	607b      	str	r3, [r7, #4]
	W25Qxxx_Write_Enable();
 8001c84:	f7ff fe8c 	bl	80019a0 <W25Qxxx_Write_Enable>

	W25Qxxx_Enable();
 8001c88:	f7ff fdc2 	bl	8001810 <W25Qxxx_Enable>
	if (W25Qxxx_ID >= W25Q256)
 8001c8c:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <W25Qxxx_EraseSector+0x84>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b08      	cmp	r3, #8
 8001c92:	d909      	bls.n	8001ca8 <W25Qxxx_EraseSector+0x48>
	{
		W25Qxxx_SPI(CMD_Erase_Sector_4_Byte_Addr);
 8001c94:	2021      	movs	r0, #33	; 0x21
 8001c96:	f7ff fd21 	bl	80016dc <W25Qxxx_SPI>
		W25Qxxx_SPI((SectorAddr & 0xFF000000) >> 24);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	0e1b      	lsrs	r3, r3, #24
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff fd1b 	bl	80016dc <W25Qxxx_SPI>
 8001ca6:	e002      	b.n	8001cae <W25Qxxx_EraseSector+0x4e>
	}
	else
	{
		W25Qxxx_SPI(CMD_Erase_Sector);
 8001ca8:	2020      	movs	r0, #32
 8001caa:	f7ff fd17 	bl	80016dc <W25Qxxx_SPI>
	}
	W25Qxxx_SPI((SectorAddr & 0xFF0000) >> 16);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	0c1b      	lsrs	r3, r3, #16
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff fd11 	bl	80016dc <W25Qxxx_SPI>
	W25Qxxx_SPI((SectorAddr & 0xFF00) >> 8);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	0a1b      	lsrs	r3, r3, #8
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff fd0b 	bl	80016dc <W25Qxxx_SPI>
	W25Qxxx_SPI( SectorAddr & 0xFF);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff fd06 	bl	80016dc <W25Qxxx_SPI>
	W25Qxxx_Disable();
 8001cd0:	f7ff fdaa 	bl	8001828 <W25Qxxx_Disable>

	W25Qxxx_WaitForWriteEnd();
 8001cd4:	f7ff fe6f 	bl	80019b6 <W25Qxxx_WaitForWriteEnd>

	return 0;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	200022e8 	.word	0x200022e8
 8001ce8:	200022f4 	.word	0x200022f4

08001cec <W25Qxxx_WritePage>:
  * @param Page_Address: [in] page address (0 - W25Qxxx_PageCount-1)
  * @param OffsetInByte: [in] offset address
  * @retval status 0:passed  1:failed
  */
uint8_t W25Qxxx_WritePage(const uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
 8001cf8:	603b      	str	r3, [r7, #0]
	if (W25Qxxx_ID == 0)
 8001cfa:	4b2c      	ldr	r3, [pc, #176]	; (8001dac <W25Qxxx_WritePage+0xc0>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <W25Qxxx_WritePage+0x1a>
		return 1;		// w25qxx Unknown
 8001d02:	2301      	movs	r3, #1
 8001d04:	e04e      	b.n	8001da4 <W25Qxxx_WritePage+0xb8>

	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > W25Qxxx_PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	4a28      	ldr	r2, [pc, #160]	; (8001db0 <W25Qxxx_WritePage+0xc4>)
 8001d0e:	8812      	ldrh	r2, [r2, #0]
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d802      	bhi.n	8001d1a <W25Qxxx_WritePage+0x2e>
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d105      	bne.n	8001d26 <W25Qxxx_WritePage+0x3a>
		NumByteToWrite_up_to_PageSize = W25Qxxx_PageSize - OffsetInByte;
 8001d1a:	4b25      	ldr	r3, [pc, #148]	; (8001db0 <W25Qxxx_WritePage+0xc4>)
 8001d1c:	881b      	ldrh	r3, [r3, #0]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	603b      	str	r3, [r7, #0]

	W25Qxxx_WaitForWriteEnd();
 8001d26:	f7ff fe46 	bl	80019b6 <W25Qxxx_WaitForWriteEnd>

	W25Qxxx_Write_Enable();
 8001d2a:	f7ff fe39 	bl	80019a0 <W25Qxxx_Write_Enable>

	W25Qxxx_Enable();
 8001d2e:	f7ff fd6f 	bl	8001810 <W25Qxxx_Enable>

	Page_Address = (Page_Address * W25Qxxx_PageSize) + OffsetInByte;
 8001d32:	4b1f      	ldr	r3, [pc, #124]	; (8001db0 <W25Qxxx_WritePage+0xc4>)
 8001d34:	881b      	ldrh	r3, [r3, #0]
 8001d36:	461a      	mov	r2, r3
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	fb03 f302 	mul.w	r3, r3, r2
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	4413      	add	r3, r2
 8001d42:	60bb      	str	r3, [r7, #8]
	if (W25Qxxx_ID >= W25Q256)
 8001d44:	4b19      	ldr	r3, [pc, #100]	; (8001dac <W25Qxxx_WritePage+0xc0>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b08      	cmp	r3, #8
 8001d4a:	d909      	bls.n	8001d60 <W25Qxxx_WritePage+0x74>
	{
		W25Qxxx_SPI(CMD_Page_Program_4_Byte_Addr);
 8001d4c:	2012      	movs	r0, #18
 8001d4e:	f7ff fcc5 	bl	80016dc <W25Qxxx_SPI>
		W25Qxxx_SPI((Page_Address & 0xFF000000) >> 24);
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	0e1b      	lsrs	r3, r3, #24
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff fcbf 	bl	80016dc <W25Qxxx_SPI>
 8001d5e:	e002      	b.n	8001d66 <W25Qxxx_WritePage+0x7a>
	}
	else
	{
		W25Qxxx_SPI(CMD_Page_Program);
 8001d60:	2002      	movs	r0, #2
 8001d62:	f7ff fcbb 	bl	80016dc <W25Qxxx_SPI>
	}
	W25Qxxx_SPI((Page_Address & 0xFF0000) >> 16);
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	0c1b      	lsrs	r3, r3, #16
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff fcb5 	bl	80016dc <W25Qxxx_SPI>
	W25Qxxx_SPI((Page_Address & 0xFF00) >> 8);
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	0a1b      	lsrs	r3, r3, #8
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fcaf 	bl	80016dc <W25Qxxx_SPI>
	W25Qxxx_SPI(Page_Address & 0xFF);
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff fcaa 	bl	80016dc <W25Qxxx_SPI>
//	HAL_SPI_Transmit(&hspi_flash, (uint8_t *)pBuffer, NumByteToWrite_up_to_PageSize, SPI_FLASH_TIMEOUT);
	W25Qxxx_SPI_Tx((uint8_t *)pBuffer, NumByteToWrite_up_to_PageSize);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	f7ff fcd4 	bl	800173c <W25Qxxx_SPI_Tx>

	W25Qxxx_Disable();
 8001d94:	f7ff fd48 	bl	8001828 <W25Qxxx_Disable>

	W25Qxxx_WaitForWriteEnd();
 8001d98:	f7ff fe0d 	bl	80019b6 <W25Qxxx_WaitForWriteEnd>

	HAL_Delay(1);
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	f000 fb15 	bl	80023cc <HAL_Delay>

	return 0;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	200022e8 	.word	0x200022e8
 8001db0:	200022c8 	.word	0x200022c8

08001db4 <W25Qxxx_WriteSector>:
  * @param OffsetInByte: [in] offset byte number
  * @param NumByteToWrite_up_to_SectorSize: [in] Byte data number
  * @retval status 0:passed  1:failed
  */
uint8_t W25Qxxx_WriteSector(const uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b088      	sub	sp, #32
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
 8001dc0:	603b      	str	r3, [r7, #0]
	if (W25Qxxx_ID == 0)
 8001dc2:	4b33      	ldr	r3, [pc, #204]	; (8001e90 <W25Qxxx_WriteSector+0xdc>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <W25Qxxx_WriteSector+0x1a>
		return 1;		// w25qxx Unknown
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e05c      	b.n	8001e88 <W25Qxxx_WriteSector+0xd4>

	if ((NumByteToWrite_up_to_SectorSize > W25Qxxx_SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8001dce:	4b31      	ldr	r3, [pc, #196]	; (8001e94 <W25Qxxx_WriteSector+0xe0>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d802      	bhi.n	8001dde <W25Qxxx_WriteSector+0x2a>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d102      	bne.n	8001de4 <W25Qxxx_WriteSector+0x30>
		NumByteToWrite_up_to_SectorSize = W25Qxxx_SectorSize;
 8001dde:	4b2d      	ldr	r3, [pc, #180]	; (8001e94 <W25Qxxx_WriteSector+0xe0>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	603b      	str	r3, [r7, #0]

	if (OffsetInByte >= W25Qxxx_SectorSize)
 8001de4:	4b2b      	ldr	r3, [pc, #172]	; (8001e94 <W25Qxxx_WriteSector+0xe0>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d301      	bcc.n	8001df2 <W25Qxxx_WriteSector+0x3e>
	{
		return 1;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e04a      	b.n	8001e88 <W25Qxxx_WriteSector+0xd4>
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > W25Qxxx_SectorSize)
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	441a      	add	r2, r3
 8001df8:	4b26      	ldr	r3, [pc, #152]	; (8001e94 <W25Qxxx_WriteSector+0xe0>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d905      	bls.n	8001e0c <W25Qxxx_WriteSector+0x58>
		BytesToWrite = W25Qxxx_SectorSize - OffsetInByte;
 8001e00:	4b24      	ldr	r3, [pc, #144]	; (8001e94 <W25Qxxx_WriteSector+0xe0>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	61bb      	str	r3, [r7, #24]
 8001e0a:	e001      	b.n	8001e10 <W25Qxxx_WriteSector+0x5c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	61bb      	str	r3, [r7, #24]

	StartPage = W25Qxxx_SectorToPage(Sector_Address) + (OffsetInByte / W25Qxxx_PageSize);
 8001e10:	68b8      	ldr	r0, [r7, #8]
 8001e12:	f7ff fe01 	bl	8001a18 <W25Qxxx_SectorToPage>
 8001e16:	4602      	mov	r2, r0
 8001e18:	4b1f      	ldr	r3, [pc, #124]	; (8001e98 <W25Qxxx_WriteSector+0xe4>)
 8001e1a:	881b      	ldrh	r3, [r3, #0]
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e24:	4413      	add	r3, r2
 8001e26:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % W25Qxxx_PageSize;
 8001e28:	4b1b      	ldr	r3, [pc, #108]	; (8001e98 <W25Qxxx_WriteSector+0xe4>)
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	fbb3 f1f2 	udiv	r1, r3, r2
 8001e34:	fb02 f201 	mul.w	r2, r2, r1
 8001e38:	1a9b      	subs	r3, r3, r2
 8001e3a:	617b      	str	r3, [r7, #20]
	do
	{
		uint8_t res = W25Qxxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	69f9      	ldr	r1, [r7, #28]
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f7ff ff52 	bl	8001cec <W25Qxxx_WritePage>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	74fb      	strb	r3, [r7, #19]
		if (res != 0)
 8001e4c:	7cfb      	ldrb	r3, [r7, #19]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <W25Qxxx_WriteSector+0xa2>
			return 1;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e018      	b.n	8001e88 <W25Qxxx_WriteSector+0xd4>
		StartPage++;
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= W25Qxxx_PageSize - LocalOffset;
 8001e5c:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <W25Qxxx_WriteSector+0xe4>)
 8001e5e:	881b      	ldrh	r3, [r3, #0]
 8001e60:	461a      	mov	r2, r3
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	1a9a      	subs	r2, r3, r2
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	4413      	add	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
		pBuffer += W25Qxxx_PageSize - LocalOffset;
 8001e6c:	4b0a      	ldr	r3, [pc, #40]	; (8001e98 <W25Qxxx_WriteSector+0xe4>)
 8001e6e:	881b      	ldrh	r3, [r3, #0]
 8001e70:	461a      	mov	r2, r3
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	4413      	add	r3, r2
 8001e7a:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	dcda      	bgt.n	8001e3c <W25Qxxx_WriteSector+0x88>

	return 0;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3720      	adds	r7, #32
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	200022e8 	.word	0x200022e8
 8001e94:	200022f4 	.word	0x200022f4
 8001e98:	200022c8 	.word	0x200022c8

08001e9c <W25Qxxx_ReadPage>:
  * @param OffsetInByte: [in] offset byte number   [0 --- offset ------ 255]
  * @param NumByteToRead_up_to_PageSize: [in] read byte number  max 256Bytes
  * @retval status 0:passed   1:failed
  */
uint8_t W25Qxxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
 8001ea8:	603b      	str	r3, [r7, #0]
	if (W25Qxxx_ID == 0)
 8001eaa:	4b2e      	ldr	r3, [pc, #184]	; (8001f64 <W25Qxxx_ReadPage+0xc8>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <W25Qxxx_ReadPage+0x1a>
		return 1;		// w25qxx Unknown
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e051      	b.n	8001f5a <W25Qxxx_ReadPage+0xbe>

	if ((NumByteToRead_up_to_PageSize > W25Qxxx_PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8001eb6:	4b2c      	ldr	r3, [pc, #176]	; (8001f68 <W25Qxxx_ReadPage+0xcc>)
 8001eb8:	881b      	ldrh	r3, [r3, #0]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d802      	bhi.n	8001ec8 <W25Qxxx_ReadPage+0x2c>
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d102      	bne.n	8001ece <W25Qxxx_ReadPage+0x32>
		NumByteToRead_up_to_PageSize = W25Qxxx_PageSize;
 8001ec8:	4b27      	ldr	r3, [pc, #156]	; (8001f68 <W25Qxxx_ReadPage+0xcc>)
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > W25Qxxx_PageSize)
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	4a24      	ldr	r2, [pc, #144]	; (8001f68 <W25Qxxx_ReadPage+0xcc>)
 8001ed6:	8812      	ldrh	r2, [r2, #0]
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d905      	bls.n	8001ee8 <W25Qxxx_ReadPage+0x4c>
		NumByteToRead_up_to_PageSize = W25Qxxx_PageSize - OffsetInByte;
 8001edc:	4b22      	ldr	r3, [pc, #136]	; (8001f68 <W25Qxxx_ReadPage+0xcc>)
 8001ede:	881b      	ldrh	r3, [r3, #0]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	603b      	str	r3, [r7, #0]

	Page_Address = Page_Address * W25Qxxx_PageSize + OffsetInByte;
 8001ee8:	4b1f      	ldr	r3, [pc, #124]	; (8001f68 <W25Qxxx_ReadPage+0xcc>)
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	461a      	mov	r2, r3
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	fb03 f302 	mul.w	r3, r3, r2
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	60bb      	str	r3, [r7, #8]

	W25Qxxx_Enable();
 8001efa:	f7ff fc89 	bl	8001810 <W25Qxxx_Enable>
	if (W25Qxxx_ID >= W25Q256)
 8001efe:	4b19      	ldr	r3, [pc, #100]	; (8001f64 <W25Qxxx_ReadPage+0xc8>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d909      	bls.n	8001f1a <W25Qxxx_ReadPage+0x7e>
	{
		W25Qxxx_SPI(CMD_Fast_Read_4_Byte_Addr);
 8001f06:	200c      	movs	r0, #12
 8001f08:	f7ff fbe8 	bl	80016dc <W25Qxxx_SPI>
		W25Qxxx_SPI((Page_Address & 0xFF000000) >> 24);
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	0e1b      	lsrs	r3, r3, #24
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff fbe2 	bl	80016dc <W25Qxxx_SPI>
 8001f18:	e002      	b.n	8001f20 <W25Qxxx_ReadPage+0x84>
	}
	else
	{
		W25Qxxx_SPI(CMD_Fast_Read);
 8001f1a:	200b      	movs	r0, #11
 8001f1c:	f7ff fbde 	bl	80016dc <W25Qxxx_SPI>
	}
	W25Qxxx_SPI((Page_Address & 0xFF0000) >> 16);
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	0c1b      	lsrs	r3, r3, #16
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff fbd8 	bl	80016dc <W25Qxxx_SPI>
	W25Qxxx_SPI((Page_Address & 0xFF00) >> 8);
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	0a1b      	lsrs	r3, r3, #8
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff fbd2 	bl	80016dc <W25Qxxx_SPI>
	W25Qxxx_SPI(Page_Address & 0xFF);
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff fbcd 	bl	80016dc <W25Qxxx_SPI>
	W25Qxxx_SPI(CMD_DUMMY);
 8001f42:	2000      	movs	r0, #0
 8001f44:	f7ff fbca 	bl	80016dc <W25Qxxx_SPI>
//	HAL_SPI_Receive(&hspi_flash, pBuffer, NumByteToRead_up_to_PageSize, SPI_FLASH_TIMEOUT);
	W25Qxxx_SPI_Rx(pBuffer, NumByteToRead_up_to_PageSize);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f7ff fc22 	bl	8001798 <W25Qxxx_SPI_Rx>

	W25Qxxx_Disable();
 8001f54:	f7ff fc68 	bl	8001828 <W25Qxxx_Disable>

	return 0;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	200022e8 	.word	0x200022e8
 8001f68:	200022c8 	.word	0x200022c8

08001f6c <W25Qxxx_ReadSector>:
  * @param OffsetInByte: [in] offset byte number
  * @param NumByteToRead_up_to_SectorSize: [in] read byte number  max 4096Bytes
  * @retval status 0:passed   1:failed
  */
uint8_t W25Qxxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b088      	sub	sp, #32
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
 8001f78:	603b      	str	r3, [r7, #0]
	if (W25Qxxx_ID == 0)
 8001f7a:	4b30      	ldr	r3, [pc, #192]	; (800203c <W25Qxxx_ReadSector+0xd0>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <W25Qxxx_ReadSector+0x1a>
		return 1;		// w25qxx Unknown
 8001f82:	2301      	movs	r3, #1
 8001f84:	e055      	b.n	8002032 <W25Qxxx_ReadSector+0xc6>

	if ((NumByteToRead_up_to_SectorSize > W25Qxxx_SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8001f86:	4b2e      	ldr	r3, [pc, #184]	; (8002040 <W25Qxxx_ReadSector+0xd4>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d802      	bhi.n	8001f96 <W25Qxxx_ReadSector+0x2a>
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d102      	bne.n	8001f9c <W25Qxxx_ReadSector+0x30>
		NumByteToRead_up_to_SectorSize = W25Qxxx_SectorSize;
 8001f96:	4b2a      	ldr	r3, [pc, #168]	; (8002040 <W25Qxxx_ReadSector+0xd4>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	603b      	str	r3, [r7, #0]
	if (OffsetInByte >= W25Qxxx_SectorSize)
 8001f9c:	4b28      	ldr	r3, [pc, #160]	; (8002040 <W25Qxxx_ReadSector+0xd4>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d301      	bcc.n	8001faa <W25Qxxx_ReadSector+0x3e>
	{
		return 1;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e043      	b.n	8002032 <W25Qxxx_ReadSector+0xc6>
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > W25Qxxx_SectorSize)
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	441a      	add	r2, r3
 8001fb0:	4b23      	ldr	r3, [pc, #140]	; (8002040 <W25Qxxx_ReadSector+0xd4>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d905      	bls.n	8001fc4 <W25Qxxx_ReadSector+0x58>
		BytesToRead = W25Qxxx_SectorSize - OffsetInByte;
 8001fb8:	4b21      	ldr	r3, [pc, #132]	; (8002040 <W25Qxxx_ReadSector+0xd4>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	61bb      	str	r3, [r7, #24]
 8001fc2:	e001      	b.n	8001fc8 <W25Qxxx_ReadSector+0x5c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	61bb      	str	r3, [r7, #24]
	StartPage = W25Qxxx_SectorToPage(Sector_Address) + (OffsetInByte / W25Qxxx_PageSize);
 8001fc8:	68b8      	ldr	r0, [r7, #8]
 8001fca:	f7ff fd25 	bl	8001a18 <W25Qxxx_SectorToPage>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	4b1c      	ldr	r3, [pc, #112]	; (8002044 <W25Qxxx_ReadSector+0xd8>)
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fdc:	4413      	add	r3, r2
 8001fde:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % W25Qxxx_PageSize;
 8001fe0:	4b18      	ldr	r3, [pc, #96]	; (8002044 <W25Qxxx_ReadSector+0xd8>)
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	fbb3 f1f2 	udiv	r1, r3, r2
 8001fec:	fb02 f201 	mul.w	r2, r2, r1
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	617b      	str	r3, [r7, #20]
	do
	{
		W25Qxxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	69f9      	ldr	r1, [r7, #28]
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f7ff ff4e 	bl	8001e9c <W25Qxxx_ReadPage>
		StartPage++;
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	3301      	adds	r3, #1
 8002004:	61fb      	str	r3, [r7, #28]
		BytesToRead -= W25Qxxx_PageSize - LocalOffset;
 8002006:	4b0f      	ldr	r3, [pc, #60]	; (8002044 <W25Qxxx_ReadSector+0xd8>)
 8002008:	881b      	ldrh	r3, [r3, #0]
 800200a:	461a      	mov	r2, r3
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	1a9a      	subs	r2, r3, r2
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	4413      	add	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
		pBuffer += W25Qxxx_PageSize - LocalOffset;
 8002016:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <W25Qxxx_ReadSector+0xd8>)
 8002018:	881b      	ldrh	r3, [r3, #0]
 800201a:	461a      	mov	r2, r3
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	4413      	add	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	2b00      	cmp	r3, #0
 800202e:	dce1      	bgt.n	8001ff4 <W25Qxxx_ReadSector+0x88>

	return 0;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3720      	adds	r7, #32
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	200022e8 	.word	0x200022e8
 8002040:	200022f4 	.word	0x200022f4
 8002044:	200022c8 	.word	0x200022c8

08002048 <W25Qxxx_diskio_initialize>:
/** ------------------------------------------------------------------------ /
  * @brief  Initializes a Drive [spi flash W25Qxxx]
  * @retval DSTATUS: Operation status
  */
DSTATUS W25Qxxx_diskio_initialize (void)               /*!< Initialize Disk Drive                     */
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
	Stat = STA_NOINIT;
 800204c:	4b0a      	ldr	r3, [pc, #40]	; (8002078 <W25Qxxx_diskio_initialize+0x30>)
 800204e:	2201      	movs	r2, #1
 8002050:	701a      	strb	r2, [r3, #0]
	if (W25Qxxx_Init() == FLASH_OK)
 8002052:	f7ff fd2d 	bl	8001ab0 <W25Qxxx_Init>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d107      	bne.n	800206c <W25Qxxx_diskio_initialize+0x24>
	{
		Stat &= ~STA_NOINIT;
 800205c:	4b06      	ldr	r3, [pc, #24]	; (8002078 <W25Qxxx_diskio_initialize+0x30>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	b2db      	uxtb	r3, r3
 8002062:	f023 0301 	bic.w	r3, r3, #1
 8002066:	b2da      	uxtb	r2, r3
 8002068:	4b03      	ldr	r3, [pc, #12]	; (8002078 <W25Qxxx_diskio_initialize+0x30>)
 800206a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800206c:	4b02      	ldr	r3, [pc, #8]	; (8002078 <W25Qxxx_diskio_initialize+0x30>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	b2db      	uxtb	r3, r3
}
 8002072:	4618      	mov	r0, r3
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20000004 	.word	0x20000004

0800207c <W25Qxxx_diskio_status>:
/** ------------------------------------------------------------------------ /
  * @brief  Gets Disk Status
  * @retval DSTATUS: Operation status
  */
DSTATUS W25Qxxx_diskio_status (void)                     /*!< Get Disk Status */
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
	Stat = STA_NOINIT;
 8002080:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <W25Qxxx_diskio_status+0x34>)
 8002082:	2201      	movs	r2, #1
 8002084:	701a      	strb	r2, [r3, #0]

	if ((W25Qxxx_Read_REG_x(1)&SR1_S0_BUSY) != SR1_S0_BUSY)
 8002086:	2001      	movs	r0, #1
 8002088:	f7ff fcde 	bl	8001a48 <W25Qxxx_Read_REG_x>
 800208c:	4603      	mov	r3, r0
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b01      	cmp	r3, #1
 8002094:	d007      	beq.n	80020a6 <W25Qxxx_diskio_status+0x2a>
	{
		Stat &= ~STA_NOINIT;
 8002096:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <W25Qxxx_diskio_status+0x34>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	b2db      	uxtb	r3, r3
 800209c:	f023 0301 	bic.w	r3, r3, #1
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	4b03      	ldr	r3, [pc, #12]	; (80020b0 <W25Qxxx_diskio_status+0x34>)
 80020a4:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80020a6:	4b02      	ldr	r3, [pc, #8]	; (80020b0 <W25Qxxx_diskio_status+0x34>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	b2db      	uxtb	r3, r3
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	20000004 	.word	0x20000004

080020b4 <W25Qxxx_diskio_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..8192)
  * @retval DRESULT: Operation result
  */
DRESULT W25Qxxx_diskio_read (BYTE *buff, DWORD sector, UINT count)	     /*!< Read Sector(s) */
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
	DRESULT res = RES_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	75fb      	strb	r3, [r7, #23]

	/*
	 * ensure the SPI Flash is ready for a new operation
	 */

	if (W25Qxxx_WaitForWriteEnd() != 0)
 80020c4:	f7ff fc77 	bl	80019b6 <W25Qxxx_WaitForWriteEnd>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <W25Qxxx_diskio_read+0x1e>
		return res;
 80020ce:	7dfb      	ldrb	r3, [r7, #23]
 80020d0:	e011      	b.n	80020f6 <W25Qxxx_diskio_read+0x42>

	UINT sectorCount = count * W25Qxxx_SectorSize;
 80020d2:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <W25Qxxx_diskio_read+0x4c>)
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	fb02 f303 	mul.w	r3, r2, r3
 80020dc:	613b      	str	r3, [r7, #16]
	if (W25Qxxx_ReadSector(buff, sector, 0, sectorCount) == 0)
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	2200      	movs	r2, #0
 80020e2:	68b9      	ldr	r1, [r7, #8]
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f7ff ff41 	bl	8001f6c <W25Qxxx_ReadSector>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <W25Qxxx_diskio_read+0x40>
	{
		res = RES_OK;
 80020f0:	2300      	movs	r3, #0
 80020f2:	75fb      	strb	r3, [r7, #23]
	}

	return res;
 80020f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	200022f4 	.word	0x200022f4

08002104 <W25Qxxx_diskio_write>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT W25Qxxx_diskio_write (const BYTE *buff, DWORD sector, UINT count) /*!< Write Sector(s) when _USE_WRITE = 0 */
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
	DRESULT res = RES_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	75fb      	strb	r3, [r7, #23]

	/*
	 * ensure the SPI Flash is ready for a new operation
	 */

	if (W25Qxxx_WaitForWriteEnd() != 0)
 8002114:	f7ff fc4f 	bl	80019b6 <W25Qxxx_WaitForWriteEnd>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <W25Qxxx_diskio_write+0x1e>
		return res;
 800211e:	7dfb      	ldrb	r3, [r7, #23]
 8002120:	e027      	b.n	8002172 <W25Qxxx_diskio_write+0x6e>

	if (W25Qxxx_EraseSector(sector) != 0)
 8002122:	68b8      	ldr	r0, [r7, #8]
 8002124:	f7ff fd9c 	bl	8001c60 <W25Qxxx_EraseSector>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <W25Qxxx_diskio_write+0x2e>
		return res;
 800212e:	7dfb      	ldrb	r3, [r7, #23]
 8002130:	e01f      	b.n	8002172 <W25Qxxx_diskio_write+0x6e>

	if (W25Qxxx_WaitForWriteEnd() != 0)
 8002132:	f7ff fc40 	bl	80019b6 <W25Qxxx_WaitForWriteEnd>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <W25Qxxx_diskio_write+0x3c>
		return res;
 800213c:	7dfb      	ldrb	r3, [r7, #23]
 800213e:	e018      	b.n	8002172 <W25Qxxx_diskio_write+0x6e>

	UINT sectorCount = count * W25Qxxx_SectorSize;
 8002140:	4b0e      	ldr	r3, [pc, #56]	; (800217c <W25Qxxx_diskio_write+0x78>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	fb02 f303 	mul.w	r3, r2, r3
 800214a:	613b      	str	r3, [r7, #16]
	if (W25Qxxx_WriteSector(buff, sector, 0, sectorCount) == 0)
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	2200      	movs	r2, #0
 8002150:	68b9      	ldr	r1, [r7, #8]
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	f7ff fe2e 	bl	8001db4 <W25Qxxx_WriteSector>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <W25Qxxx_diskio_write+0x5e>
	{
		res = RES_OK;
 800215e:	2300      	movs	r3, #0
 8002160:	75fb      	strb	r3, [r7, #23]
	}

	if (W25Qxxx_WaitForWriteEnd() != 0)
 8002162:	f7ff fc28 	bl	80019b6 <W25Qxxx_WaitForWriteEnd>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <W25Qxxx_diskio_write+0x6c>
			return res;
 800216c:	7dfb      	ldrb	r3, [r7, #23]
 800216e:	e000      	b.n	8002172 <W25Qxxx_diskio_write+0x6e>

	return res;
 8002170:	7dfb      	ldrb	r3, [r7, #23]
}
 8002172:	4618      	mov	r0, r3
 8002174:	3718      	adds	r7, #24
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	200022f4 	.word	0x200022f4

08002180 <W25Qxxx_diskio_ioctl>:
  * @param  cmd: Control code
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
DRESULT W25Qxxx_diskio_ioctl(BYTE cmd, void *buff)             /*!< I/O control operation when _USE_IOCTL = 1 */
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	6039      	str	r1, [r7, #0]
 800218a:	71fb      	strb	r3, [r7, #7]
	  DRESULT res = RES_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	73fb      	strb	r3, [r7, #15]

	  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002190:	4b1c      	ldr	r3, [pc, #112]	; (8002204 <W25Qxxx_diskio_ioctl+0x84>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	b2db      	uxtb	r3, r3
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <W25Qxxx_diskio_ioctl+0x22>
 800219e:	2303      	movs	r3, #3
 80021a0:	e029      	b.n	80021f6 <W25Qxxx_diskio_ioctl+0x76>

	  switch (cmd)
 80021a2:	79fb      	ldrb	r3, [r7, #7]
 80021a4:	2b03      	cmp	r3, #3
 80021a6:	d823      	bhi.n	80021f0 <W25Qxxx_diskio_ioctl+0x70>
 80021a8:	a201      	add	r2, pc, #4	; (adr r2, 80021b0 <W25Qxxx_diskio_ioctl+0x30>)
 80021aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ae:	bf00      	nop
 80021b0:	080021c1 	.word	0x080021c1
 80021b4:	080021c7 	.word	0x080021c7
 80021b8:	080021d5 	.word	0x080021d5
 80021bc:	080021e5 	.word	0x080021e5
	  {
	  /* Make sure that no pending write process */
	  case CTRL_SYNC :
	    res = RES_OK;
 80021c0:	2300      	movs	r3, #0
 80021c2:	73fb      	strb	r3, [r7, #15]
	    break;
 80021c4:	e016      	b.n	80021f4 <W25Qxxx_diskio_ioctl+0x74>

	  /* Get number of sectors on the disk (DWORD) */
	  case GET_SECTOR_COUNT :
	    *(DWORD*)buff = W25Qxxx_SectorCount;
 80021c6:	4b10      	ldr	r3, [pc, #64]	; (8002208 <W25Qxxx_diskio_ioctl+0x88>)
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	601a      	str	r2, [r3, #0]
	    res = RES_OK;
 80021ce:	2300      	movs	r3, #0
 80021d0:	73fb      	strb	r3, [r7, #15]
	    break;
 80021d2:	e00f      	b.n	80021f4 <W25Qxxx_diskio_ioctl+0x74>

	  /* Get R/W sector size (WORD) */
	  case GET_SECTOR_SIZE :
	    *(WORD*)buff = W25Qxxx_SectorSize;
 80021d4:	4b0d      	ldr	r3, [pc, #52]	; (800220c <W25Qxxx_diskio_ioctl+0x8c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	b29a      	uxth	r2, r3
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	801a      	strh	r2, [r3, #0]
	    res = RES_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	73fb      	strb	r3, [r7, #15]
	    break;
 80021e2:	e007      	b.n	80021f4 <W25Qxxx_diskio_ioctl+0x74>

	  /* Get erase block size in unit of sector (DWORD) */
	  case GET_BLOCK_SIZE :
	    *(DWORD*)buff = 1;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	2201      	movs	r2, #1
 80021e8:	601a      	str	r2, [r3, #0]
	    res = RES_OK;
 80021ea:	2300      	movs	r3, #0
 80021ec:	73fb      	strb	r3, [r7, #15]
	    break;
 80021ee:	e001      	b.n	80021f4 <W25Qxxx_diskio_ioctl+0x74>

	  default:
	    res = RES_PARERR;
 80021f0:	2304      	movs	r3, #4
 80021f2:	73fb      	strb	r3, [r7, #15]
	  }

	  return res;
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	20000004 	.word	0x20000004
 8002208:	200022ec 	.word	0x200022ec
 800220c:	200022f4 	.word	0x200022f4

08002210 <HAL_SPI_TxCpltCallback>:

/**
 * @breif Tx Cplt Callback function
 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI5)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a05      	ldr	r2, [pc, #20]	; (8002234 <HAL_SPI_TxCpltCallback+0x24>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d102      	bne.n	8002228 <HAL_SPI_TxCpltCallback+0x18>
	{
		WriteStatus = 1;
 8002222:	4b05      	ldr	r3, [pc, #20]	; (8002238 <HAL_SPI_TxCpltCallback+0x28>)
 8002224:	2201      	movs	r2, #1
 8002226:	601a      	str	r2, [r3, #0]
	}
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	40015000 	.word	0x40015000
 8002238:	200000c0 	.word	0x200000c0

0800223c <HAL_SPI_RxCpltCallback>:

/**
 * @breif Rx Cplt Callback function
 */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI5)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a05      	ldr	r2, [pc, #20]	; (8002260 <HAL_SPI_RxCpltCallback+0x24>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d102      	bne.n	8002254 <HAL_SPI_RxCpltCallback+0x18>
	{
		ReadStatus = 1;
 800224e:	4b05      	ldr	r3, [pc, #20]	; (8002264 <HAL_SPI_RxCpltCallback+0x28>)
 8002250:	2201      	movs	r2, #1
 8002252:	601a      	str	r2, [r3, #0]
	}
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	40015000 	.word	0x40015000
 8002264:	200000c4 	.word	0x200000c4

08002268 <HAL_SPI_TxRxCpltCallback>:

/**
 * @breif Tx Rx Cplt Callback function
 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI5)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a05      	ldr	r2, [pc, #20]	; (800228c <HAL_SPI_TxRxCpltCallback+0x24>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d102      	bne.n	8002280 <HAL_SPI_TxRxCpltCallback+0x18>
	{
		WriteReadStatus = 1;
 800227a:	4b05      	ldr	r3, [pc, #20]	; (8002290 <HAL_SPI_TxRxCpltCallback+0x28>)
 800227c:	2201      	movs	r2, #1
 800227e:	601a      	str	r2, [r3, #0]
	}
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	40015000 	.word	0x40015000
 8002290:	200000c8 	.word	0x200000c8

08002294 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002294:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022cc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002298:	480d      	ldr	r0, [pc, #52]	; (80022d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800229a:	490e      	ldr	r1, [pc, #56]	; (80022d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800229c:	4a0e      	ldr	r2, [pc, #56]	; (80022d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800229e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022a0:	e002      	b.n	80022a8 <LoopCopyDataInit>

080022a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022a6:	3304      	adds	r3, #4

080022a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022ac:	d3f9      	bcc.n	80022a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ae:	4a0b      	ldr	r2, [pc, #44]	; (80022dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022b0:	4c0b      	ldr	r4, [pc, #44]	; (80022e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80022b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022b4:	e001      	b.n	80022ba <LoopFillZerobss>

080022b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022b8:	3204      	adds	r2, #4

080022ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022bc:	d3fb      	bcc.n	80022b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80022be:	f7ff f9fb 	bl	80016b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022c2:	f004 fc19 	bl	8006af8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022c6:	f7fe fe35 	bl	8000f34 <main>
  bx  lr    
 80022ca:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80022cc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80022d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022d4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80022d8:	080080d4 	.word	0x080080d4
  ldr r2, =_sbss
 80022dc:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80022e0:	2000437c 	.word	0x2000437c

080022e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022e4:	e7fe      	b.n	80022e4 <ADC_IRQHandler>
	...

080022e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022ec:	4b0e      	ldr	r3, [pc, #56]	; (8002328 <HAL_Init+0x40>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a0d      	ldr	r2, [pc, #52]	; (8002328 <HAL_Init+0x40>)
 80022f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022f8:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <HAL_Init+0x40>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a0a      	ldr	r2, [pc, #40]	; (8002328 <HAL_Init+0x40>)
 80022fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002302:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002304:	4b08      	ldr	r3, [pc, #32]	; (8002328 <HAL_Init+0x40>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a07      	ldr	r2, [pc, #28]	; (8002328 <HAL_Init+0x40>)
 800230a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800230e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002310:	2003      	movs	r0, #3
 8002312:	f000 f94f 	bl	80025b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002316:	200f      	movs	r0, #15
 8002318:	f000 f808 	bl	800232c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800231c:	f7fe ffd6 	bl	80012cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40023c00 	.word	0x40023c00

0800232c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002334:	4b12      	ldr	r3, [pc, #72]	; (8002380 <HAL_InitTick+0x54>)
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	4b12      	ldr	r3, [pc, #72]	; (8002384 <HAL_InitTick+0x58>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	4619      	mov	r1, r3
 800233e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002342:	fbb3 f3f1 	udiv	r3, r3, r1
 8002346:	fbb2 f3f3 	udiv	r3, r2, r3
 800234a:	4618      	mov	r0, r3
 800234c:	f000 f967 	bl	800261e <HAL_SYSTICK_Config>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e00e      	b.n	8002378 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b0f      	cmp	r3, #15
 800235e:	d80a      	bhi.n	8002376 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002360:	2200      	movs	r2, #0
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	f04f 30ff 	mov.w	r0, #4294967295
 8002368:	f000 f92f 	bl	80025ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800236c:	4a06      	ldr	r2, [pc, #24]	; (8002388 <HAL_InitTick+0x5c>)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002372:	2300      	movs	r3, #0
 8002374:	e000      	b.n	8002378 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
}
 8002378:	4618      	mov	r0, r3
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	20000000 	.word	0x20000000
 8002384:	2000000c 	.word	0x2000000c
 8002388:	20000008 	.word	0x20000008

0800238c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002390:	4b06      	ldr	r3, [pc, #24]	; (80023ac <HAL_IncTick+0x20>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	461a      	mov	r2, r3
 8002396:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <HAL_IncTick+0x24>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4413      	add	r3, r2
 800239c:	4a04      	ldr	r2, [pc, #16]	; (80023b0 <HAL_IncTick+0x24>)
 800239e:	6013      	str	r3, [r2, #0]
}
 80023a0:	bf00      	nop
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	2000000c 	.word	0x2000000c
 80023b0:	200022fc 	.word	0x200022fc

080023b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  return uwTick;
 80023b8:	4b03      	ldr	r3, [pc, #12]	; (80023c8 <HAL_GetTick+0x14>)
 80023ba:	681b      	ldr	r3, [r3, #0]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	200022fc 	.word	0x200022fc

080023cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023d4:	f7ff ffee 	bl	80023b4 <HAL_GetTick>
 80023d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e4:	d005      	beq.n	80023f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023e6:	4b0a      	ldr	r3, [pc, #40]	; (8002410 <HAL_Delay+0x44>)
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	461a      	mov	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4413      	add	r3, r2
 80023f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023f2:	bf00      	nop
 80023f4:	f7ff ffde 	bl	80023b4 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	429a      	cmp	r2, r3
 8002402:	d8f7      	bhi.n	80023f4 <HAL_Delay+0x28>
  {
  }
}
 8002404:	bf00      	nop
 8002406:	bf00      	nop
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	2000000c 	.word	0x2000000c

08002414 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002424:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <__NVIC_SetPriorityGrouping+0x44>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002430:	4013      	ands	r3, r2
 8002432:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800243c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002444:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002446:	4a04      	ldr	r2, [pc, #16]	; (8002458 <__NVIC_SetPriorityGrouping+0x44>)
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	60d3      	str	r3, [r2, #12]
}
 800244c:	bf00      	nop
 800244e:	3714      	adds	r7, #20
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	e000ed00 	.word	0xe000ed00

0800245c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002460:	4b04      	ldr	r3, [pc, #16]	; (8002474 <__NVIC_GetPriorityGrouping+0x18>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	0a1b      	lsrs	r3, r3, #8
 8002466:	f003 0307 	and.w	r3, r3, #7
}
 800246a:	4618      	mov	r0, r3
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	e000ed00 	.word	0xe000ed00

08002478 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002486:	2b00      	cmp	r3, #0
 8002488:	db0b      	blt.n	80024a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800248a:	79fb      	ldrb	r3, [r7, #7]
 800248c:	f003 021f 	and.w	r2, r3, #31
 8002490:	4907      	ldr	r1, [pc, #28]	; (80024b0 <__NVIC_EnableIRQ+0x38>)
 8002492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002496:	095b      	lsrs	r3, r3, #5
 8002498:	2001      	movs	r0, #1
 800249a:	fa00 f202 	lsl.w	r2, r0, r2
 800249e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024a2:	bf00      	nop
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	e000e100 	.word	0xe000e100

080024b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	6039      	str	r1, [r7, #0]
 80024be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	db0a      	blt.n	80024de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	b2da      	uxtb	r2, r3
 80024cc:	490c      	ldr	r1, [pc, #48]	; (8002500 <__NVIC_SetPriority+0x4c>)
 80024ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d2:	0112      	lsls	r2, r2, #4
 80024d4:	b2d2      	uxtb	r2, r2
 80024d6:	440b      	add	r3, r1
 80024d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024dc:	e00a      	b.n	80024f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	4908      	ldr	r1, [pc, #32]	; (8002504 <__NVIC_SetPriority+0x50>)
 80024e4:	79fb      	ldrb	r3, [r7, #7]
 80024e6:	f003 030f 	and.w	r3, r3, #15
 80024ea:	3b04      	subs	r3, #4
 80024ec:	0112      	lsls	r2, r2, #4
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	440b      	add	r3, r1
 80024f2:	761a      	strb	r2, [r3, #24]
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	e000e100 	.word	0xe000e100
 8002504:	e000ed00 	.word	0xe000ed00

08002508 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002508:	b480      	push	{r7}
 800250a:	b089      	sub	sp, #36	; 0x24
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	f1c3 0307 	rsb	r3, r3, #7
 8002522:	2b04      	cmp	r3, #4
 8002524:	bf28      	it	cs
 8002526:	2304      	movcs	r3, #4
 8002528:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	3304      	adds	r3, #4
 800252e:	2b06      	cmp	r3, #6
 8002530:	d902      	bls.n	8002538 <NVIC_EncodePriority+0x30>
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	3b03      	subs	r3, #3
 8002536:	e000      	b.n	800253a <NVIC_EncodePriority+0x32>
 8002538:	2300      	movs	r3, #0
 800253a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800253c:	f04f 32ff 	mov.w	r2, #4294967295
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	43da      	mvns	r2, r3
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	401a      	ands	r2, r3
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002550:	f04f 31ff 	mov.w	r1, #4294967295
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	fa01 f303 	lsl.w	r3, r1, r3
 800255a:	43d9      	mvns	r1, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002560:	4313      	orrs	r3, r2
         );
}
 8002562:	4618      	mov	r0, r3
 8002564:	3724      	adds	r7, #36	; 0x24
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
	...

08002570 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3b01      	subs	r3, #1
 800257c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002580:	d301      	bcc.n	8002586 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002582:	2301      	movs	r3, #1
 8002584:	e00f      	b.n	80025a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002586:	4a0a      	ldr	r2, [pc, #40]	; (80025b0 <SysTick_Config+0x40>)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3b01      	subs	r3, #1
 800258c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800258e:	210f      	movs	r1, #15
 8002590:	f04f 30ff 	mov.w	r0, #4294967295
 8002594:	f7ff ff8e 	bl	80024b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002598:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <SysTick_Config+0x40>)
 800259a:	2200      	movs	r2, #0
 800259c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800259e:	4b04      	ldr	r3, [pc, #16]	; (80025b0 <SysTick_Config+0x40>)
 80025a0:	2207      	movs	r2, #7
 80025a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	e000e010 	.word	0xe000e010

080025b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7ff ff29 	bl	8002414 <__NVIC_SetPriorityGrouping>
}
 80025c2:	bf00      	nop
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b086      	sub	sp, #24
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	4603      	mov	r3, r0
 80025d2:	60b9      	str	r1, [r7, #8]
 80025d4:	607a      	str	r2, [r7, #4]
 80025d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025d8:	2300      	movs	r3, #0
 80025da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025dc:	f7ff ff3e 	bl	800245c <__NVIC_GetPriorityGrouping>
 80025e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	68b9      	ldr	r1, [r7, #8]
 80025e6:	6978      	ldr	r0, [r7, #20]
 80025e8:	f7ff ff8e 	bl	8002508 <NVIC_EncodePriority>
 80025ec:	4602      	mov	r2, r0
 80025ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025f2:	4611      	mov	r1, r2
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff ff5d 	bl	80024b4 <__NVIC_SetPriority>
}
 80025fa:	bf00      	nop
 80025fc:	3718      	adds	r7, #24
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b082      	sub	sp, #8
 8002606:	af00      	add	r7, sp, #0
 8002608:	4603      	mov	r3, r0
 800260a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800260c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff ff31 	bl	8002478 <__NVIC_EnableIRQ>
}
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b082      	sub	sp, #8
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7ff ffa2 	bl	8002570 <SysTick_Config>
 800262c:	4603      	mov	r3, r0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002640:	2300      	movs	r3, #0
 8002642:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002644:	f7ff feb6 	bl	80023b4 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e099      	b.n	8002788 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2202      	movs	r2, #2
 8002658:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0201 	bic.w	r2, r2, #1
 8002672:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002674:	e00f      	b.n	8002696 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002676:	f7ff fe9d 	bl	80023b4 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b05      	cmp	r3, #5
 8002682:	d908      	bls.n	8002696 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2220      	movs	r2, #32
 8002688:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2203      	movs	r2, #3
 800268e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e078      	b.n	8002788 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1e8      	bne.n	8002676 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	4b38      	ldr	r3, [pc, #224]	; (8002790 <HAL_DMA_Init+0x158>)
 80026b0:	4013      	ands	r3, r2
 80026b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ec:	2b04      	cmp	r3, #4
 80026ee:	d107      	bne.n	8002700 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f8:	4313      	orrs	r3, r2
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f023 0307 	bic.w	r3, r3, #7
 8002716:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	4313      	orrs	r3, r2
 8002720:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	2b04      	cmp	r3, #4
 8002728:	d117      	bne.n	800275a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	4313      	orrs	r3, r2
 8002732:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00e      	beq.n	800275a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 fa91 	bl	8002c64 <DMA_CheckFifoParam>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d008      	beq.n	800275a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2240      	movs	r2, #64	; 0x40
 800274c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002756:	2301      	movs	r3, #1
 8002758:	e016      	b.n	8002788 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 fa48 	bl	8002bf8 <DMA_CalcBaseAndBitshift>
 8002768:	4603      	mov	r3, r0
 800276a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002770:	223f      	movs	r2, #63	; 0x3f
 8002772:	409a      	lsls	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3718      	adds	r7, #24
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	f010803f 	.word	0xf010803f

08002794 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
 80027a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027a2:	2300      	movs	r3, #0
 80027a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d101      	bne.n	80027ba <HAL_DMA_Start_IT+0x26>
 80027b6:	2302      	movs	r3, #2
 80027b8:	e040      	b.n	800283c <HAL_DMA_Start_IT+0xa8>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d12f      	bne.n	800282e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2202      	movs	r2, #2
 80027d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	68b9      	ldr	r1, [r7, #8]
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 f9da 	bl	8002b9c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ec:	223f      	movs	r2, #63	; 0x3f
 80027ee:	409a      	lsls	r2, r3
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f042 0216 	orr.w	r2, r2, #22
 8002802:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002808:	2b00      	cmp	r3, #0
 800280a:	d007      	beq.n	800281c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 0208 	orr.w	r2, r2, #8
 800281a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f042 0201 	orr.w	r2, r2, #1
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	e005      	b.n	800283a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002836:	2302      	movs	r3, #2
 8002838:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800283a:	7dfb      	ldrb	r3, [r7, #23]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d004      	beq.n	8002862 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2280      	movs	r2, #128	; 0x80
 800285c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e00c      	b.n	800287c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2205      	movs	r2, #5
 8002866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0201 	bic.w	r2, r2, #1
 8002878:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002890:	2300      	movs	r3, #0
 8002892:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002894:	4b92      	ldr	r3, [pc, #584]	; (8002ae0 <HAL_DMA_IRQHandler+0x258>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a92      	ldr	r2, [pc, #584]	; (8002ae4 <HAL_DMA_IRQHandler+0x25c>)
 800289a:	fba2 2303 	umull	r2, r3, r2, r3
 800289e:	0a9b      	lsrs	r3, r3, #10
 80028a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b2:	2208      	movs	r2, #8
 80028b4:	409a      	lsls	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	4013      	ands	r3, r2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d01a      	beq.n	80028f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d013      	beq.n	80028f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 0204 	bic.w	r2, r2, #4
 80028da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e0:	2208      	movs	r2, #8
 80028e2:	409a      	lsls	r2, r3
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ec:	f043 0201 	orr.w	r2, r3, #1
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f8:	2201      	movs	r2, #1
 80028fa:	409a      	lsls	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	4013      	ands	r3, r2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d012      	beq.n	800292a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00b      	beq.n	800292a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002916:	2201      	movs	r2, #1
 8002918:	409a      	lsls	r2, r3
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002922:	f043 0202 	orr.w	r2, r3, #2
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800292e:	2204      	movs	r2, #4
 8002930:	409a      	lsls	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	4013      	ands	r3, r2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d012      	beq.n	8002960 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00b      	beq.n	8002960 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294c:	2204      	movs	r2, #4
 800294e:	409a      	lsls	r2, r3
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002958:	f043 0204 	orr.w	r2, r3, #4
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002964:	2210      	movs	r2, #16
 8002966:	409a      	lsls	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4013      	ands	r3, r2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d043      	beq.n	80029f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0308 	and.w	r3, r3, #8
 800297a:	2b00      	cmp	r3, #0
 800297c:	d03c      	beq.n	80029f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002982:	2210      	movs	r2, #16
 8002984:	409a      	lsls	r2, r3
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d018      	beq.n	80029ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d108      	bne.n	80029b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d024      	beq.n	80029f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	4798      	blx	r3
 80029b6:	e01f      	b.n	80029f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d01b      	beq.n	80029f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	4798      	blx	r3
 80029c8:	e016      	b.n	80029f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d107      	bne.n	80029e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0208 	bic.w	r2, r2, #8
 80029e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d003      	beq.n	80029f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029fc:	2220      	movs	r2, #32
 80029fe:	409a      	lsls	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4013      	ands	r3, r2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 808e 	beq.w	8002b26 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0310 	and.w	r3, r3, #16
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f000 8086 	beq.w	8002b26 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1e:	2220      	movs	r2, #32
 8002a20:	409a      	lsls	r2, r3
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b05      	cmp	r3, #5
 8002a30:	d136      	bne.n	8002aa0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 0216 	bic.w	r2, r2, #22
 8002a40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	695a      	ldr	r2, [r3, #20]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d103      	bne.n	8002a62 <HAL_DMA_IRQHandler+0x1da>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d007      	beq.n	8002a72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 0208 	bic.w	r2, r2, #8
 8002a70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a76:	223f      	movs	r2, #63	; 0x3f
 8002a78:	409a      	lsls	r2, r3
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d07d      	beq.n	8002b92 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	4798      	blx	r3
        }
        return;
 8002a9e:	e078      	b.n	8002b92 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d01c      	beq.n	8002ae8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d108      	bne.n	8002ace <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d030      	beq.n	8002b26 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	4798      	blx	r3
 8002acc:	e02b      	b.n	8002b26 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d027      	beq.n	8002b26 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	4798      	blx	r3
 8002ade:	e022      	b.n	8002b26 <HAL_DMA_IRQHandler+0x29e>
 8002ae0:	20000000 	.word	0x20000000
 8002ae4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10f      	bne.n	8002b16 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 0210 	bic.w	r2, r2, #16
 8002b04:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d032      	beq.n	8002b94 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d022      	beq.n	8002b80 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2205      	movs	r2, #5
 8002b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 0201 	bic.w	r2, r2, #1
 8002b50:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	3301      	adds	r3, #1
 8002b56:	60bb      	str	r3, [r7, #8]
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d307      	bcc.n	8002b6e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1f2      	bne.n	8002b52 <HAL_DMA_IRQHandler+0x2ca>
 8002b6c:	e000      	b.n	8002b70 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002b6e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d005      	beq.n	8002b94 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	4798      	blx	r3
 8002b90:	e000      	b.n	8002b94 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002b92:	bf00      	nop
    }
  }
}
 8002b94:	3718      	adds	r7, #24
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop

08002b9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
 8002ba8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002bb8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	2b40      	cmp	r3, #64	; 0x40
 8002bc8:	d108      	bne.n	8002bdc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68ba      	ldr	r2, [r7, #8]
 8002bd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002bda:	e007      	b.n	8002bec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68ba      	ldr	r2, [r7, #8]
 8002be2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	60da      	str	r2, [r3, #12]
}
 8002bec:	bf00      	nop
 8002bee:	3714      	adds	r7, #20
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	3b10      	subs	r3, #16
 8002c08:	4a14      	ldr	r2, [pc, #80]	; (8002c5c <DMA_CalcBaseAndBitshift+0x64>)
 8002c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0e:	091b      	lsrs	r3, r3, #4
 8002c10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c12:	4a13      	ldr	r2, [pc, #76]	; (8002c60 <DMA_CalcBaseAndBitshift+0x68>)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4413      	add	r3, r2
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2b03      	cmp	r3, #3
 8002c24:	d909      	bls.n	8002c3a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c2e:	f023 0303 	bic.w	r3, r3, #3
 8002c32:	1d1a      	adds	r2, r3, #4
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	659a      	str	r2, [r3, #88]	; 0x58
 8002c38:	e007      	b.n	8002c4a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c42:	f023 0303 	bic.w	r3, r3, #3
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	aaaaaaab 	.word	0xaaaaaaab
 8002c60:	08007fa4 	.word	0x08007fa4

08002c64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d11f      	bne.n	8002cbe <DMA_CheckFifoParam+0x5a>
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	2b03      	cmp	r3, #3
 8002c82:	d856      	bhi.n	8002d32 <DMA_CheckFifoParam+0xce>
 8002c84:	a201      	add	r2, pc, #4	; (adr r2, 8002c8c <DMA_CheckFifoParam+0x28>)
 8002c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c8a:	bf00      	nop
 8002c8c:	08002c9d 	.word	0x08002c9d
 8002c90:	08002caf 	.word	0x08002caf
 8002c94:	08002c9d 	.word	0x08002c9d
 8002c98:	08002d33 	.word	0x08002d33
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d046      	beq.n	8002d36 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cac:	e043      	b.n	8002d36 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cb6:	d140      	bne.n	8002d3a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cbc:	e03d      	b.n	8002d3a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cc6:	d121      	bne.n	8002d0c <DMA_CheckFifoParam+0xa8>
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	2b03      	cmp	r3, #3
 8002ccc:	d837      	bhi.n	8002d3e <DMA_CheckFifoParam+0xda>
 8002cce:	a201      	add	r2, pc, #4	; (adr r2, 8002cd4 <DMA_CheckFifoParam+0x70>)
 8002cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd4:	08002ce5 	.word	0x08002ce5
 8002cd8:	08002ceb 	.word	0x08002ceb
 8002cdc:	08002ce5 	.word	0x08002ce5
 8002ce0:	08002cfd 	.word	0x08002cfd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ce8:	e030      	b.n	8002d4c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d025      	beq.n	8002d42 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cfa:	e022      	b.n	8002d42 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d04:	d11f      	bne.n	8002d46 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d0a:	e01c      	b.n	8002d46 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d903      	bls.n	8002d1a <DMA_CheckFifoParam+0xb6>
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	2b03      	cmp	r3, #3
 8002d16:	d003      	beq.n	8002d20 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d18:	e018      	b.n	8002d4c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	73fb      	strb	r3, [r7, #15]
      break;
 8002d1e:	e015      	b.n	8002d4c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00e      	beq.n	8002d4a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d30:	e00b      	b.n	8002d4a <DMA_CheckFifoParam+0xe6>
      break;
 8002d32:	bf00      	nop
 8002d34:	e00a      	b.n	8002d4c <DMA_CheckFifoParam+0xe8>
      break;
 8002d36:	bf00      	nop
 8002d38:	e008      	b.n	8002d4c <DMA_CheckFifoParam+0xe8>
      break;
 8002d3a:	bf00      	nop
 8002d3c:	e006      	b.n	8002d4c <DMA_CheckFifoParam+0xe8>
      break;
 8002d3e:	bf00      	nop
 8002d40:	e004      	b.n	8002d4c <DMA_CheckFifoParam+0xe8>
      break;
 8002d42:	bf00      	nop
 8002d44:	e002      	b.n	8002d4c <DMA_CheckFifoParam+0xe8>
      break;   
 8002d46:	bf00      	nop
 8002d48:	e000      	b.n	8002d4c <DMA_CheckFifoParam+0xe8>
      break;
 8002d4a:	bf00      	nop
    }
  } 
  
  return status; 
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop

08002d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b089      	sub	sp, #36	; 0x24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d72:	2300      	movs	r3, #0
 8002d74:	61fb      	str	r3, [r7, #28]
 8002d76:	e177      	b.n	8003068 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d78:	2201      	movs	r2, #1
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	f040 8166 	bne.w	8003062 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d005      	beq.n	8002dae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d130      	bne.n	8002e10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	2203      	movs	r2, #3
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	68da      	ldr	r2, [r3, #12]
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002de4:	2201      	movs	r2, #1
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	43db      	mvns	r3, r3
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4013      	ands	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	091b      	lsrs	r3, r3, #4
 8002dfa:	f003 0201 	and.w	r2, r3, #1
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f003 0303 	and.w	r3, r3, #3
 8002e18:	2b03      	cmp	r3, #3
 8002e1a:	d017      	beq.n	8002e4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	2203      	movs	r2, #3
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	4013      	ands	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f003 0303 	and.w	r3, r3, #3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d123      	bne.n	8002ea0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	08da      	lsrs	r2, r3, #3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	3208      	adds	r2, #8
 8002e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	220f      	movs	r2, #15
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	43db      	mvns	r3, r3
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	691a      	ldr	r2, [r3, #16]
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	08da      	lsrs	r2, r3, #3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	3208      	adds	r2, #8
 8002e9a:	69b9      	ldr	r1, [r7, #24]
 8002e9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	2203      	movs	r2, #3
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f003 0203 	and.w	r2, r3, #3
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 80c0 	beq.w	8003062 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60fb      	str	r3, [r7, #12]
 8002ee6:	4b66      	ldr	r3, [pc, #408]	; (8003080 <HAL_GPIO_Init+0x324>)
 8002ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eea:	4a65      	ldr	r2, [pc, #404]	; (8003080 <HAL_GPIO_Init+0x324>)
 8002eec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ef2:	4b63      	ldr	r3, [pc, #396]	; (8003080 <HAL_GPIO_Init+0x324>)
 8002ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002efa:	60fb      	str	r3, [r7, #12]
 8002efc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002efe:	4a61      	ldr	r2, [pc, #388]	; (8003084 <HAL_GPIO_Init+0x328>)
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	089b      	lsrs	r3, r3, #2
 8002f04:	3302      	adds	r3, #2
 8002f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	f003 0303 	and.w	r3, r3, #3
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	220f      	movs	r2, #15
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	43db      	mvns	r3, r3
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a58      	ldr	r2, [pc, #352]	; (8003088 <HAL_GPIO_Init+0x32c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d037      	beq.n	8002f9a <HAL_GPIO_Init+0x23e>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a57      	ldr	r2, [pc, #348]	; (800308c <HAL_GPIO_Init+0x330>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d031      	beq.n	8002f96 <HAL_GPIO_Init+0x23a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a56      	ldr	r2, [pc, #344]	; (8003090 <HAL_GPIO_Init+0x334>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d02b      	beq.n	8002f92 <HAL_GPIO_Init+0x236>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a55      	ldr	r2, [pc, #340]	; (8003094 <HAL_GPIO_Init+0x338>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d025      	beq.n	8002f8e <HAL_GPIO_Init+0x232>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a54      	ldr	r2, [pc, #336]	; (8003098 <HAL_GPIO_Init+0x33c>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d01f      	beq.n	8002f8a <HAL_GPIO_Init+0x22e>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a53      	ldr	r2, [pc, #332]	; (800309c <HAL_GPIO_Init+0x340>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d019      	beq.n	8002f86 <HAL_GPIO_Init+0x22a>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a52      	ldr	r2, [pc, #328]	; (80030a0 <HAL_GPIO_Init+0x344>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d013      	beq.n	8002f82 <HAL_GPIO_Init+0x226>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a51      	ldr	r2, [pc, #324]	; (80030a4 <HAL_GPIO_Init+0x348>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d00d      	beq.n	8002f7e <HAL_GPIO_Init+0x222>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a50      	ldr	r2, [pc, #320]	; (80030a8 <HAL_GPIO_Init+0x34c>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d007      	beq.n	8002f7a <HAL_GPIO_Init+0x21e>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a4f      	ldr	r2, [pc, #316]	; (80030ac <HAL_GPIO_Init+0x350>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d101      	bne.n	8002f76 <HAL_GPIO_Init+0x21a>
 8002f72:	2309      	movs	r3, #9
 8002f74:	e012      	b.n	8002f9c <HAL_GPIO_Init+0x240>
 8002f76:	230a      	movs	r3, #10
 8002f78:	e010      	b.n	8002f9c <HAL_GPIO_Init+0x240>
 8002f7a:	2308      	movs	r3, #8
 8002f7c:	e00e      	b.n	8002f9c <HAL_GPIO_Init+0x240>
 8002f7e:	2307      	movs	r3, #7
 8002f80:	e00c      	b.n	8002f9c <HAL_GPIO_Init+0x240>
 8002f82:	2306      	movs	r3, #6
 8002f84:	e00a      	b.n	8002f9c <HAL_GPIO_Init+0x240>
 8002f86:	2305      	movs	r3, #5
 8002f88:	e008      	b.n	8002f9c <HAL_GPIO_Init+0x240>
 8002f8a:	2304      	movs	r3, #4
 8002f8c:	e006      	b.n	8002f9c <HAL_GPIO_Init+0x240>
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e004      	b.n	8002f9c <HAL_GPIO_Init+0x240>
 8002f92:	2302      	movs	r3, #2
 8002f94:	e002      	b.n	8002f9c <HAL_GPIO_Init+0x240>
 8002f96:	2301      	movs	r3, #1
 8002f98:	e000      	b.n	8002f9c <HAL_GPIO_Init+0x240>
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	69fa      	ldr	r2, [r7, #28]
 8002f9e:	f002 0203 	and.w	r2, r2, #3
 8002fa2:	0092      	lsls	r2, r2, #2
 8002fa4:	4093      	lsls	r3, r2
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fac:	4935      	ldr	r1, [pc, #212]	; (8003084 <HAL_GPIO_Init+0x328>)
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	089b      	lsrs	r3, r3, #2
 8002fb2:	3302      	adds	r3, #2
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fba:	4b3d      	ldr	r3, [pc, #244]	; (80030b0 <HAL_GPIO_Init+0x354>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fde:	4a34      	ldr	r2, [pc, #208]	; (80030b0 <HAL_GPIO_Init+0x354>)
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002fe4:	4b32      	ldr	r3, [pc, #200]	; (80030b0 <HAL_GPIO_Init+0x354>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	43db      	mvns	r3, r3
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d003      	beq.n	8003008 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	4313      	orrs	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003008:	4a29      	ldr	r2, [pc, #164]	; (80030b0 <HAL_GPIO_Init+0x354>)
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800300e:	4b28      	ldr	r3, [pc, #160]	; (80030b0 <HAL_GPIO_Init+0x354>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	43db      	mvns	r3, r3
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	4013      	ands	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	4313      	orrs	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003032:	4a1f      	ldr	r2, [pc, #124]	; (80030b0 <HAL_GPIO_Init+0x354>)
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003038:	4b1d      	ldr	r3, [pc, #116]	; (80030b0 <HAL_GPIO_Init+0x354>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	43db      	mvns	r3, r3
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4013      	ands	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d003      	beq.n	800305c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	4313      	orrs	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800305c:	4a14      	ldr	r2, [pc, #80]	; (80030b0 <HAL_GPIO_Init+0x354>)
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	3301      	adds	r3, #1
 8003066:	61fb      	str	r3, [r7, #28]
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	2b0f      	cmp	r3, #15
 800306c:	f67f ae84 	bls.w	8002d78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003070:	bf00      	nop
 8003072:	bf00      	nop
 8003074:	3724      	adds	r7, #36	; 0x24
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	40023800 	.word	0x40023800
 8003084:	40013800 	.word	0x40013800
 8003088:	40020000 	.word	0x40020000
 800308c:	40020400 	.word	0x40020400
 8003090:	40020800 	.word	0x40020800
 8003094:	40020c00 	.word	0x40020c00
 8003098:	40021000 	.word	0x40021000
 800309c:	40021400 	.word	0x40021400
 80030a0:	40021800 	.word	0x40021800
 80030a4:	40021c00 	.word	0x40021c00
 80030a8:	40022000 	.word	0x40022000
 80030ac:	40022400 	.word	0x40022400
 80030b0:	40013c00 	.word	0x40013c00

080030b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	460b      	mov	r3, r1
 80030be:	807b      	strh	r3, [r7, #2]
 80030c0:	4613      	mov	r3, r2
 80030c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030c4:	787b      	ldrb	r3, [r7, #1]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030ca:	887a      	ldrh	r2, [r7, #2]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030d0:	e003      	b.n	80030da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030d2:	887b      	ldrh	r3, [r7, #2]
 80030d4:	041a      	lsls	r2, r3, #16
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	619a      	str	r2, [r3, #24]
}
 80030da:	bf00      	nop
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b085      	sub	sp, #20
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
 80030ee:	460b      	mov	r3, r1
 80030f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030f8:	887a      	ldrh	r2, [r7, #2]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	4013      	ands	r3, r2
 80030fe:	041a      	lsls	r2, r3, #16
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	43d9      	mvns	r1, r3
 8003104:	887b      	ldrh	r3, [r7, #2]
 8003106:	400b      	ands	r3, r1
 8003108:	431a      	orrs	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	619a      	str	r2, [r3, #24]
}
 800310e:	bf00      	nop
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
	...

0800311c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e264      	b.n	80035f8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d075      	beq.n	8003226 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800313a:	4ba3      	ldr	r3, [pc, #652]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 030c 	and.w	r3, r3, #12
 8003142:	2b04      	cmp	r3, #4
 8003144:	d00c      	beq.n	8003160 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003146:	4ba0      	ldr	r3, [pc, #640]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800314e:	2b08      	cmp	r3, #8
 8003150:	d112      	bne.n	8003178 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003152:	4b9d      	ldr	r3, [pc, #628]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800315a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800315e:	d10b      	bne.n	8003178 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003160:	4b99      	ldr	r3, [pc, #612]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d05b      	beq.n	8003224 <HAL_RCC_OscConfig+0x108>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d157      	bne.n	8003224 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e23f      	b.n	80035f8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003180:	d106      	bne.n	8003190 <HAL_RCC_OscConfig+0x74>
 8003182:	4b91      	ldr	r3, [pc, #580]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a90      	ldr	r2, [pc, #576]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 8003188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	e01d      	b.n	80031cc <HAL_RCC_OscConfig+0xb0>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003198:	d10c      	bne.n	80031b4 <HAL_RCC_OscConfig+0x98>
 800319a:	4b8b      	ldr	r3, [pc, #556]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a8a      	ldr	r2, [pc, #552]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 80031a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	4b88      	ldr	r3, [pc, #544]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a87      	ldr	r2, [pc, #540]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 80031ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	e00b      	b.n	80031cc <HAL_RCC_OscConfig+0xb0>
 80031b4:	4b84      	ldr	r3, [pc, #528]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a83      	ldr	r2, [pc, #524]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 80031ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031be:	6013      	str	r3, [r2, #0]
 80031c0:	4b81      	ldr	r3, [pc, #516]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a80      	ldr	r2, [pc, #512]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 80031c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d013      	beq.n	80031fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d4:	f7ff f8ee 	bl	80023b4 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031dc:	f7ff f8ea 	bl	80023b4 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b64      	cmp	r3, #100	; 0x64
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e204      	b.n	80035f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ee:	4b76      	ldr	r3, [pc, #472]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0f0      	beq.n	80031dc <HAL_RCC_OscConfig+0xc0>
 80031fa:	e014      	b.n	8003226 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fc:	f7ff f8da 	bl	80023b4 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003204:	f7ff f8d6 	bl	80023b4 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b64      	cmp	r3, #100	; 0x64
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e1f0      	b.n	80035f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003216:	4b6c      	ldr	r3, [pc, #432]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1f0      	bne.n	8003204 <HAL_RCC_OscConfig+0xe8>
 8003222:	e000      	b.n	8003226 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d063      	beq.n	80032fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003232:	4b65      	ldr	r3, [pc, #404]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 030c 	and.w	r3, r3, #12
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00b      	beq.n	8003256 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800323e:	4b62      	ldr	r3, [pc, #392]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003246:	2b08      	cmp	r3, #8
 8003248:	d11c      	bne.n	8003284 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800324a:	4b5f      	ldr	r3, [pc, #380]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d116      	bne.n	8003284 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003256:	4b5c      	ldr	r3, [pc, #368]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d005      	beq.n	800326e <HAL_RCC_OscConfig+0x152>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d001      	beq.n	800326e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e1c4      	b.n	80035f8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800326e:	4b56      	ldr	r3, [pc, #344]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	4952      	ldr	r1, [pc, #328]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 800327e:	4313      	orrs	r3, r2
 8003280:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003282:	e03a      	b.n	80032fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d020      	beq.n	80032ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800328c:	4b4f      	ldr	r3, [pc, #316]	; (80033cc <HAL_RCC_OscConfig+0x2b0>)
 800328e:	2201      	movs	r2, #1
 8003290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003292:	f7ff f88f 	bl	80023b4 <HAL_GetTick>
 8003296:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003298:	e008      	b.n	80032ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800329a:	f7ff f88b 	bl	80023b4 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e1a5      	b.n	80035f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ac:	4b46      	ldr	r3, [pc, #280]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0f0      	beq.n	800329a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b8:	4b43      	ldr	r3, [pc, #268]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	4940      	ldr	r1, [pc, #256]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	600b      	str	r3, [r1, #0]
 80032cc:	e015      	b.n	80032fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ce:	4b3f      	ldr	r3, [pc, #252]	; (80033cc <HAL_RCC_OscConfig+0x2b0>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d4:	f7ff f86e 	bl	80023b4 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032dc:	f7ff f86a 	bl	80023b4 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e184      	b.n	80035f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ee:	4b36      	ldr	r3, [pc, #216]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1f0      	bne.n	80032dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0308 	and.w	r3, r3, #8
 8003302:	2b00      	cmp	r3, #0
 8003304:	d030      	beq.n	8003368 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d016      	beq.n	800333c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800330e:	4b30      	ldr	r3, [pc, #192]	; (80033d0 <HAL_RCC_OscConfig+0x2b4>)
 8003310:	2201      	movs	r2, #1
 8003312:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003314:	f7ff f84e 	bl	80023b4 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800331c:	f7ff f84a 	bl	80023b4 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e164      	b.n	80035f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800332e:	4b26      	ldr	r3, [pc, #152]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 8003330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d0f0      	beq.n	800331c <HAL_RCC_OscConfig+0x200>
 800333a:	e015      	b.n	8003368 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800333c:	4b24      	ldr	r3, [pc, #144]	; (80033d0 <HAL_RCC_OscConfig+0x2b4>)
 800333e:	2200      	movs	r2, #0
 8003340:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003342:	f7ff f837 	bl	80023b4 <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800334a:	f7ff f833 	bl	80023b4 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e14d      	b.n	80035f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800335c:	4b1a      	ldr	r3, [pc, #104]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 800335e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1f0      	bne.n	800334a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b00      	cmp	r3, #0
 8003372:	f000 80a0 	beq.w	80034b6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003376:	2300      	movs	r3, #0
 8003378:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800337a:	4b13      	ldr	r3, [pc, #76]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10f      	bne.n	80033a6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003386:	2300      	movs	r3, #0
 8003388:	60bb      	str	r3, [r7, #8]
 800338a:	4b0f      	ldr	r3, [pc, #60]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	4a0e      	ldr	r2, [pc, #56]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 8003390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003394:	6413      	str	r3, [r2, #64]	; 0x40
 8003396:	4b0c      	ldr	r3, [pc, #48]	; (80033c8 <HAL_RCC_OscConfig+0x2ac>)
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339e:	60bb      	str	r3, [r7, #8]
 80033a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033a2:	2301      	movs	r3, #1
 80033a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a6:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <HAL_RCC_OscConfig+0x2b8>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d121      	bne.n	80033f6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033b2:	4b08      	ldr	r3, [pc, #32]	; (80033d4 <HAL_RCC_OscConfig+0x2b8>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a07      	ldr	r2, [pc, #28]	; (80033d4 <HAL_RCC_OscConfig+0x2b8>)
 80033b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033be:	f7fe fff9 	bl	80023b4 <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c4:	e011      	b.n	80033ea <HAL_RCC_OscConfig+0x2ce>
 80033c6:	bf00      	nop
 80033c8:	40023800 	.word	0x40023800
 80033cc:	42470000 	.word	0x42470000
 80033d0:	42470e80 	.word	0x42470e80
 80033d4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033d8:	f7fe ffec 	bl	80023b4 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e106      	b.n	80035f8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ea:	4b85      	ldr	r3, [pc, #532]	; (8003600 <HAL_RCC_OscConfig+0x4e4>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0f0      	beq.n	80033d8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d106      	bne.n	800340c <HAL_RCC_OscConfig+0x2f0>
 80033fe:	4b81      	ldr	r3, [pc, #516]	; (8003604 <HAL_RCC_OscConfig+0x4e8>)
 8003400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003402:	4a80      	ldr	r2, [pc, #512]	; (8003604 <HAL_RCC_OscConfig+0x4e8>)
 8003404:	f043 0301 	orr.w	r3, r3, #1
 8003408:	6713      	str	r3, [r2, #112]	; 0x70
 800340a:	e01c      	b.n	8003446 <HAL_RCC_OscConfig+0x32a>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	2b05      	cmp	r3, #5
 8003412:	d10c      	bne.n	800342e <HAL_RCC_OscConfig+0x312>
 8003414:	4b7b      	ldr	r3, [pc, #492]	; (8003604 <HAL_RCC_OscConfig+0x4e8>)
 8003416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003418:	4a7a      	ldr	r2, [pc, #488]	; (8003604 <HAL_RCC_OscConfig+0x4e8>)
 800341a:	f043 0304 	orr.w	r3, r3, #4
 800341e:	6713      	str	r3, [r2, #112]	; 0x70
 8003420:	4b78      	ldr	r3, [pc, #480]	; (8003604 <HAL_RCC_OscConfig+0x4e8>)
 8003422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003424:	4a77      	ldr	r2, [pc, #476]	; (8003604 <HAL_RCC_OscConfig+0x4e8>)
 8003426:	f043 0301 	orr.w	r3, r3, #1
 800342a:	6713      	str	r3, [r2, #112]	; 0x70
 800342c:	e00b      	b.n	8003446 <HAL_RCC_OscConfig+0x32a>
 800342e:	4b75      	ldr	r3, [pc, #468]	; (8003604 <HAL_RCC_OscConfig+0x4e8>)
 8003430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003432:	4a74      	ldr	r2, [pc, #464]	; (8003604 <HAL_RCC_OscConfig+0x4e8>)
 8003434:	f023 0301 	bic.w	r3, r3, #1
 8003438:	6713      	str	r3, [r2, #112]	; 0x70
 800343a:	4b72      	ldr	r3, [pc, #456]	; (8003604 <HAL_RCC_OscConfig+0x4e8>)
 800343c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343e:	4a71      	ldr	r2, [pc, #452]	; (8003604 <HAL_RCC_OscConfig+0x4e8>)
 8003440:	f023 0304 	bic.w	r3, r3, #4
 8003444:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d015      	beq.n	800347a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800344e:	f7fe ffb1 	bl	80023b4 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003454:	e00a      	b.n	800346c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003456:	f7fe ffad 	bl	80023b4 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	f241 3288 	movw	r2, #5000	; 0x1388
 8003464:	4293      	cmp	r3, r2
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e0c5      	b.n	80035f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800346c:	4b65      	ldr	r3, [pc, #404]	; (8003604 <HAL_RCC_OscConfig+0x4e8>)
 800346e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0ee      	beq.n	8003456 <HAL_RCC_OscConfig+0x33a>
 8003478:	e014      	b.n	80034a4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800347a:	f7fe ff9b 	bl	80023b4 <HAL_GetTick>
 800347e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003480:	e00a      	b.n	8003498 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003482:	f7fe ff97 	bl	80023b4 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003490:	4293      	cmp	r3, r2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e0af      	b.n	80035f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003498:	4b5a      	ldr	r3, [pc, #360]	; (8003604 <HAL_RCC_OscConfig+0x4e8>)
 800349a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1ee      	bne.n	8003482 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034a4:	7dfb      	ldrb	r3, [r7, #23]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d105      	bne.n	80034b6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034aa:	4b56      	ldr	r3, [pc, #344]	; (8003604 <HAL_RCC_OscConfig+0x4e8>)
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	4a55      	ldr	r2, [pc, #340]	; (8003604 <HAL_RCC_OscConfig+0x4e8>)
 80034b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 809b 	beq.w	80035f6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034c0:	4b50      	ldr	r3, [pc, #320]	; (8003604 <HAL_RCC_OscConfig+0x4e8>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f003 030c 	and.w	r3, r3, #12
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d05c      	beq.n	8003586 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d141      	bne.n	8003558 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d4:	4b4c      	ldr	r3, [pc, #304]	; (8003608 <HAL_RCC_OscConfig+0x4ec>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034da:	f7fe ff6b 	bl	80023b4 <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e0:	e008      	b.n	80034f4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034e2:	f7fe ff67 	bl	80023b4 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e081      	b.n	80035f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f4:	4b43      	ldr	r3, [pc, #268]	; (8003604 <HAL_RCC_OscConfig+0x4e8>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1f0      	bne.n	80034e2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	69da      	ldr	r2, [r3, #28]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	431a      	orrs	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350e:	019b      	lsls	r3, r3, #6
 8003510:	431a      	orrs	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003516:	085b      	lsrs	r3, r3, #1
 8003518:	3b01      	subs	r3, #1
 800351a:	041b      	lsls	r3, r3, #16
 800351c:	431a      	orrs	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003522:	061b      	lsls	r3, r3, #24
 8003524:	4937      	ldr	r1, [pc, #220]	; (8003604 <HAL_RCC_OscConfig+0x4e8>)
 8003526:	4313      	orrs	r3, r2
 8003528:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800352a:	4b37      	ldr	r3, [pc, #220]	; (8003608 <HAL_RCC_OscConfig+0x4ec>)
 800352c:	2201      	movs	r2, #1
 800352e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003530:	f7fe ff40 	bl	80023b4 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003538:	f7fe ff3c 	bl	80023b4 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e056      	b.n	80035f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800354a:	4b2e      	ldr	r3, [pc, #184]	; (8003604 <HAL_RCC_OscConfig+0x4e8>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d0f0      	beq.n	8003538 <HAL_RCC_OscConfig+0x41c>
 8003556:	e04e      	b.n	80035f6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003558:	4b2b      	ldr	r3, [pc, #172]	; (8003608 <HAL_RCC_OscConfig+0x4ec>)
 800355a:	2200      	movs	r2, #0
 800355c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800355e:	f7fe ff29 	bl	80023b4 <HAL_GetTick>
 8003562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003564:	e008      	b.n	8003578 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003566:	f7fe ff25 	bl	80023b4 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d901      	bls.n	8003578 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e03f      	b.n	80035f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003578:	4b22      	ldr	r3, [pc, #136]	; (8003604 <HAL_RCC_OscConfig+0x4e8>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1f0      	bne.n	8003566 <HAL_RCC_OscConfig+0x44a>
 8003584:	e037      	b.n	80035f6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d101      	bne.n	8003592 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e032      	b.n	80035f8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003592:	4b1c      	ldr	r3, [pc, #112]	; (8003604 <HAL_RCC_OscConfig+0x4e8>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d028      	beq.n	80035f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d121      	bne.n	80035f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d11a      	bne.n	80035f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035c2:	4013      	ands	r3, r2
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035c8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d111      	bne.n	80035f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d8:	085b      	lsrs	r3, r3, #1
 80035da:	3b01      	subs	r3, #1
 80035dc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035de:	429a      	cmp	r2, r3
 80035e0:	d107      	bne.n	80035f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ec:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d001      	beq.n	80035f6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e000      	b.n	80035f8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3718      	adds	r7, #24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	40007000 	.word	0x40007000
 8003604:	40023800 	.word	0x40023800
 8003608:	42470060 	.word	0x42470060

0800360c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d101      	bne.n	8003620 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e0cc      	b.n	80037ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003620:	4b68      	ldr	r3, [pc, #416]	; (80037c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 030f 	and.w	r3, r3, #15
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	429a      	cmp	r2, r3
 800362c:	d90c      	bls.n	8003648 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362e:	4b65      	ldr	r3, [pc, #404]	; (80037c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	b2d2      	uxtb	r2, r2
 8003634:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003636:	4b63      	ldr	r3, [pc, #396]	; (80037c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 030f 	and.w	r3, r3, #15
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	429a      	cmp	r2, r3
 8003642:	d001      	beq.n	8003648 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e0b8      	b.n	80037ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d020      	beq.n	8003696 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0304 	and.w	r3, r3, #4
 800365c:	2b00      	cmp	r3, #0
 800365e:	d005      	beq.n	800366c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003660:	4b59      	ldr	r3, [pc, #356]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	4a58      	ldr	r2, [pc, #352]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003666:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800366a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0308 	and.w	r3, r3, #8
 8003674:	2b00      	cmp	r3, #0
 8003676:	d005      	beq.n	8003684 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003678:	4b53      	ldr	r3, [pc, #332]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	4a52      	ldr	r2, [pc, #328]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 800367e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003682:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003684:	4b50      	ldr	r3, [pc, #320]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	494d      	ldr	r1, [pc, #308]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003692:	4313      	orrs	r3, r2
 8003694:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d044      	beq.n	800372c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d107      	bne.n	80036ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036aa:	4b47      	ldr	r3, [pc, #284]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d119      	bne.n	80036ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e07f      	b.n	80037ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d003      	beq.n	80036ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036c6:	2b03      	cmp	r3, #3
 80036c8:	d107      	bne.n	80036da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ca:	4b3f      	ldr	r3, [pc, #252]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d109      	bne.n	80036ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e06f      	b.n	80037ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036da:	4b3b      	ldr	r3, [pc, #236]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e067      	b.n	80037ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ea:	4b37      	ldr	r3, [pc, #220]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f023 0203 	bic.w	r2, r3, #3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	4934      	ldr	r1, [pc, #208]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036fc:	f7fe fe5a 	bl	80023b4 <HAL_GetTick>
 8003700:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003702:	e00a      	b.n	800371a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003704:	f7fe fe56 	bl	80023b4 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003712:	4293      	cmp	r3, r2
 8003714:	d901      	bls.n	800371a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e04f      	b.n	80037ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800371a:	4b2b      	ldr	r3, [pc, #172]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 020c 	and.w	r2, r3, #12
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	429a      	cmp	r2, r3
 800372a:	d1eb      	bne.n	8003704 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800372c:	4b25      	ldr	r3, [pc, #148]	; (80037c4 <HAL_RCC_ClockConfig+0x1b8>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 030f 	and.w	r3, r3, #15
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	429a      	cmp	r2, r3
 8003738:	d20c      	bcs.n	8003754 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800373a:	4b22      	ldr	r3, [pc, #136]	; (80037c4 <HAL_RCC_ClockConfig+0x1b8>)
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	b2d2      	uxtb	r2, r2
 8003740:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003742:	4b20      	ldr	r3, [pc, #128]	; (80037c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	429a      	cmp	r2, r3
 800374e:	d001      	beq.n	8003754 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e032      	b.n	80037ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	2b00      	cmp	r3, #0
 800375e:	d008      	beq.n	8003772 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003760:	4b19      	ldr	r3, [pc, #100]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	4916      	ldr	r1, [pc, #88]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 800376e:	4313      	orrs	r3, r2
 8003770:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0308 	and.w	r3, r3, #8
 800377a:	2b00      	cmp	r3, #0
 800377c:	d009      	beq.n	8003792 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800377e:	4b12      	ldr	r3, [pc, #72]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	490e      	ldr	r1, [pc, #56]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 800378e:	4313      	orrs	r3, r2
 8003790:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003792:	f000 f821 	bl	80037d8 <HAL_RCC_GetSysClockFreq>
 8003796:	4602      	mov	r2, r0
 8003798:	4b0b      	ldr	r3, [pc, #44]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	091b      	lsrs	r3, r3, #4
 800379e:	f003 030f 	and.w	r3, r3, #15
 80037a2:	490a      	ldr	r1, [pc, #40]	; (80037cc <HAL_RCC_ClockConfig+0x1c0>)
 80037a4:	5ccb      	ldrb	r3, [r1, r3]
 80037a6:	fa22 f303 	lsr.w	r3, r2, r3
 80037aa:	4a09      	ldr	r2, [pc, #36]	; (80037d0 <HAL_RCC_ClockConfig+0x1c4>)
 80037ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037ae:	4b09      	ldr	r3, [pc, #36]	; (80037d4 <HAL_RCC_ClockConfig+0x1c8>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7fe fdba 	bl	800232c <HAL_InitTick>

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	40023c00 	.word	0x40023c00
 80037c8:	40023800 	.word	0x40023800
 80037cc:	08007f78 	.word	0x08007f78
 80037d0:	20000000 	.word	0x20000000
 80037d4:	20000008 	.word	0x20000008

080037d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037d8:	b5b0      	push	{r4, r5, r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037de:	2100      	movs	r1, #0
 80037e0:	6079      	str	r1, [r7, #4]
 80037e2:	2100      	movs	r1, #0
 80037e4:	60f9      	str	r1, [r7, #12]
 80037e6:	2100      	movs	r1, #0
 80037e8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80037ea:	2100      	movs	r1, #0
 80037ec:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037ee:	4952      	ldr	r1, [pc, #328]	; (8003938 <HAL_RCC_GetSysClockFreq+0x160>)
 80037f0:	6889      	ldr	r1, [r1, #8]
 80037f2:	f001 010c 	and.w	r1, r1, #12
 80037f6:	2908      	cmp	r1, #8
 80037f8:	d00d      	beq.n	8003816 <HAL_RCC_GetSysClockFreq+0x3e>
 80037fa:	2908      	cmp	r1, #8
 80037fc:	f200 8094 	bhi.w	8003928 <HAL_RCC_GetSysClockFreq+0x150>
 8003800:	2900      	cmp	r1, #0
 8003802:	d002      	beq.n	800380a <HAL_RCC_GetSysClockFreq+0x32>
 8003804:	2904      	cmp	r1, #4
 8003806:	d003      	beq.n	8003810 <HAL_RCC_GetSysClockFreq+0x38>
 8003808:	e08e      	b.n	8003928 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800380a:	4b4c      	ldr	r3, [pc, #304]	; (800393c <HAL_RCC_GetSysClockFreq+0x164>)
 800380c:	60bb      	str	r3, [r7, #8]
       break;
 800380e:	e08e      	b.n	800392e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003810:	4b4b      	ldr	r3, [pc, #300]	; (8003940 <HAL_RCC_GetSysClockFreq+0x168>)
 8003812:	60bb      	str	r3, [r7, #8]
      break;
 8003814:	e08b      	b.n	800392e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003816:	4948      	ldr	r1, [pc, #288]	; (8003938 <HAL_RCC_GetSysClockFreq+0x160>)
 8003818:	6849      	ldr	r1, [r1, #4]
 800381a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800381e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003820:	4945      	ldr	r1, [pc, #276]	; (8003938 <HAL_RCC_GetSysClockFreq+0x160>)
 8003822:	6849      	ldr	r1, [r1, #4]
 8003824:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003828:	2900      	cmp	r1, #0
 800382a:	d024      	beq.n	8003876 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800382c:	4942      	ldr	r1, [pc, #264]	; (8003938 <HAL_RCC_GetSysClockFreq+0x160>)
 800382e:	6849      	ldr	r1, [r1, #4]
 8003830:	0989      	lsrs	r1, r1, #6
 8003832:	4608      	mov	r0, r1
 8003834:	f04f 0100 	mov.w	r1, #0
 8003838:	f240 14ff 	movw	r4, #511	; 0x1ff
 800383c:	f04f 0500 	mov.w	r5, #0
 8003840:	ea00 0204 	and.w	r2, r0, r4
 8003844:	ea01 0305 	and.w	r3, r1, r5
 8003848:	493d      	ldr	r1, [pc, #244]	; (8003940 <HAL_RCC_GetSysClockFreq+0x168>)
 800384a:	fb01 f003 	mul.w	r0, r1, r3
 800384e:	2100      	movs	r1, #0
 8003850:	fb01 f102 	mul.w	r1, r1, r2
 8003854:	1844      	adds	r4, r0, r1
 8003856:	493a      	ldr	r1, [pc, #232]	; (8003940 <HAL_RCC_GetSysClockFreq+0x168>)
 8003858:	fba2 0101 	umull	r0, r1, r2, r1
 800385c:	1863      	adds	r3, r4, r1
 800385e:	4619      	mov	r1, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	461a      	mov	r2, r3
 8003864:	f04f 0300 	mov.w	r3, #0
 8003868:	f7fd f908 	bl	8000a7c <__aeabi_uldivmod>
 800386c:	4602      	mov	r2, r0
 800386e:	460b      	mov	r3, r1
 8003870:	4613      	mov	r3, r2
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	e04a      	b.n	800390c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003876:	4b30      	ldr	r3, [pc, #192]	; (8003938 <HAL_RCC_GetSysClockFreq+0x160>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	099b      	lsrs	r3, r3, #6
 800387c:	461a      	mov	r2, r3
 800387e:	f04f 0300 	mov.w	r3, #0
 8003882:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003886:	f04f 0100 	mov.w	r1, #0
 800388a:	ea02 0400 	and.w	r4, r2, r0
 800388e:	ea03 0501 	and.w	r5, r3, r1
 8003892:	4620      	mov	r0, r4
 8003894:	4629      	mov	r1, r5
 8003896:	f04f 0200 	mov.w	r2, #0
 800389a:	f04f 0300 	mov.w	r3, #0
 800389e:	014b      	lsls	r3, r1, #5
 80038a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80038a4:	0142      	lsls	r2, r0, #5
 80038a6:	4610      	mov	r0, r2
 80038a8:	4619      	mov	r1, r3
 80038aa:	1b00      	subs	r0, r0, r4
 80038ac:	eb61 0105 	sbc.w	r1, r1, r5
 80038b0:	f04f 0200 	mov.w	r2, #0
 80038b4:	f04f 0300 	mov.w	r3, #0
 80038b8:	018b      	lsls	r3, r1, #6
 80038ba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80038be:	0182      	lsls	r2, r0, #6
 80038c0:	1a12      	subs	r2, r2, r0
 80038c2:	eb63 0301 	sbc.w	r3, r3, r1
 80038c6:	f04f 0000 	mov.w	r0, #0
 80038ca:	f04f 0100 	mov.w	r1, #0
 80038ce:	00d9      	lsls	r1, r3, #3
 80038d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038d4:	00d0      	lsls	r0, r2, #3
 80038d6:	4602      	mov	r2, r0
 80038d8:	460b      	mov	r3, r1
 80038da:	1912      	adds	r2, r2, r4
 80038dc:	eb45 0303 	adc.w	r3, r5, r3
 80038e0:	f04f 0000 	mov.w	r0, #0
 80038e4:	f04f 0100 	mov.w	r1, #0
 80038e8:	0299      	lsls	r1, r3, #10
 80038ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80038ee:	0290      	lsls	r0, r2, #10
 80038f0:	4602      	mov	r2, r0
 80038f2:	460b      	mov	r3, r1
 80038f4:	4610      	mov	r0, r2
 80038f6:	4619      	mov	r1, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	461a      	mov	r2, r3
 80038fc:	f04f 0300 	mov.w	r3, #0
 8003900:	f7fd f8bc 	bl	8000a7c <__aeabi_uldivmod>
 8003904:	4602      	mov	r2, r0
 8003906:	460b      	mov	r3, r1
 8003908:	4613      	mov	r3, r2
 800390a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800390c:	4b0a      	ldr	r3, [pc, #40]	; (8003938 <HAL_RCC_GetSysClockFreq+0x160>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	0c1b      	lsrs	r3, r3, #16
 8003912:	f003 0303 	and.w	r3, r3, #3
 8003916:	3301      	adds	r3, #1
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	fbb2 f3f3 	udiv	r3, r2, r3
 8003924:	60bb      	str	r3, [r7, #8]
      break;
 8003926:	e002      	b.n	800392e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003928:	4b04      	ldr	r3, [pc, #16]	; (800393c <HAL_RCC_GetSysClockFreq+0x164>)
 800392a:	60bb      	str	r3, [r7, #8]
      break;
 800392c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800392e:	68bb      	ldr	r3, [r7, #8]
}
 8003930:	4618      	mov	r0, r3
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bdb0      	pop	{r4, r5, r7, pc}
 8003938:	40023800 	.word	0x40023800
 800393c:	00f42400 	.word	0x00f42400
 8003940:	017d7840 	.word	0x017d7840

08003944 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003948:	4b03      	ldr	r3, [pc, #12]	; (8003958 <HAL_RCC_GetHCLKFreq+0x14>)
 800394a:	681b      	ldr	r3, [r3, #0]
}
 800394c:	4618      	mov	r0, r3
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	20000000 	.word	0x20000000

0800395c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003960:	f7ff fff0 	bl	8003944 <HAL_RCC_GetHCLKFreq>
 8003964:	4602      	mov	r2, r0
 8003966:	4b05      	ldr	r3, [pc, #20]	; (800397c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	0a9b      	lsrs	r3, r3, #10
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	4903      	ldr	r1, [pc, #12]	; (8003980 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003972:	5ccb      	ldrb	r3, [r1, r3]
 8003974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003978:	4618      	mov	r0, r3
 800397a:	bd80      	pop	{r7, pc}
 800397c:	40023800 	.word	0x40023800
 8003980:	08007f88 	.word	0x08007f88

08003984 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003988:	f7ff ffdc 	bl	8003944 <HAL_RCC_GetHCLKFreq>
 800398c:	4602      	mov	r2, r0
 800398e:	4b05      	ldr	r3, [pc, #20]	; (80039a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	0b5b      	lsrs	r3, r3, #13
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	4903      	ldr	r1, [pc, #12]	; (80039a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800399a:	5ccb      	ldrb	r3, [r1, r3]
 800399c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	40023800 	.word	0x40023800
 80039a8:	08007f88 	.word	0x08007f88

080039ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e07b      	b.n	8003ab6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d108      	bne.n	80039d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039ce:	d009      	beq.n	80039e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	61da      	str	r2, [r3, #28]
 80039d6:	e005      	b.n	80039e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d106      	bne.n	8003a04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f7fd fc8c 	bl	800131c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2202      	movs	r2, #2
 8003a08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a1a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003a2c:	431a      	orrs	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a36:	431a      	orrs	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	431a      	orrs	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a54:	431a      	orrs	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a68:	ea42 0103 	orr.w	r1, r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a70:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	0c1b      	lsrs	r3, r3, #16
 8003a82:	f003 0104 	and.w	r1, r3, #4
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8a:	f003 0210 	and.w	r2, r3, #16
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	69da      	ldr	r2, [r3, #28]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aa4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
	...

08003ac0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	4613      	mov	r3, r2
 8003acc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d101      	bne.n	8003ae0 <HAL_SPI_Transmit_DMA+0x20>
 8003adc:	2302      	movs	r3, #2
 8003ade:	e09b      	b.n	8003c18 <HAL_SPI_Transmit_DMA+0x158>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d002      	beq.n	8003afa <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003af4:	2302      	movs	r3, #2
 8003af6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003af8:	e089      	b.n	8003c0e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d002      	beq.n	8003b06 <HAL_SPI_Transmit_DMA+0x46>
 8003b00:	88fb      	ldrh	r3, [r7, #6]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d102      	bne.n	8003b0c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b0a:	e080      	b.n	8003c0e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2203      	movs	r2, #3
 8003b10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	88fa      	ldrh	r2, [r7, #6]
 8003b24:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	88fa      	ldrh	r2, [r7, #6]
 8003b2a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b52:	d10f      	bne.n	8003b74 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b62:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b72:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b78:	4a29      	ldr	r2, [pc, #164]	; (8003c20 <HAL_SPI_Transmit_DMA+0x160>)
 8003b7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b80:	4a28      	ldr	r2, [pc, #160]	; (8003c24 <HAL_SPI_Transmit_DMA+0x164>)
 8003b82:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b88:	4a27      	ldr	r2, [pc, #156]	; (8003c28 <HAL_SPI_Transmit_DMA+0x168>)
 8003b8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b90:	2200      	movs	r2, #0
 8003b92:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	330c      	adds	r3, #12
 8003ba4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003baa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003bac:	f7fe fdf2 	bl	8002794 <HAL_DMA_Start_IT>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00c      	beq.n	8003bd0 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bba:	f043 0210 	orr.w	r2, r3, #16
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003bce:	e01e      	b.n	8003c0e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bda:	2b40      	cmp	r3, #64	; 0x40
 8003bdc:	d007      	beq.n	8003bee <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bec:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f042 0220 	orr.w	r2, r2, #32
 8003bfc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f042 0202 	orr.w	r2, r2, #2
 8003c0c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3718      	adds	r7, #24
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	080043f1 	.word	0x080043f1
 8003c24:	08004211 	.word	0x08004211
 8003c28:	08004445 	.word	0x08004445

08003c2c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	4613      	mov	r3, r2
 8003c38:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d110      	bne.n	8003c68 <HAL_SPI_Receive_DMA+0x3c>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c4e:	d10b      	bne.n	8003c68 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2204      	movs	r2, #4
 8003c54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8003c58:	88fb      	ldrh	r3, [r7, #6]
 8003c5a:	68ba      	ldr	r2, [r7, #8]
 8003c5c:	68b9      	ldr	r1, [r7, #8]
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f000 f8ac 	bl	8003dbc <HAL_SPI_TransmitReceive_DMA>
 8003c64:	4603      	mov	r3, r0
 8003c66:	e09f      	b.n	8003da8 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d101      	bne.n	8003c76 <HAL_SPI_Receive_DMA+0x4a>
 8003c72:	2302      	movs	r3, #2
 8003c74:	e098      	b.n	8003da8 <HAL_SPI_Receive_DMA+0x17c>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d002      	beq.n	8003c90 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c8e:	e086      	b.n	8003d9e <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d002      	beq.n	8003c9c <HAL_SPI_Receive_DMA+0x70>
 8003c96:	88fb      	ldrh	r3, [r7, #6]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d102      	bne.n	8003ca2 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ca0:	e07d      	b.n	8003d9e <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2204      	movs	r2, #4
 8003ca6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	68ba      	ldr	r2, [r7, #8]
 8003cb4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	88fa      	ldrh	r2, [r7, #6]
 8003cba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	88fa      	ldrh	r2, [r7, #6]
 8003cc0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ce2:	d10f      	bne.n	8003d04 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cf2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d02:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d08:	4a29      	ldr	r2, [pc, #164]	; (8003db0 <HAL_SPI_Receive_DMA+0x184>)
 8003d0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d10:	4a28      	ldr	r2, [pc, #160]	; (8003db4 <HAL_SPI_Receive_DMA+0x188>)
 8003d12:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d18:	4a27      	ldr	r2, [pc, #156]	; (8003db8 <HAL_SPI_Receive_DMA+0x18c>)
 8003d1a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d20:	2200      	movs	r2, #0
 8003d22:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	330c      	adds	r3, #12
 8003d2e:	4619      	mov	r1, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d34:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d3a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003d3c:	f7fe fd2a 	bl	8002794 <HAL_DMA_Start_IT>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00c      	beq.n	8003d60 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d4a:	f043 0210 	orr.w	r2, r3, #16
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003d5e:	e01e      	b.n	8003d9e <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d6a:	2b40      	cmp	r3, #64	; 0x40
 8003d6c:	d007      	beq.n	8003d7e <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d7c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f042 0220 	orr.w	r2, r2, #32
 8003d8c:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f042 0201 	orr.w	r2, r2, #1
 8003d9c:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3718      	adds	r7, #24
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	0800440d 	.word	0x0800440d
 8003db4:	080042b9 	.word	0x080042b9
 8003db8:	08004445 	.word	0x08004445

08003dbc <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
 8003dc8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d101      	bne.n	8003ddc <HAL_SPI_TransmitReceive_DMA+0x20>
 8003dd8:	2302      	movs	r3, #2
 8003dda:	e0e3      	b.n	8003fa4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dea:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003df2:	7dbb      	ldrb	r3, [r7, #22]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d00d      	beq.n	8003e14 <HAL_SPI_TransmitReceive_DMA+0x58>
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dfe:	d106      	bne.n	8003e0e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d102      	bne.n	8003e0e <HAL_SPI_TransmitReceive_DMA+0x52>
 8003e08:	7dbb      	ldrb	r3, [r7, #22]
 8003e0a:	2b04      	cmp	r3, #4
 8003e0c:	d002      	beq.n	8003e14 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8003e0e:	2302      	movs	r3, #2
 8003e10:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e12:	e0c2      	b.n	8003f9a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d005      	beq.n	8003e26 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d002      	beq.n	8003e26 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003e20:	887b      	ldrh	r3, [r7, #2]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d102      	bne.n	8003e2c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e2a:	e0b6      	b.n	8003f9a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b04      	cmp	r3, #4
 8003e36:	d003      	beq.n	8003e40 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2205      	movs	r2, #5
 8003e3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	887a      	ldrh	r2, [r7, #2]
 8003e50:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	887a      	ldrh	r2, [r7, #2]
 8003e56:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	887a      	ldrh	r2, [r7, #2]
 8003e62:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	887a      	ldrh	r2, [r7, #2]
 8003e68:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b04      	cmp	r3, #4
 8003e80:	d108      	bne.n	8003e94 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e86:	4a49      	ldr	r2, [pc, #292]	; (8003fac <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8003e88:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e8e:	4a48      	ldr	r2, [pc, #288]	; (8003fb0 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8003e90:	63da      	str	r2, [r3, #60]	; 0x3c
 8003e92:	e007      	b.n	8003ea4 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e98:	4a46      	ldr	r2, [pc, #280]	; (8003fb4 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8003e9a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ea0:	4a45      	ldr	r2, [pc, #276]	; (8003fb8 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8003ea2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ea8:	4a44      	ldr	r2, [pc, #272]	; (8003fbc <HAL_SPI_TransmitReceive_DMA+0x200>)
 8003eaa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	330c      	adds	r3, #12
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eca:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003ecc:	f7fe fc62 	bl	8002794 <HAL_DMA_Start_IT>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00c      	beq.n	8003ef0 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eda:	f043 0210 	orr.w	r2, r3, #16
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003eee:	e054      	b.n	8003f9a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f042 0201 	orr.w	r2, r2, #1
 8003efe:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f04:	2200      	movs	r2, #0
 8003f06:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f14:	2200      	movs	r2, #0
 8003f16:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f28:	4619      	mov	r1, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	330c      	adds	r3, #12
 8003f30:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f36:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003f38:	f7fe fc2c 	bl	8002794 <HAL_DMA_Start_IT>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00c      	beq.n	8003f5c <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f46:	f043 0210 	orr.w	r2, r3, #16
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003f5a:	e01e      	b.n	8003f9a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f66:	2b40      	cmp	r3, #64	; 0x40
 8003f68:	d007      	beq.n	8003f7a <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f78:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f042 0220 	orr.w	r2, r2, #32
 8003f88:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f042 0202 	orr.w	r2, r2, #2
 8003f98:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3718      	adds	r7, #24
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	0800440d 	.word	0x0800440d
 8003fb0:	080042b9 	.word	0x080042b9
 8003fb4:	08004429 	.word	0x08004429
 8003fb8:	08004361 	.word	0x08004361
 8003fbc:	08004445 	.word	0x08004445

08003fc0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b088      	sub	sp, #32
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	099b      	lsrs	r3, r3, #6
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10f      	bne.n	8004004 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00a      	beq.n	8004004 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	099b      	lsrs	r3, r3, #6
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d004      	beq.n	8004004 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	4798      	blx	r3
    return;
 8004002:	e0d7      	b.n	80041b4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	085b      	lsrs	r3, r3, #1
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00a      	beq.n	8004026 <HAL_SPI_IRQHandler+0x66>
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	09db      	lsrs	r3, r3, #7
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	2b00      	cmp	r3, #0
 800401a:	d004      	beq.n	8004026 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	4798      	blx	r3
    return;
 8004024:	e0c6      	b.n	80041b4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	095b      	lsrs	r3, r3, #5
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10c      	bne.n	800404c <HAL_SPI_IRQHandler+0x8c>
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	099b      	lsrs	r3, r3, #6
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b00      	cmp	r3, #0
 800403c:	d106      	bne.n	800404c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	0a1b      	lsrs	r3, r3, #8
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 80b4 	beq.w	80041b4 <HAL_SPI_IRQHandler+0x1f4>
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	095b      	lsrs	r3, r3, #5
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 80ad 	beq.w	80041b4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	099b      	lsrs	r3, r3, #6
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d023      	beq.n	80040ae <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b03      	cmp	r3, #3
 8004070:	d011      	beq.n	8004096 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004076:	f043 0204 	orr.w	r2, r3, #4
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800407e:	2300      	movs	r3, #0
 8004080:	617b      	str	r3, [r7, #20]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	617b      	str	r3, [r7, #20]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	617b      	str	r3, [r7, #20]
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	e00b      	b.n	80040ae <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004096:	2300      	movs	r3, #0
 8004098:	613b      	str	r3, [r7, #16]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	613b      	str	r3, [r7, #16]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	613b      	str	r3, [r7, #16]
 80040aa:	693b      	ldr	r3, [r7, #16]
        return;
 80040ac:	e082      	b.n	80041b4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	095b      	lsrs	r3, r3, #5
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d014      	beq.n	80040e4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040be:	f043 0201 	orr.w	r2, r3, #1
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80040c6:	2300      	movs	r3, #0
 80040c8:	60fb      	str	r3, [r7, #12]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	60fb      	str	r3, [r7, #12]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040e0:	601a      	str	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	0a1b      	lsrs	r3, r3, #8
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00c      	beq.n	800410a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f4:	f043 0208 	orr.w	r2, r3, #8
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80040fc:	2300      	movs	r3, #0
 80040fe:	60bb      	str	r3, [r7, #8]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	60bb      	str	r3, [r7, #8]
 8004108:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800410e:	2b00      	cmp	r3, #0
 8004110:	d04f      	beq.n	80041b2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004120:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	2b00      	cmp	r3, #0
 8004132:	d104      	bne.n	800413e <HAL_SPI_IRQHandler+0x17e>
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d034      	beq.n	80041a8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 0203 	bic.w	r2, r2, #3
 800414c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004152:	2b00      	cmp	r3, #0
 8004154:	d011      	beq.n	800417a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800415a:	4a18      	ldr	r2, [pc, #96]	; (80041bc <HAL_SPI_IRQHandler+0x1fc>)
 800415c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004162:	4618      	mov	r0, r3
 8004164:	f7fe fb6e 	bl	8002844 <HAL_DMA_Abort_IT>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d005      	beq.n	800417a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004172:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800417e:	2b00      	cmp	r3, #0
 8004180:	d016      	beq.n	80041b0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004186:	4a0d      	ldr	r2, [pc, #52]	; (80041bc <HAL_SPI_IRQHandler+0x1fc>)
 8004188:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800418e:	4618      	mov	r0, r3
 8004190:	f7fe fb58 	bl	8002844 <HAL_DMA_Abort_IT>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00a      	beq.n	80041b0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80041a6:	e003      	b.n	80041b0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 f827 	bl	80041fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80041ae:	e000      	b.n	80041b2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80041b0:	bf00      	nop
    return;
 80041b2:	bf00      	nop
  }
}
 80041b4:	3720      	adds	r7, #32
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	08004485 	.word	0x08004485

080041c0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800421e:	f7fe f8c9 	bl	80023b4 <HAL_GetTick>
 8004222:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004232:	d03b      	beq.n	80042ac <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0220 	bic.w	r2, r2, #32
 8004242:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 0202 	bic.w	r2, r2, #2
 8004252:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	2164      	movs	r1, #100	; 0x64
 8004258:	6978      	ldr	r0, [r7, #20]
 800425a:	f000 fa15 	bl	8004688 <SPI_EndRxTxTransaction>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d005      	beq.n	8004270 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004268:	f043 0220 	orr.w	r2, r3, #32
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10a      	bne.n	800428e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004278:	2300      	movs	r3, #0
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	60fb      	str	r3, [r7, #12]
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	60fb      	str	r3, [r7, #12]
 800428c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	2200      	movs	r2, #0
 8004292:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d003      	beq.n	80042ac <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80042a4:	6978      	ldr	r0, [r7, #20]
 80042a6:	f7ff ffa9 	bl	80041fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80042aa:	e002      	b.n	80042b2 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80042ac:	6978      	ldr	r0, [r7, #20]
 80042ae:	f7fd ffaf 	bl	8002210 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80042b2:	3718      	adds	r7, #24
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c4:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042c6:	f7fe f875 	bl	80023b4 <HAL_GetTick>
 80042ca:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042da:	d03b      	beq.n	8004354 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f022 0220 	bic.w	r2, r2, #32
 80042ea:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d10d      	bne.n	8004310 <SPI_DMAReceiveCplt+0x58>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042fc:	d108      	bne.n	8004310 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 0203 	bic.w	r2, r2, #3
 800430c:	605a      	str	r2, [r3, #4]
 800430e:	e007      	b.n	8004320 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 0201 	bic.w	r2, r2, #1
 800431e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004320:	68ba      	ldr	r2, [r7, #8]
 8004322:	2164      	movs	r1, #100	; 0x64
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f000 f949 	bl	80045bc <SPI_EndRxTransaction>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d002      	beq.n	8004336 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2220      	movs	r2, #32
 8004334:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004348:	2b00      	cmp	r3, #0
 800434a:	d003      	beq.n	8004354 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f7ff ff55 	bl	80041fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004352:	e002      	b.n	800435a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f7fd ff71 	bl	800223c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800436e:	f7fe f821 	bl	80023b4 <HAL_GetTick>
 8004372:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004382:	d02f      	beq.n	80043e4 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f022 0220 	bic.w	r2, r2, #32
 8004392:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004394:	68ba      	ldr	r2, [r7, #8]
 8004396:	2164      	movs	r1, #100	; 0x64
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f000 f975 	bl	8004688 <SPI_EndRxTxTransaction>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d005      	beq.n	80043b0 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a8:	f043 0220 	orr.w	r2, r3, #32
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	685a      	ldr	r2, [r3, #4]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f022 0203 	bic.w	r2, r2, #3
 80043be:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f7ff ff0d 	bl	80041fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80043e2:	e002      	b.n	80043ea <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f7fd ff3f 	bl	8002268 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fc:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f7ff fede 	bl	80041c0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004404:	bf00      	nop
 8004406:	3710      	adds	r7, #16
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004418:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f7ff feda 	bl	80041d4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004420:	bf00      	nop
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004434:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f7ff fed6 	bl	80041e8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800443c:	bf00      	nop
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004450:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f022 0203 	bic.w	r2, r2, #3
 8004460:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004466:	f043 0210 	orr.w	r2, r3, #16
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f7ff fec0 	bl	80041fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800447c:	bf00      	nop
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004490:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f7ff feac 	bl	80041fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80044a4:	bf00      	nop
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b088      	sub	sp, #32
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	603b      	str	r3, [r7, #0]
 80044b8:	4613      	mov	r3, r2
 80044ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80044bc:	f7fd ff7a 	bl	80023b4 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c4:	1a9b      	subs	r3, r3, r2
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	4413      	add	r3, r2
 80044ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80044cc:	f7fd ff72 	bl	80023b4 <HAL_GetTick>
 80044d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80044d2:	4b39      	ldr	r3, [pc, #228]	; (80045b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	015b      	lsls	r3, r3, #5
 80044d8:	0d1b      	lsrs	r3, r3, #20
 80044da:	69fa      	ldr	r2, [r7, #28]
 80044dc:	fb02 f303 	mul.w	r3, r2, r3
 80044e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044e2:	e054      	b.n	800458e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ea:	d050      	beq.n	800458e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80044ec:	f7fd ff62 	bl	80023b4 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	69fa      	ldr	r2, [r7, #28]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d902      	bls.n	8004502 <SPI_WaitFlagStateUntilTimeout+0x56>
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d13d      	bne.n	800457e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004510:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800451a:	d111      	bne.n	8004540 <SPI_WaitFlagStateUntilTimeout+0x94>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004524:	d004      	beq.n	8004530 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800452e:	d107      	bne.n	8004540 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800453e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004544:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004548:	d10f      	bne.n	800456a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004558:	601a      	str	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004568:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e017      	b.n	80045ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d101      	bne.n	8004588 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004584:	2300      	movs	r3, #0
 8004586:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	3b01      	subs	r3, #1
 800458c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	689a      	ldr	r2, [r3, #8]
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	4013      	ands	r3, r2
 8004598:	68ba      	ldr	r2, [r7, #8]
 800459a:	429a      	cmp	r2, r3
 800459c:	bf0c      	ite	eq
 800459e:	2301      	moveq	r3, #1
 80045a0:	2300      	movne	r3, #0
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	461a      	mov	r2, r3
 80045a6:	79fb      	ldrb	r3, [r7, #7]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d19b      	bne.n	80044e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3720      	adds	r7, #32
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	20000000 	.word	0x20000000

080045bc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b086      	sub	sp, #24
 80045c0:	af02      	add	r7, sp, #8
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045d0:	d111      	bne.n	80045f6 <SPI_EndRxTransaction+0x3a>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045da:	d004      	beq.n	80045e6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045e4:	d107      	bne.n	80045f6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045f4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045fe:	d12a      	bne.n	8004656 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004608:	d012      	beq.n	8004630 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	2200      	movs	r2, #0
 8004612:	2180      	movs	r1, #128	; 0x80
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f7ff ff49 	bl	80044ac <SPI_WaitFlagStateUntilTimeout>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d02d      	beq.n	800467c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004624:	f043 0220 	orr.w	r2, r3, #32
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e026      	b.n	800467e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	9300      	str	r3, [sp, #0]
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	2200      	movs	r2, #0
 8004638:	2101      	movs	r1, #1
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f7ff ff36 	bl	80044ac <SPI_WaitFlagStateUntilTimeout>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d01a      	beq.n	800467c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464a:	f043 0220 	orr.w	r2, r3, #32
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e013      	b.n	800467e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	2200      	movs	r2, #0
 800465e:	2101      	movs	r1, #1
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f7ff ff23 	bl	80044ac <SPI_WaitFlagStateUntilTimeout>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d007      	beq.n	800467c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004670:	f043 0220 	orr.w	r2, r3, #32
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e000      	b.n	800467e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
	...

08004688 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b088      	sub	sp, #32
 800468c:	af02      	add	r7, sp, #8
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004694:	4b1b      	ldr	r3, [pc, #108]	; (8004704 <SPI_EndRxTxTransaction+0x7c>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a1b      	ldr	r2, [pc, #108]	; (8004708 <SPI_EndRxTxTransaction+0x80>)
 800469a:	fba2 2303 	umull	r2, r3, r2, r3
 800469e:	0d5b      	lsrs	r3, r3, #21
 80046a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80046a4:	fb02 f303 	mul.w	r3, r2, r3
 80046a8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046b2:	d112      	bne.n	80046da <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	2200      	movs	r2, #0
 80046bc:	2180      	movs	r1, #128	; 0x80
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f7ff fef4 	bl	80044ac <SPI_WaitFlagStateUntilTimeout>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d016      	beq.n	80046f8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ce:	f043 0220 	orr.w	r2, r3, #32
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e00f      	b.n	80046fa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00a      	beq.n	80046f6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	3b01      	subs	r3, #1
 80046e4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f0:	2b80      	cmp	r3, #128	; 0x80
 80046f2:	d0f2      	beq.n	80046da <SPI_EndRxTxTransaction+0x52>
 80046f4:	e000      	b.n	80046f8 <SPI_EndRxTxTransaction+0x70>
        break;
 80046f6:	bf00      	nop
  }

  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3718      	adds	r7, #24
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	20000000 	.word	0x20000000
 8004708:	165e9f81 	.word	0x165e9f81

0800470c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d101      	bne.n	800471e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e03f      	b.n	800479e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d106      	bne.n	8004738 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f7fc fea8 	bl	8001488 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2224      	movs	r2, #36	; 0x24
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68da      	ldr	r2, [r3, #12]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800474e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 f929 	bl	80049a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	691a      	ldr	r2, [r3, #16]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004764:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	695a      	ldr	r2, [r3, #20]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004774:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68da      	ldr	r2, [r3, #12]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004784:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2220      	movs	r2, #32
 8004790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2220      	movs	r2, #32
 8004798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3708      	adds	r7, #8
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b08a      	sub	sp, #40	; 0x28
 80047aa:	af02      	add	r7, sp, #8
 80047ac:	60f8      	str	r0, [r7, #12]
 80047ae:	60b9      	str	r1, [r7, #8]
 80047b0:	603b      	str	r3, [r7, #0]
 80047b2:	4613      	mov	r3, r2
 80047b4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047b6:	2300      	movs	r3, #0
 80047b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b20      	cmp	r3, #32
 80047c4:	d17c      	bne.n	80048c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d002      	beq.n	80047d2 <HAL_UART_Transmit+0x2c>
 80047cc:	88fb      	ldrh	r3, [r7, #6]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e075      	b.n	80048c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d101      	bne.n	80047e4 <HAL_UART_Transmit+0x3e>
 80047e0:	2302      	movs	r3, #2
 80047e2:	e06e      	b.n	80048c2 <HAL_UART_Transmit+0x11c>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2221      	movs	r2, #33	; 0x21
 80047f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047fa:	f7fd fddb 	bl	80023b4 <HAL_GetTick>
 80047fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	88fa      	ldrh	r2, [r7, #6]
 8004804:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	88fa      	ldrh	r2, [r7, #6]
 800480a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004814:	d108      	bne.n	8004828 <HAL_UART_Transmit+0x82>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d104      	bne.n	8004828 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800481e:	2300      	movs	r3, #0
 8004820:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	61bb      	str	r3, [r7, #24]
 8004826:	e003      	b.n	8004830 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800482c:	2300      	movs	r3, #0
 800482e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004838:	e02a      	b.n	8004890 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	9300      	str	r3, [sp, #0]
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	2200      	movs	r2, #0
 8004842:	2180      	movs	r1, #128	; 0x80
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f000 f840 	bl	80048ca <UART_WaitOnFlagUntilTimeout>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d001      	beq.n	8004854 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e036      	b.n	80048c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10b      	bne.n	8004872 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	881b      	ldrh	r3, [r3, #0]
 800485e:	461a      	mov	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004868:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	3302      	adds	r3, #2
 800486e:	61bb      	str	r3, [r7, #24]
 8004870:	e007      	b.n	8004882 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	781a      	ldrb	r2, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	3301      	adds	r3, #1
 8004880:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004886:	b29b      	uxth	r3, r3
 8004888:	3b01      	subs	r3, #1
 800488a:	b29a      	uxth	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004894:	b29b      	uxth	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1cf      	bne.n	800483a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	9300      	str	r3, [sp, #0]
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	2200      	movs	r2, #0
 80048a2:	2140      	movs	r1, #64	; 0x40
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f000 f810 	bl	80048ca <UART_WaitOnFlagUntilTimeout>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d001      	beq.n	80048b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e006      	b.n	80048c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2220      	movs	r2, #32
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80048bc:	2300      	movs	r3, #0
 80048be:	e000      	b.n	80048c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80048c0:	2302      	movs	r3, #2
  }
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3720      	adds	r7, #32
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b090      	sub	sp, #64	; 0x40
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	60f8      	str	r0, [r7, #12]
 80048d2:	60b9      	str	r1, [r7, #8]
 80048d4:	603b      	str	r3, [r7, #0]
 80048d6:	4613      	mov	r3, r2
 80048d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048da:	e050      	b.n	800497e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e2:	d04c      	beq.n	800497e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80048e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d007      	beq.n	80048fa <UART_WaitOnFlagUntilTimeout+0x30>
 80048ea:	f7fd fd63 	bl	80023b4 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d241      	bcs.n	800497e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	330c      	adds	r3, #12
 8004900:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004904:	e853 3f00 	ldrex	r3, [r3]
 8004908:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800490a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004910:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	330c      	adds	r3, #12
 8004918:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800491a:	637a      	str	r2, [r7, #52]	; 0x34
 800491c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004920:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004922:	e841 2300 	strex	r3, r2, [r1]
 8004926:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1e5      	bne.n	80048fa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	3314      	adds	r3, #20
 8004934:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	e853 3f00 	ldrex	r3, [r3]
 800493c:	613b      	str	r3, [r7, #16]
   return(result);
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	f023 0301 	bic.w	r3, r3, #1
 8004944:	63bb      	str	r3, [r7, #56]	; 0x38
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	3314      	adds	r3, #20
 800494c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800494e:	623a      	str	r2, [r7, #32]
 8004950:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004952:	69f9      	ldr	r1, [r7, #28]
 8004954:	6a3a      	ldr	r2, [r7, #32]
 8004956:	e841 2300 	strex	r3, r2, [r1]
 800495a:	61bb      	str	r3, [r7, #24]
   return(result);
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1e5      	bne.n	800492e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2220      	movs	r2, #32
 8004966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2220      	movs	r2, #32
 800496e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e00f      	b.n	800499e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	4013      	ands	r3, r2
 8004988:	68ba      	ldr	r2, [r7, #8]
 800498a:	429a      	cmp	r2, r3
 800498c:	bf0c      	ite	eq
 800498e:	2301      	moveq	r3, #1
 8004990:	2300      	movne	r3, #0
 8004992:	b2db      	uxtb	r3, r3
 8004994:	461a      	mov	r2, r3
 8004996:	79fb      	ldrb	r3, [r7, #7]
 8004998:	429a      	cmp	r2, r3
 800499a:	d09f      	beq.n	80048dc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3740      	adds	r7, #64	; 0x40
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
	...

080049a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ac:	b09f      	sub	sp, #124	; 0x7c
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80049bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049be:	68d9      	ldr	r1, [r3, #12]
 80049c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	ea40 0301 	orr.w	r3, r0, r1
 80049c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049cc:	689a      	ldr	r2, [r3, #8]
 80049ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	431a      	orrs	r2, r3
 80049d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	431a      	orrs	r2, r3
 80049da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049dc:	69db      	ldr	r3, [r3, #28]
 80049de:	4313      	orrs	r3, r2
 80049e0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80049e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80049ec:	f021 010c 	bic.w	r1, r1, #12
 80049f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049f6:	430b      	orrs	r3, r1
 80049f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	695b      	ldr	r3, [r3, #20]
 8004a00:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a06:	6999      	ldr	r1, [r3, #24]
 8004a08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	ea40 0301 	orr.w	r3, r0, r1
 8004a10:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	4bc5      	ldr	r3, [pc, #788]	; (8004d2c <UART_SetConfig+0x384>)
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d004      	beq.n	8004a26 <UART_SetConfig+0x7e>
 8004a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	4bc3      	ldr	r3, [pc, #780]	; (8004d30 <UART_SetConfig+0x388>)
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d103      	bne.n	8004a2e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a26:	f7fe ffad 	bl	8003984 <HAL_RCC_GetPCLK2Freq>
 8004a2a:	6778      	str	r0, [r7, #116]	; 0x74
 8004a2c:	e002      	b.n	8004a34 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a2e:	f7fe ff95 	bl	800395c <HAL_RCC_GetPCLK1Freq>
 8004a32:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a36:	69db      	ldr	r3, [r3, #28]
 8004a38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a3c:	f040 80b6 	bne.w	8004bac <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a42:	461c      	mov	r4, r3
 8004a44:	f04f 0500 	mov.w	r5, #0
 8004a48:	4622      	mov	r2, r4
 8004a4a:	462b      	mov	r3, r5
 8004a4c:	1891      	adds	r1, r2, r2
 8004a4e:	6439      	str	r1, [r7, #64]	; 0x40
 8004a50:	415b      	adcs	r3, r3
 8004a52:	647b      	str	r3, [r7, #68]	; 0x44
 8004a54:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a58:	1912      	adds	r2, r2, r4
 8004a5a:	eb45 0303 	adc.w	r3, r5, r3
 8004a5e:	f04f 0000 	mov.w	r0, #0
 8004a62:	f04f 0100 	mov.w	r1, #0
 8004a66:	00d9      	lsls	r1, r3, #3
 8004a68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a6c:	00d0      	lsls	r0, r2, #3
 8004a6e:	4602      	mov	r2, r0
 8004a70:	460b      	mov	r3, r1
 8004a72:	1911      	adds	r1, r2, r4
 8004a74:	6639      	str	r1, [r7, #96]	; 0x60
 8004a76:	416b      	adcs	r3, r5
 8004a78:	667b      	str	r3, [r7, #100]	; 0x64
 8004a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	461a      	mov	r2, r3
 8004a80:	f04f 0300 	mov.w	r3, #0
 8004a84:	1891      	adds	r1, r2, r2
 8004a86:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a88:	415b      	adcs	r3, r3
 8004a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a90:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004a94:	f7fb fff2 	bl	8000a7c <__aeabi_uldivmod>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	4ba5      	ldr	r3, [pc, #660]	; (8004d34 <UART_SetConfig+0x38c>)
 8004a9e:	fba3 2302 	umull	r2, r3, r3, r2
 8004aa2:	095b      	lsrs	r3, r3, #5
 8004aa4:	011e      	lsls	r6, r3, #4
 8004aa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004aa8:	461c      	mov	r4, r3
 8004aaa:	f04f 0500 	mov.w	r5, #0
 8004aae:	4622      	mov	r2, r4
 8004ab0:	462b      	mov	r3, r5
 8004ab2:	1891      	adds	r1, r2, r2
 8004ab4:	6339      	str	r1, [r7, #48]	; 0x30
 8004ab6:	415b      	adcs	r3, r3
 8004ab8:	637b      	str	r3, [r7, #52]	; 0x34
 8004aba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004abe:	1912      	adds	r2, r2, r4
 8004ac0:	eb45 0303 	adc.w	r3, r5, r3
 8004ac4:	f04f 0000 	mov.w	r0, #0
 8004ac8:	f04f 0100 	mov.w	r1, #0
 8004acc:	00d9      	lsls	r1, r3, #3
 8004ace:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ad2:	00d0      	lsls	r0, r2, #3
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	1911      	adds	r1, r2, r4
 8004ada:	65b9      	str	r1, [r7, #88]	; 0x58
 8004adc:	416b      	adcs	r3, r5
 8004ade:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	f04f 0300 	mov.w	r3, #0
 8004aea:	1891      	adds	r1, r2, r2
 8004aec:	62b9      	str	r1, [r7, #40]	; 0x28
 8004aee:	415b      	adcs	r3, r3
 8004af0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004af2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004af6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004afa:	f7fb ffbf 	bl	8000a7c <__aeabi_uldivmod>
 8004afe:	4602      	mov	r2, r0
 8004b00:	460b      	mov	r3, r1
 8004b02:	4b8c      	ldr	r3, [pc, #560]	; (8004d34 <UART_SetConfig+0x38c>)
 8004b04:	fba3 1302 	umull	r1, r3, r3, r2
 8004b08:	095b      	lsrs	r3, r3, #5
 8004b0a:	2164      	movs	r1, #100	; 0x64
 8004b0c:	fb01 f303 	mul.w	r3, r1, r3
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	00db      	lsls	r3, r3, #3
 8004b14:	3332      	adds	r3, #50	; 0x32
 8004b16:	4a87      	ldr	r2, [pc, #540]	; (8004d34 <UART_SetConfig+0x38c>)
 8004b18:	fba2 2303 	umull	r2, r3, r2, r3
 8004b1c:	095b      	lsrs	r3, r3, #5
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b24:	441e      	add	r6, r3
 8004b26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f04f 0100 	mov.w	r1, #0
 8004b2e:	4602      	mov	r2, r0
 8004b30:	460b      	mov	r3, r1
 8004b32:	1894      	adds	r4, r2, r2
 8004b34:	623c      	str	r4, [r7, #32]
 8004b36:	415b      	adcs	r3, r3
 8004b38:	627b      	str	r3, [r7, #36]	; 0x24
 8004b3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b3e:	1812      	adds	r2, r2, r0
 8004b40:	eb41 0303 	adc.w	r3, r1, r3
 8004b44:	f04f 0400 	mov.w	r4, #0
 8004b48:	f04f 0500 	mov.w	r5, #0
 8004b4c:	00dd      	lsls	r5, r3, #3
 8004b4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b52:	00d4      	lsls	r4, r2, #3
 8004b54:	4622      	mov	r2, r4
 8004b56:	462b      	mov	r3, r5
 8004b58:	1814      	adds	r4, r2, r0
 8004b5a:	653c      	str	r4, [r7, #80]	; 0x50
 8004b5c:	414b      	adcs	r3, r1
 8004b5e:	657b      	str	r3, [r7, #84]	; 0x54
 8004b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	461a      	mov	r2, r3
 8004b66:	f04f 0300 	mov.w	r3, #0
 8004b6a:	1891      	adds	r1, r2, r2
 8004b6c:	61b9      	str	r1, [r7, #24]
 8004b6e:	415b      	adcs	r3, r3
 8004b70:	61fb      	str	r3, [r7, #28]
 8004b72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b76:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004b7a:	f7fb ff7f 	bl	8000a7c <__aeabi_uldivmod>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	460b      	mov	r3, r1
 8004b82:	4b6c      	ldr	r3, [pc, #432]	; (8004d34 <UART_SetConfig+0x38c>)
 8004b84:	fba3 1302 	umull	r1, r3, r3, r2
 8004b88:	095b      	lsrs	r3, r3, #5
 8004b8a:	2164      	movs	r1, #100	; 0x64
 8004b8c:	fb01 f303 	mul.w	r3, r1, r3
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	00db      	lsls	r3, r3, #3
 8004b94:	3332      	adds	r3, #50	; 0x32
 8004b96:	4a67      	ldr	r2, [pc, #412]	; (8004d34 <UART_SetConfig+0x38c>)
 8004b98:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9c:	095b      	lsrs	r3, r3, #5
 8004b9e:	f003 0207 	and.w	r2, r3, #7
 8004ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4432      	add	r2, r6
 8004ba8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004baa:	e0b9      	b.n	8004d20 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bae:	461c      	mov	r4, r3
 8004bb0:	f04f 0500 	mov.w	r5, #0
 8004bb4:	4622      	mov	r2, r4
 8004bb6:	462b      	mov	r3, r5
 8004bb8:	1891      	adds	r1, r2, r2
 8004bba:	6139      	str	r1, [r7, #16]
 8004bbc:	415b      	adcs	r3, r3
 8004bbe:	617b      	str	r3, [r7, #20]
 8004bc0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004bc4:	1912      	adds	r2, r2, r4
 8004bc6:	eb45 0303 	adc.w	r3, r5, r3
 8004bca:	f04f 0000 	mov.w	r0, #0
 8004bce:	f04f 0100 	mov.w	r1, #0
 8004bd2:	00d9      	lsls	r1, r3, #3
 8004bd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004bd8:	00d0      	lsls	r0, r2, #3
 8004bda:	4602      	mov	r2, r0
 8004bdc:	460b      	mov	r3, r1
 8004bde:	eb12 0804 	adds.w	r8, r2, r4
 8004be2:	eb43 0905 	adc.w	r9, r3, r5
 8004be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f04f 0100 	mov.w	r1, #0
 8004bf0:	f04f 0200 	mov.w	r2, #0
 8004bf4:	f04f 0300 	mov.w	r3, #0
 8004bf8:	008b      	lsls	r3, r1, #2
 8004bfa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004bfe:	0082      	lsls	r2, r0, #2
 8004c00:	4640      	mov	r0, r8
 8004c02:	4649      	mov	r1, r9
 8004c04:	f7fb ff3a 	bl	8000a7c <__aeabi_uldivmod>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	4b49      	ldr	r3, [pc, #292]	; (8004d34 <UART_SetConfig+0x38c>)
 8004c0e:	fba3 2302 	umull	r2, r3, r3, r2
 8004c12:	095b      	lsrs	r3, r3, #5
 8004c14:	011e      	lsls	r6, r3, #4
 8004c16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f04f 0100 	mov.w	r1, #0
 8004c1e:	4602      	mov	r2, r0
 8004c20:	460b      	mov	r3, r1
 8004c22:	1894      	adds	r4, r2, r2
 8004c24:	60bc      	str	r4, [r7, #8]
 8004c26:	415b      	adcs	r3, r3
 8004c28:	60fb      	str	r3, [r7, #12]
 8004c2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c2e:	1812      	adds	r2, r2, r0
 8004c30:	eb41 0303 	adc.w	r3, r1, r3
 8004c34:	f04f 0400 	mov.w	r4, #0
 8004c38:	f04f 0500 	mov.w	r5, #0
 8004c3c:	00dd      	lsls	r5, r3, #3
 8004c3e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004c42:	00d4      	lsls	r4, r2, #3
 8004c44:	4622      	mov	r2, r4
 8004c46:	462b      	mov	r3, r5
 8004c48:	1814      	adds	r4, r2, r0
 8004c4a:	64bc      	str	r4, [r7, #72]	; 0x48
 8004c4c:	414b      	adcs	r3, r1
 8004c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	4618      	mov	r0, r3
 8004c56:	f04f 0100 	mov.w	r1, #0
 8004c5a:	f04f 0200 	mov.w	r2, #0
 8004c5e:	f04f 0300 	mov.w	r3, #0
 8004c62:	008b      	lsls	r3, r1, #2
 8004c64:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004c68:	0082      	lsls	r2, r0, #2
 8004c6a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004c6e:	f7fb ff05 	bl	8000a7c <__aeabi_uldivmod>
 8004c72:	4602      	mov	r2, r0
 8004c74:	460b      	mov	r3, r1
 8004c76:	4b2f      	ldr	r3, [pc, #188]	; (8004d34 <UART_SetConfig+0x38c>)
 8004c78:	fba3 1302 	umull	r1, r3, r3, r2
 8004c7c:	095b      	lsrs	r3, r3, #5
 8004c7e:	2164      	movs	r1, #100	; 0x64
 8004c80:	fb01 f303 	mul.w	r3, r1, r3
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	011b      	lsls	r3, r3, #4
 8004c88:	3332      	adds	r3, #50	; 0x32
 8004c8a:	4a2a      	ldr	r2, [pc, #168]	; (8004d34 <UART_SetConfig+0x38c>)
 8004c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c90:	095b      	lsrs	r3, r3, #5
 8004c92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c96:	441e      	add	r6, r3
 8004c98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f04f 0100 	mov.w	r1, #0
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	1894      	adds	r4, r2, r2
 8004ca6:	603c      	str	r4, [r7, #0]
 8004ca8:	415b      	adcs	r3, r3
 8004caa:	607b      	str	r3, [r7, #4]
 8004cac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cb0:	1812      	adds	r2, r2, r0
 8004cb2:	eb41 0303 	adc.w	r3, r1, r3
 8004cb6:	f04f 0400 	mov.w	r4, #0
 8004cba:	f04f 0500 	mov.w	r5, #0
 8004cbe:	00dd      	lsls	r5, r3, #3
 8004cc0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004cc4:	00d4      	lsls	r4, r2, #3
 8004cc6:	4622      	mov	r2, r4
 8004cc8:	462b      	mov	r3, r5
 8004cca:	eb12 0a00 	adds.w	sl, r2, r0
 8004cce:	eb43 0b01 	adc.w	fp, r3, r1
 8004cd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f04f 0100 	mov.w	r1, #0
 8004cdc:	f04f 0200 	mov.w	r2, #0
 8004ce0:	f04f 0300 	mov.w	r3, #0
 8004ce4:	008b      	lsls	r3, r1, #2
 8004ce6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004cea:	0082      	lsls	r2, r0, #2
 8004cec:	4650      	mov	r0, sl
 8004cee:	4659      	mov	r1, fp
 8004cf0:	f7fb fec4 	bl	8000a7c <__aeabi_uldivmod>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	4b0e      	ldr	r3, [pc, #56]	; (8004d34 <UART_SetConfig+0x38c>)
 8004cfa:	fba3 1302 	umull	r1, r3, r3, r2
 8004cfe:	095b      	lsrs	r3, r3, #5
 8004d00:	2164      	movs	r1, #100	; 0x64
 8004d02:	fb01 f303 	mul.w	r3, r1, r3
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	011b      	lsls	r3, r3, #4
 8004d0a:	3332      	adds	r3, #50	; 0x32
 8004d0c:	4a09      	ldr	r2, [pc, #36]	; (8004d34 <UART_SetConfig+0x38c>)
 8004d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d12:	095b      	lsrs	r3, r3, #5
 8004d14:	f003 020f 	and.w	r2, r3, #15
 8004d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4432      	add	r2, r6
 8004d1e:	609a      	str	r2, [r3, #8]
}
 8004d20:	bf00      	nop
 8004d22:	377c      	adds	r7, #124	; 0x7c
 8004d24:	46bd      	mov	sp, r7
 8004d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d2a:	bf00      	nop
 8004d2c:	40011000 	.word	0x40011000
 8004d30:	40011400 	.word	0x40011400
 8004d34:	51eb851f 	.word	0x51eb851f

08004d38 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004d3c:	4904      	ldr	r1, [pc, #16]	; (8004d50 <MX_FATFS_Init+0x18>)
 8004d3e:	4805      	ldr	r0, [pc, #20]	; (8004d54 <MX_FATFS_Init+0x1c>)
 8004d40:	f001 fec4 	bl	8006acc <FATFS_LinkDriver>
 8004d44:	4603      	mov	r3, r0
 8004d46:	461a      	mov	r2, r3
 8004d48:	4b03      	ldr	r3, [pc, #12]	; (8004d58 <MX_FATFS_Init+0x20>)
 8004d4a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004d4c:	bf00      	nop
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	20002300 	.word	0x20002300
 8004d54:	20000010 	.word	0x20000010
 8004d58:	20002304 	.word	0x20002304

08004d5c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	4603      	mov	r3, r0
 8004d64:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8004d66:	4b06      	ldr	r3, [pc, #24]	; (8004d80 <USER_initialize+0x24>)
 8004d68:	2201      	movs	r2, #1
 8004d6a:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004d6c:	4b04      	ldr	r3, [pc, #16]	; (8004d80 <USER_initialize+0x24>)
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	2000000d 	.word	0x2000000d

08004d84 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8004d8e:	4b06      	ldr	r3, [pc, #24]	; (8004da8 <USER_status+0x24>)
 8004d90:	2201      	movs	r2, #1
 8004d92:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004d94:	4b04      	ldr	r3, [pc, #16]	; (8004da8 <USER_status+0x24>)
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	370c      	adds	r7, #12
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	2000000d 	.word	0x2000000d

08004dac <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60b9      	str	r1, [r7, #8]
 8004db4:	607a      	str	r2, [r7, #4]
 8004db6:	603b      	str	r3, [r7, #0]
 8004db8:	4603      	mov	r3, r0
 8004dba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8004dbc:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3714      	adds	r7, #20
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr

08004dca <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b085      	sub	sp, #20
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
 8004dd4:	603b      	str	r3, [r7, #0]
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8004dda:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3714      	adds	r7, #20
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	4603      	mov	r3, r0
 8004df0:	603a      	str	r2, [r7, #0]
 8004df2:	71fb      	strb	r3, [r7, #7]
 8004df4:	460b      	mov	r3, r1
 8004df6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	73fb      	strb	r3, [r7, #15]
    return res;
 8004dfc:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
	...

08004e0c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	4603      	mov	r3, r0
 8004e14:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = SPI_Flash_Driver.disk_status();
 8004e16:	4b05      	ldr	r3, [pc, #20]	; (8004e2c <disk_status+0x20>)
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	4798      	blx	r3
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	73fb      	strb	r3, [r7, #15]
//  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
  return stat;
 8004e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	08007f90 	.word	0x08007f90

08004e30 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	4603      	mov	r3, r0
 8004e38:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	73fb      	strb	r3, [r7, #15]
//  if(disk.is_initialized[pdrv] == 0)
//  {
//    disk.is_initialized[pdrv] = 1;
//    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
//  }
  stat = SPI_Flash_Driver.disk_initialize();
 8004e3e:	4b05      	ldr	r3, [pc, #20]	; (8004e54 <disk_initialize+0x24>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4798      	blx	r3
 8004e44:	4603      	mov	r3, r0
 8004e46:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	08007f90 	.word	0x08007f90

08004e58 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60b9      	str	r1, [r7, #8]
 8004e60:	607a      	str	r2, [r7, #4]
 8004e62:	603b      	str	r3, [r7, #0]
 8004e64:	4603      	mov	r3, r0
 8004e66:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = SPI_Flash_Driver.disk_read(buff, sector, count);
 8004e68:	4b06      	ldr	r3, [pc, #24]	; (8004e84 <disk_read+0x2c>)
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	683a      	ldr	r2, [r7, #0]
 8004e6e:	6879      	ldr	r1, [r7, #4]
 8004e70:	68b8      	ldr	r0, [r7, #8]
 8004e72:	4798      	blx	r3
 8004e74:	4603      	mov	r3, r0
 8004e76:	75fb      	strb	r3, [r7, #23]
//  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
  return res;
 8004e78:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3718      	adds	r7, #24
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	08007f90 	.word	0x08007f90

08004e88 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60b9      	str	r1, [r7, #8]
 8004e90:	607a      	str	r2, [r7, #4]
 8004e92:	603b      	str	r3, [r7, #0]
 8004e94:	4603      	mov	r3, r0
 8004e96:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = SPI_Flash_Driver.disk_write(buff, sector, count);
 8004e98:	4b06      	ldr	r3, [pc, #24]	; (8004eb4 <disk_write+0x2c>)
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	683a      	ldr	r2, [r7, #0]
 8004e9e:	6879      	ldr	r1, [r7, #4]
 8004ea0:	68b8      	ldr	r0, [r7, #8]
 8004ea2:	4798      	blx	r3
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	75fb      	strb	r3, [r7, #23]
//  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
  return res;
 8004ea8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3718      	adds	r7, #24
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	08007f90 	.word	0x08007f90

08004eb8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	603a      	str	r2, [r7, #0]
 8004ec2:	71fb      	strb	r3, [r7, #7]
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = SPI_Flash_Driver.disk_ioctl(cmd, buff);
 8004ec8:	4b06      	ldr	r3, [pc, #24]	; (8004ee4 <disk_ioctl+0x2c>)
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	79ba      	ldrb	r2, [r7, #6]
 8004ece:	6839      	ldr	r1, [r7, #0]
 8004ed0:	4610      	mov	r0, r2
 8004ed2:	4798      	blx	r3
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	73fb      	strb	r3, [r7, #15]
//  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
  return res;
 8004ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	08007f90 	.word	0x08007f90

08004ee8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004ef8:	89fb      	ldrh	r3, [r7, #14]
 8004efa:	021b      	lsls	r3, r3, #8
 8004efc:	b21a      	sxth	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	b21b      	sxth	r3, r3
 8004f04:	4313      	orrs	r3, r2
 8004f06:	b21b      	sxth	r3, r3
 8004f08:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004f0a:	89fb      	ldrh	r3, [r7, #14]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3714      	adds	r7, #20
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	3303      	adds	r3, #3
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	021b      	lsls	r3, r3, #8
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	3202      	adds	r2, #2
 8004f30:	7812      	ldrb	r2, [r2, #0]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	021b      	lsls	r3, r3, #8
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	3201      	adds	r2, #1
 8004f3e:	7812      	ldrb	r2, [r2, #0]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	021b      	lsls	r3, r3, #8
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	7812      	ldrb	r2, [r2, #0]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	60fb      	str	r3, [r7, #12]
	return rv;
 8004f50:	68fb      	ldr	r3, [r7, #12]
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3714      	adds	r7, #20
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b083      	sub	sp, #12
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
 8004f66:	460b      	mov	r3, r1
 8004f68:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	1c5a      	adds	r2, r3, #1
 8004f6e:	607a      	str	r2, [r7, #4]
 8004f70:	887a      	ldrh	r2, [r7, #2]
 8004f72:	b2d2      	uxtb	r2, r2
 8004f74:	701a      	strb	r2, [r3, #0]
 8004f76:	887b      	ldrh	r3, [r7, #2]
 8004f78:	0a1b      	lsrs	r3, r3, #8
 8004f7a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	1c5a      	adds	r2, r3, #1
 8004f80:	607a      	str	r2, [r7, #4]
 8004f82:	887a      	ldrh	r2, [r7, #2]
 8004f84:	b2d2      	uxtb	r2, r2
 8004f86:	701a      	strb	r2, [r3, #0]
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	1c5a      	adds	r2, r3, #1
 8004fa2:	607a      	str	r2, [r7, #4]
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	b2d2      	uxtb	r2, r2
 8004fa8:	701a      	strb	r2, [r3, #0]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	0a1b      	lsrs	r3, r3, #8
 8004fae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	1c5a      	adds	r2, r3, #1
 8004fb4:	607a      	str	r2, [r7, #4]
 8004fb6:	683a      	ldr	r2, [r7, #0]
 8004fb8:	b2d2      	uxtb	r2, r2
 8004fba:	701a      	strb	r2, [r3, #0]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	0a1b      	lsrs	r3, r3, #8
 8004fc0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	1c5a      	adds	r2, r3, #1
 8004fc6:	607a      	str	r2, [r7, #4]
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	b2d2      	uxtb	r2, r2
 8004fcc:	701a      	strb	r2, [r3, #0]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	0a1b      	lsrs	r3, r3, #8
 8004fd2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	1c5a      	adds	r2, r3, #1
 8004fd8:	607a      	str	r2, [r7, #4]
 8004fda:	683a      	ldr	r2, [r7, #0]
 8004fdc:	b2d2      	uxtb	r2, r2
 8004fde:	701a      	strb	r2, [r3, #0]
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004fec:	b480      	push	{r7}
 8004fee:	b087      	sub	sp, #28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	1c5a      	adds	r2, r3, #1
 8005000:	617a      	str	r2, [r7, #20]
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	b2d2      	uxtb	r2, r2
 8005006:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	3b01      	subs	r3, #1
 800500c:	607b      	str	r3, [r7, #4]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1f3      	bne.n	8004ffc <mem_set+0x10>
}
 8005014:	bf00      	nop
 8005016:	bf00      	nop
 8005018:	371c      	adds	r7, #28
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr

08005022 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005022:	b480      	push	{r7}
 8005024:	b089      	sub	sp, #36	; 0x24
 8005026:	af00      	add	r7, sp, #0
 8005028:	60f8      	str	r0, [r7, #12]
 800502a:	60b9      	str	r1, [r7, #8]
 800502c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	61fb      	str	r3, [r7, #28]
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005036:	2300      	movs	r3, #0
 8005038:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	1c5a      	adds	r2, r3, #1
 800503e:	61fa      	str	r2, [r7, #28]
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	4619      	mov	r1, r3
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	1c5a      	adds	r2, r3, #1
 8005048:	61ba      	str	r2, [r7, #24]
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	1acb      	subs	r3, r1, r3
 800504e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	3b01      	subs	r3, #1
 8005054:	607b      	str	r3, [r7, #4]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d002      	beq.n	8005062 <mem_cmp+0x40>
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d0eb      	beq.n	800503a <mem_cmp+0x18>

	return r;
 8005062:	697b      	ldr	r3, [r7, #20]
}
 8005064:	4618      	mov	r0, r3
 8005066:	3724      	adds	r7, #36	; 0x24
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800507a:	e002      	b.n	8005082 <chk_chr+0x12>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	3301      	adds	r3, #1
 8005080:	607b      	str	r3, [r7, #4]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d005      	beq.n	8005096 <chk_chr+0x26>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	461a      	mov	r2, r3
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	4293      	cmp	r3, r2
 8005094:	d1f2      	bne.n	800507c <chk_chr+0xc>
	return *str;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	781b      	ldrb	r3, [r3, #0]
}
 800509a:	4618      	mov	r0, r3
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
	...

080050a8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80050b2:	2300      	movs	r3, #0
 80050b4:	60fb      	str	r3, [r7, #12]
 80050b6:	e01f      	b.n	80050f8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80050b8:	4a41      	ldr	r2, [pc, #260]	; (80051c0 <inc_lock+0x118>)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	011b      	lsls	r3, r3, #4
 80050be:	4413      	add	r3, r2
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d113      	bne.n	80050f2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80050ca:	4a3d      	ldr	r2, [pc, #244]	; (80051c0 <inc_lock+0x118>)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	011b      	lsls	r3, r3, #4
 80050d0:	4413      	add	r3, r2
 80050d2:	3304      	adds	r3, #4
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80050da:	429a      	cmp	r2, r3
 80050dc:	d109      	bne.n	80050f2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80050de:	4a38      	ldr	r2, [pc, #224]	; (80051c0 <inc_lock+0x118>)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	011b      	lsls	r3, r3, #4
 80050e4:	4413      	add	r3, r2
 80050e6:	3308      	adds	r3, #8
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d006      	beq.n	8005100 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	3301      	adds	r3, #1
 80050f6:	60fb      	str	r3, [r7, #12]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d9dc      	bls.n	80050b8 <inc_lock+0x10>
 80050fe:	e000      	b.n	8005102 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005100:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2b02      	cmp	r3, #2
 8005106:	d132      	bne.n	800516e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005108:	2300      	movs	r3, #0
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	e002      	b.n	8005114 <inc_lock+0x6c>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	3301      	adds	r3, #1
 8005112:	60fb      	str	r3, [r7, #12]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d806      	bhi.n	8005128 <inc_lock+0x80>
 800511a:	4a29      	ldr	r2, [pc, #164]	; (80051c0 <inc_lock+0x118>)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	011b      	lsls	r3, r3, #4
 8005120:	4413      	add	r3, r2
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1f2      	bne.n	800510e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2b02      	cmp	r3, #2
 800512c:	d101      	bne.n	8005132 <inc_lock+0x8a>
 800512e:	2300      	movs	r3, #0
 8005130:	e040      	b.n	80051b4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	4922      	ldr	r1, [pc, #136]	; (80051c0 <inc_lock+0x118>)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	011b      	lsls	r3, r3, #4
 800513c:	440b      	add	r3, r1
 800513e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689a      	ldr	r2, [r3, #8]
 8005144:	491e      	ldr	r1, [pc, #120]	; (80051c0 <inc_lock+0x118>)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	011b      	lsls	r3, r3, #4
 800514a:	440b      	add	r3, r1
 800514c:	3304      	adds	r3, #4
 800514e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	695a      	ldr	r2, [r3, #20]
 8005154:	491a      	ldr	r1, [pc, #104]	; (80051c0 <inc_lock+0x118>)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	011b      	lsls	r3, r3, #4
 800515a:	440b      	add	r3, r1
 800515c:	3308      	adds	r3, #8
 800515e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005160:	4a17      	ldr	r2, [pc, #92]	; (80051c0 <inc_lock+0x118>)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	011b      	lsls	r3, r3, #4
 8005166:	4413      	add	r3, r2
 8005168:	330c      	adds	r3, #12
 800516a:	2200      	movs	r2, #0
 800516c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d009      	beq.n	8005188 <inc_lock+0xe0>
 8005174:	4a12      	ldr	r2, [pc, #72]	; (80051c0 <inc_lock+0x118>)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	011b      	lsls	r3, r3, #4
 800517a:	4413      	add	r3, r2
 800517c:	330c      	adds	r3, #12
 800517e:	881b      	ldrh	r3, [r3, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d001      	beq.n	8005188 <inc_lock+0xe0>
 8005184:	2300      	movs	r3, #0
 8005186:	e015      	b.n	80051b4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d108      	bne.n	80051a0 <inc_lock+0xf8>
 800518e:	4a0c      	ldr	r2, [pc, #48]	; (80051c0 <inc_lock+0x118>)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	011b      	lsls	r3, r3, #4
 8005194:	4413      	add	r3, r2
 8005196:	330c      	adds	r3, #12
 8005198:	881b      	ldrh	r3, [r3, #0]
 800519a:	3301      	adds	r3, #1
 800519c:	b29a      	uxth	r2, r3
 800519e:	e001      	b.n	80051a4 <inc_lock+0xfc>
 80051a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051a4:	4906      	ldr	r1, [pc, #24]	; (80051c0 <inc_lock+0x118>)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	011b      	lsls	r3, r3, #4
 80051aa:	440b      	add	r3, r1
 80051ac:	330c      	adds	r3, #12
 80051ae:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	3301      	adds	r3, #1
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3714      	adds	r7, #20
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	200000d4 	.word	0x200000d4

080051c4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	3b01      	subs	r3, #1
 80051d0:	607b      	str	r3, [r7, #4]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d825      	bhi.n	8005224 <dec_lock+0x60>
		n = Files[i].ctr;
 80051d8:	4a17      	ldr	r2, [pc, #92]	; (8005238 <dec_lock+0x74>)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	011b      	lsls	r3, r3, #4
 80051de:	4413      	add	r3, r2
 80051e0:	330c      	adds	r3, #12
 80051e2:	881b      	ldrh	r3, [r3, #0]
 80051e4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80051e6:	89fb      	ldrh	r3, [r7, #14]
 80051e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051ec:	d101      	bne.n	80051f2 <dec_lock+0x2e>
 80051ee:	2300      	movs	r3, #0
 80051f0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80051f2:	89fb      	ldrh	r3, [r7, #14]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d002      	beq.n	80051fe <dec_lock+0x3a>
 80051f8:	89fb      	ldrh	r3, [r7, #14]
 80051fa:	3b01      	subs	r3, #1
 80051fc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80051fe:	4a0e      	ldr	r2, [pc, #56]	; (8005238 <dec_lock+0x74>)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	011b      	lsls	r3, r3, #4
 8005204:	4413      	add	r3, r2
 8005206:	330c      	adds	r3, #12
 8005208:	89fa      	ldrh	r2, [r7, #14]
 800520a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800520c:	89fb      	ldrh	r3, [r7, #14]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d105      	bne.n	800521e <dec_lock+0x5a>
 8005212:	4a09      	ldr	r2, [pc, #36]	; (8005238 <dec_lock+0x74>)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	011b      	lsls	r3, r3, #4
 8005218:	4413      	add	r3, r2
 800521a:	2200      	movs	r2, #0
 800521c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800521e:	2300      	movs	r3, #0
 8005220:	737b      	strb	r3, [r7, #13]
 8005222:	e001      	b.n	8005228 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005224:	2302      	movs	r3, #2
 8005226:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005228:	7b7b      	ldrb	r3, [r7, #13]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3714      	adds	r7, #20
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	200000d4 	.word	0x200000d4

0800523c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005244:	2300      	movs	r3, #0
 8005246:	60fb      	str	r3, [r7, #12]
 8005248:	e010      	b.n	800526c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800524a:	4a0d      	ldr	r2, [pc, #52]	; (8005280 <clear_lock+0x44>)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	011b      	lsls	r3, r3, #4
 8005250:	4413      	add	r3, r2
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	429a      	cmp	r2, r3
 8005258:	d105      	bne.n	8005266 <clear_lock+0x2a>
 800525a:	4a09      	ldr	r2, [pc, #36]	; (8005280 <clear_lock+0x44>)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	011b      	lsls	r3, r3, #4
 8005260:	4413      	add	r3, r2
 8005262:	2200      	movs	r2, #0
 8005264:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	3301      	adds	r3, #1
 800526a:	60fb      	str	r3, [r7, #12]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2b01      	cmp	r3, #1
 8005270:	d9eb      	bls.n	800524a <clear_lock+0xe>
	}
}
 8005272:	bf00      	nop
 8005274:	bf00      	nop
 8005276:	3714      	adds	r7, #20
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr
 8005280:	200000d4 	.word	0x200000d4

08005284 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b086      	sub	sp, #24
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800528c:	2300      	movs	r3, #0
 800528e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	78db      	ldrb	r3, [r3, #3]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d034      	beq.n	8005302 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	7858      	ldrb	r0, [r3, #1]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80052a8:	2301      	movs	r3, #1
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	f7ff fdec 	bl	8004e88 <disk_write>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d002      	beq.n	80052bc <sync_window+0x38>
			res = FR_DISK_ERR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	73fb      	strb	r3, [r7, #15]
 80052ba:	e022      	b.n	8005302 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	1ad2      	subs	r2, r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d217      	bcs.n	8005302 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	789b      	ldrb	r3, [r3, #2]
 80052d6:	613b      	str	r3, [r7, #16]
 80052d8:	e010      	b.n	80052fc <sync_window+0x78>
					wsect += fs->fsize;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	4413      	add	r3, r2
 80052e2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	7858      	ldrb	r0, [r3, #1]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80052ee:	2301      	movs	r3, #1
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	f7ff fdc9 	bl	8004e88 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	3b01      	subs	r3, #1
 80052fa:	613b      	str	r3, [r7, #16]
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d8eb      	bhi.n	80052da <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005302:	7bfb      	ldrb	r3, [r7, #15]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3718      	adds	r7, #24
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005316:	2300      	movs	r3, #0
 8005318:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531e:	683a      	ldr	r2, [r7, #0]
 8005320:	429a      	cmp	r2, r3
 8005322:	d01b      	beq.n	800535c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f7ff ffad 	bl	8005284 <sync_window>
 800532a:	4603      	mov	r3, r0
 800532c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800532e:	7bfb      	ldrb	r3, [r7, #15]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d113      	bne.n	800535c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	7858      	ldrb	r0, [r3, #1]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800533e:	2301      	movs	r3, #1
 8005340:	683a      	ldr	r2, [r7, #0]
 8005342:	f7ff fd89 	bl	8004e58 <disk_read>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d004      	beq.n	8005356 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800534c:	f04f 33ff 	mov.w	r3, #4294967295
 8005350:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005352:	2301      	movs	r3, #1
 8005354:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	683a      	ldr	r2, [r7, #0]
 800535a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800535c:	7bfb      	ldrb	r3, [r7, #15]
}
 800535e:	4618      	mov	r0, r3
 8005360:	3710      	adds	r7, #16
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}

08005366 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005366:	b480      	push	{r7}
 8005368:	b083      	sub	sp, #12
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
 800536e:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	3b02      	subs	r3, #2
 8005374:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	3b02      	subs	r3, #2
 800537c:	683a      	ldr	r2, [r7, #0]
 800537e:	429a      	cmp	r2, r3
 8005380:	d301      	bcc.n	8005386 <clust2sect+0x20>
 8005382:	2300      	movs	r3, #0
 8005384:	e008      	b.n	8005398 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	895b      	ldrh	r3, [r3, #10]
 800538a:	461a      	mov	r2, r3
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	fb03 f202 	mul.w	r2, r3, r2
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005396:	4413      	add	r3, r2
}
 8005398:	4618      	mov	r0, r3
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b086      	sub	sp, #24
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d904      	bls.n	80053c4 <get_fat+0x20>
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	683a      	ldr	r2, [r7, #0]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d302      	bcc.n	80053ca <get_fat+0x26>
		val = 1;	/* Internal error */
 80053c4:	2301      	movs	r3, #1
 80053c6:	617b      	str	r3, [r7, #20]
 80053c8:	e0bb      	b.n	8005542 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80053ca:	f04f 33ff 	mov.w	r3, #4294967295
 80053ce:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	2b03      	cmp	r3, #3
 80053d6:	f000 8083 	beq.w	80054e0 <get_fat+0x13c>
 80053da:	2b03      	cmp	r3, #3
 80053dc:	f300 80a7 	bgt.w	800552e <get_fat+0x18a>
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d002      	beq.n	80053ea <get_fat+0x46>
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d056      	beq.n	8005496 <get_fat+0xf2>
 80053e8:	e0a1      	b.n	800552e <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	60fb      	str	r3, [r7, #12]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	085b      	lsrs	r3, r3, #1
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	4413      	add	r3, r2
 80053f6:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	899b      	ldrh	r3, [r3, #12]
 8005400:	4619      	mov	r1, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	fbb3 f3f1 	udiv	r3, r3, r1
 8005408:	4413      	add	r3, r2
 800540a:	4619      	mov	r1, r3
 800540c:	6938      	ldr	r0, [r7, #16]
 800540e:	f7ff ff7d 	bl	800530c <move_window>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	f040 808d 	bne.w	8005534 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	1c5a      	adds	r2, r3, #1
 800541e:	60fa      	str	r2, [r7, #12]
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	8992      	ldrh	r2, [r2, #12]
 8005424:	fbb3 f1f2 	udiv	r1, r3, r2
 8005428:	fb02 f201 	mul.w	r2, r2, r1
 800542c:	1a9b      	subs	r3, r3, r2
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	4413      	add	r3, r2
 8005432:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005436:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	899b      	ldrh	r3, [r3, #12]
 8005440:	4619      	mov	r1, r3
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	fbb3 f3f1 	udiv	r3, r3, r1
 8005448:	4413      	add	r3, r2
 800544a:	4619      	mov	r1, r3
 800544c:	6938      	ldr	r0, [r7, #16]
 800544e:	f7ff ff5d 	bl	800530c <move_window>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d16f      	bne.n	8005538 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	899b      	ldrh	r3, [r3, #12]
 800545c:	461a      	mov	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	fbb3 f1f2 	udiv	r1, r3, r2
 8005464:	fb02 f201 	mul.w	r2, r2, r1
 8005468:	1a9b      	subs	r3, r3, r2
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	4413      	add	r3, r2
 800546e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005472:	021b      	lsls	r3, r3, #8
 8005474:	461a      	mov	r2, r3
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	4313      	orrs	r3, r2
 800547a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	2b00      	cmp	r3, #0
 8005484:	d002      	beq.n	800548c <get_fat+0xe8>
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	091b      	lsrs	r3, r3, #4
 800548a:	e002      	b.n	8005492 <get_fat+0xee>
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005492:	617b      	str	r3, [r7, #20]
			break;
 8005494:	e055      	b.n	8005542 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	899b      	ldrh	r3, [r3, #12]
 800549e:	085b      	lsrs	r3, r3, #1
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	4619      	mov	r1, r3
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80054aa:	4413      	add	r3, r2
 80054ac:	4619      	mov	r1, r3
 80054ae:	6938      	ldr	r0, [r7, #16]
 80054b0:	f7ff ff2c 	bl	800530c <move_window>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d140      	bne.n	800553c <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	005b      	lsls	r3, r3, #1
 80054c4:	693a      	ldr	r2, [r7, #16]
 80054c6:	8992      	ldrh	r2, [r2, #12]
 80054c8:	fbb3 f0f2 	udiv	r0, r3, r2
 80054cc:	fb02 f200 	mul.w	r2, r2, r0
 80054d0:	1a9b      	subs	r3, r3, r2
 80054d2:	440b      	add	r3, r1
 80054d4:	4618      	mov	r0, r3
 80054d6:	f7ff fd07 	bl	8004ee8 <ld_word>
 80054da:	4603      	mov	r3, r0
 80054dc:	617b      	str	r3, [r7, #20]
			break;
 80054de:	e030      	b.n	8005542 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	899b      	ldrh	r3, [r3, #12]
 80054e8:	089b      	lsrs	r3, r3, #2
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	4619      	mov	r1, r3
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80054f4:	4413      	add	r3, r2
 80054f6:	4619      	mov	r1, r3
 80054f8:	6938      	ldr	r0, [r7, #16]
 80054fa:	f7ff ff07 	bl	800530c <move_window>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d11d      	bne.n	8005540 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	8992      	ldrh	r2, [r2, #12]
 8005512:	fbb3 f0f2 	udiv	r0, r3, r2
 8005516:	fb02 f200 	mul.w	r2, r2, r0
 800551a:	1a9b      	subs	r3, r3, r2
 800551c:	440b      	add	r3, r1
 800551e:	4618      	mov	r0, r3
 8005520:	f7ff fcfa 	bl	8004f18 <ld_dword>
 8005524:	4603      	mov	r3, r0
 8005526:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800552a:	617b      	str	r3, [r7, #20]
			break;
 800552c:	e009      	b.n	8005542 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800552e:	2301      	movs	r3, #1
 8005530:	617b      	str	r3, [r7, #20]
 8005532:	e006      	b.n	8005542 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005534:	bf00      	nop
 8005536:	e004      	b.n	8005542 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005538:	bf00      	nop
 800553a:	e002      	b.n	8005542 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800553c:	bf00      	nop
 800553e:	e000      	b.n	8005542 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005540:	bf00      	nop
		}
	}

	return val;
 8005542:	697b      	ldr	r3, [r7, #20]
}
 8005544:	4618      	mov	r0, r3
 8005546:	3718      	adds	r7, #24
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800554c:	b590      	push	{r4, r7, lr}
 800554e:	b089      	sub	sp, #36	; 0x24
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005558:	2302      	movs	r3, #2
 800555a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	2b01      	cmp	r3, #1
 8005560:	f240 8102 	bls.w	8005768 <put_fat+0x21c>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	68ba      	ldr	r2, [r7, #8]
 800556a:	429a      	cmp	r2, r3
 800556c:	f080 80fc 	bcs.w	8005768 <put_fat+0x21c>
		switch (fs->fs_type) {
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	2b03      	cmp	r3, #3
 8005576:	f000 80b6 	beq.w	80056e6 <put_fat+0x19a>
 800557a:	2b03      	cmp	r3, #3
 800557c:	f300 80fd 	bgt.w	800577a <put_fat+0x22e>
 8005580:	2b01      	cmp	r3, #1
 8005582:	d003      	beq.n	800558c <put_fat+0x40>
 8005584:	2b02      	cmp	r3, #2
 8005586:	f000 8083 	beq.w	8005690 <put_fat+0x144>
 800558a:	e0f6      	b.n	800577a <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	61bb      	str	r3, [r7, #24]
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	085b      	lsrs	r3, r3, #1
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	4413      	add	r3, r2
 8005598:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	899b      	ldrh	r3, [r3, #12]
 80055a2:	4619      	mov	r1, r3
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80055aa:	4413      	add	r3, r2
 80055ac:	4619      	mov	r1, r3
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f7ff feac 	bl	800530c <move_window>
 80055b4:	4603      	mov	r3, r0
 80055b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80055b8:	7ffb      	ldrb	r3, [r7, #31]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	f040 80d6 	bne.w	800576c <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	1c5a      	adds	r2, r3, #1
 80055ca:	61ba      	str	r2, [r7, #24]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	8992      	ldrh	r2, [r2, #12]
 80055d0:	fbb3 f0f2 	udiv	r0, r3, r2
 80055d4:	fb02 f200 	mul.w	r2, r2, r0
 80055d8:	1a9b      	subs	r3, r3, r2
 80055da:	440b      	add	r3, r1
 80055dc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00d      	beq.n	8005604 <put_fat+0xb8>
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	b25b      	sxtb	r3, r3
 80055ee:	f003 030f 	and.w	r3, r3, #15
 80055f2:	b25a      	sxtb	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	011b      	lsls	r3, r3, #4
 80055fa:	b25b      	sxtb	r3, r3
 80055fc:	4313      	orrs	r3, r2
 80055fe:	b25b      	sxtb	r3, r3
 8005600:	b2db      	uxtb	r3, r3
 8005602:	e001      	b.n	8005608 <put_fat+0xbc>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	b2db      	uxtb	r3, r3
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2201      	movs	r2, #1
 8005610:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	899b      	ldrh	r3, [r3, #12]
 800561a:	4619      	mov	r1, r3
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005622:	4413      	add	r3, r2
 8005624:	4619      	mov	r1, r3
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f7ff fe70 	bl	800530c <move_window>
 800562c:	4603      	mov	r3, r0
 800562e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005630:	7ffb      	ldrb	r3, [r7, #31]
 8005632:	2b00      	cmp	r3, #0
 8005634:	f040 809c 	bne.w	8005770 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	899b      	ldrh	r3, [r3, #12]
 8005642:	461a      	mov	r2, r3
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	fbb3 f0f2 	udiv	r0, r3, r2
 800564a:	fb02 f200 	mul.w	r2, r2, r0
 800564e:	1a9b      	subs	r3, r3, r2
 8005650:	440b      	add	r3, r1
 8005652:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	2b00      	cmp	r3, #0
 800565c:	d003      	beq.n	8005666 <put_fat+0x11a>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	091b      	lsrs	r3, r3, #4
 8005662:	b2db      	uxtb	r3, r3
 8005664:	e00e      	b.n	8005684 <put_fat+0x138>
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	b25b      	sxtb	r3, r3
 800566c:	f023 030f 	bic.w	r3, r3, #15
 8005670:	b25a      	sxtb	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	0a1b      	lsrs	r3, r3, #8
 8005676:	b25b      	sxtb	r3, r3
 8005678:	f003 030f 	and.w	r3, r3, #15
 800567c:	b25b      	sxtb	r3, r3
 800567e:	4313      	orrs	r3, r2
 8005680:	b25b      	sxtb	r3, r3
 8005682:	b2db      	uxtb	r3, r3
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2201      	movs	r2, #1
 800568c:	70da      	strb	r2, [r3, #3]
			break;
 800568e:	e074      	b.n	800577a <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	899b      	ldrh	r3, [r3, #12]
 8005698:	085b      	lsrs	r3, r3, #1
 800569a:	b29b      	uxth	r3, r3
 800569c:	4619      	mov	r1, r3
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80056a4:	4413      	add	r3, r2
 80056a6:	4619      	mov	r1, r3
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f7ff fe2f 	bl	800530c <move_window>
 80056ae:	4603      	mov	r3, r0
 80056b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80056b2:	7ffb      	ldrb	r3, [r7, #31]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d15d      	bne.n	8005774 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	005b      	lsls	r3, r3, #1
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	8992      	ldrh	r2, [r2, #12]
 80056c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80056ca:	fb02 f200 	mul.w	r2, r2, r0
 80056ce:	1a9b      	subs	r3, r3, r2
 80056d0:	440b      	add	r3, r1
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	b292      	uxth	r2, r2
 80056d6:	4611      	mov	r1, r2
 80056d8:	4618      	mov	r0, r3
 80056da:	f7ff fc40 	bl	8004f5e <st_word>
			fs->wflag = 1;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2201      	movs	r2, #1
 80056e2:	70da      	strb	r2, [r3, #3]
			break;
 80056e4:	e049      	b.n	800577a <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	899b      	ldrh	r3, [r3, #12]
 80056ee:	089b      	lsrs	r3, r3, #2
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	4619      	mov	r1, r3
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80056fa:	4413      	add	r3, r2
 80056fc:	4619      	mov	r1, r3
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f7ff fe04 	bl	800530c <move_window>
 8005704:	4603      	mov	r3, r0
 8005706:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005708:	7ffb      	ldrb	r3, [r7, #31]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d134      	bne.n	8005778 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	8992      	ldrh	r2, [r2, #12]
 8005722:	fbb3 f0f2 	udiv	r0, r3, r2
 8005726:	fb02 f200 	mul.w	r2, r2, r0
 800572a:	1a9b      	subs	r3, r3, r2
 800572c:	440b      	add	r3, r1
 800572e:	4618      	mov	r0, r3
 8005730:	f7ff fbf2 	bl	8004f18 <ld_dword>
 8005734:	4603      	mov	r3, r0
 8005736:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800573a:	4323      	orrs	r3, r4
 800573c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	8992      	ldrh	r2, [r2, #12]
 800574c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005750:	fb02 f200 	mul.w	r2, r2, r0
 8005754:	1a9b      	subs	r3, r3, r2
 8005756:	440b      	add	r3, r1
 8005758:	6879      	ldr	r1, [r7, #4]
 800575a:	4618      	mov	r0, r3
 800575c:	f7ff fc1a 	bl	8004f94 <st_dword>
			fs->wflag = 1;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2201      	movs	r2, #1
 8005764:	70da      	strb	r2, [r3, #3]
			break;
 8005766:	e008      	b.n	800577a <put_fat+0x22e>
		}
	}
 8005768:	bf00      	nop
 800576a:	e006      	b.n	800577a <put_fat+0x22e>
			if (res != FR_OK) break;
 800576c:	bf00      	nop
 800576e:	e004      	b.n	800577a <put_fat+0x22e>
			if (res != FR_OK) break;
 8005770:	bf00      	nop
 8005772:	e002      	b.n	800577a <put_fat+0x22e>
			if (res != FR_OK) break;
 8005774:	bf00      	nop
 8005776:	e000      	b.n	800577a <put_fat+0x22e>
			if (res != FR_OK) break;
 8005778:	bf00      	nop
	return res;
 800577a:	7ffb      	ldrb	r3, [r7, #31]
}
 800577c:	4618      	mov	r0, r3
 800577e:	3724      	adds	r7, #36	; 0x24
 8005780:	46bd      	mov	sp, r7
 8005782:	bd90      	pop	{r4, r7, pc}

08005784 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b088      	sub	sp, #32
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10d      	bne.n	80057b6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d004      	beq.n	80057b0 <create_chain+0x2c>
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d31b      	bcc.n	80057e8 <create_chain+0x64>
 80057b0:	2301      	movs	r3, #1
 80057b2:	61bb      	str	r3, [r7, #24]
 80057b4:	e018      	b.n	80057e8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80057b6:	6839      	ldr	r1, [r7, #0]
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f7ff fdf3 	bl	80053a4 <get_fat>
 80057be:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d801      	bhi.n	80057ca <create_chain+0x46>
 80057c6:	2301      	movs	r3, #1
 80057c8:	e070      	b.n	80058ac <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d0:	d101      	bne.n	80057d6 <create_chain+0x52>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	e06a      	b.n	80058ac <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d201      	bcs.n	80057e4 <create_chain+0x60>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	e063      	b.n	80058ac <create_chain+0x128>
		scl = clst;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	3301      	adds	r3, #1
 80057f0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	69fa      	ldr	r2, [r7, #28]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d307      	bcc.n	800580c <create_chain+0x88>
				ncl = 2;
 80057fc:	2302      	movs	r3, #2
 80057fe:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005800:	69fa      	ldr	r2, [r7, #28]
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	429a      	cmp	r2, r3
 8005806:	d901      	bls.n	800580c <create_chain+0x88>
 8005808:	2300      	movs	r3, #0
 800580a:	e04f      	b.n	80058ac <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800580c:	69f9      	ldr	r1, [r7, #28]
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f7ff fdc8 	bl	80053a4 <get_fat>
 8005814:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00e      	beq.n	800583a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d003      	beq.n	800582a <create_chain+0xa6>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005828:	d101      	bne.n	800582e <create_chain+0xaa>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	e03e      	b.n	80058ac <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800582e:	69fa      	ldr	r2, [r7, #28]
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	429a      	cmp	r2, r3
 8005834:	d1da      	bne.n	80057ec <create_chain+0x68>
 8005836:	2300      	movs	r3, #0
 8005838:	e038      	b.n	80058ac <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800583a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800583c:	f04f 32ff 	mov.w	r2, #4294967295
 8005840:	69f9      	ldr	r1, [r7, #28]
 8005842:	6938      	ldr	r0, [r7, #16]
 8005844:	f7ff fe82 	bl	800554c <put_fat>
 8005848:	4603      	mov	r3, r0
 800584a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800584c:	7dfb      	ldrb	r3, [r7, #23]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d109      	bne.n	8005866 <create_chain+0xe2>
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d006      	beq.n	8005866 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005858:	69fa      	ldr	r2, [r7, #28]
 800585a:	6839      	ldr	r1, [r7, #0]
 800585c:	6938      	ldr	r0, [r7, #16]
 800585e:	f7ff fe75 	bl	800554c <put_fat>
 8005862:	4603      	mov	r3, r0
 8005864:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005866:	7dfb      	ldrb	r3, [r7, #23]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d116      	bne.n	800589a <create_chain+0x116>
		fs->last_clst = ncl;
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	69fa      	ldr	r2, [r7, #28]
 8005870:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	695a      	ldr	r2, [r3, #20]
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	3b02      	subs	r3, #2
 800587c:	429a      	cmp	r2, r3
 800587e:	d804      	bhi.n	800588a <create_chain+0x106>
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	1e5a      	subs	r2, r3, #1
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	791b      	ldrb	r3, [r3, #4]
 800588e:	f043 0301 	orr.w	r3, r3, #1
 8005892:	b2da      	uxtb	r2, r3
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	711a      	strb	r2, [r3, #4]
 8005898:	e007      	b.n	80058aa <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800589a:	7dfb      	ldrb	r3, [r7, #23]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d102      	bne.n	80058a6 <create_chain+0x122>
 80058a0:	f04f 33ff 	mov.w	r3, #4294967295
 80058a4:	e000      	b.n	80058a8 <create_chain+0x124>
 80058a6:	2301      	movs	r3, #1
 80058a8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80058aa:	69fb      	ldr	r3, [r7, #28]
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3720      	adds	r7, #32
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b086      	sub	sp, #24
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058ca:	d204      	bcs.n	80058d6 <dir_sdi+0x22>
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	f003 031f 	and.w	r3, r3, #31
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <dir_sdi+0x26>
		return FR_INT_ERR;
 80058d6:	2302      	movs	r3, #2
 80058d8:	e071      	b.n	80059be <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	683a      	ldr	r2, [r7, #0]
 80058de:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d106      	bne.n	80058fa <dir_sdi+0x46>
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d902      	bls.n	80058fa <dir_sdi+0x46>
		clst = fs->dirbase;
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d10c      	bne.n	800591a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	095b      	lsrs	r3, r3, #5
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	8912      	ldrh	r2, [r2, #8]
 8005908:	4293      	cmp	r3, r2
 800590a:	d301      	bcc.n	8005910 <dir_sdi+0x5c>
 800590c:	2302      	movs	r3, #2
 800590e:	e056      	b.n	80059be <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	61da      	str	r2, [r3, #28]
 8005918:	e02d      	b.n	8005976 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	895b      	ldrh	r3, [r3, #10]
 800591e:	461a      	mov	r2, r3
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	899b      	ldrh	r3, [r3, #12]
 8005924:	fb03 f302 	mul.w	r3, r3, r2
 8005928:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800592a:	e019      	b.n	8005960 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6979      	ldr	r1, [r7, #20]
 8005930:	4618      	mov	r0, r3
 8005932:	f7ff fd37 	bl	80053a4 <get_fat>
 8005936:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800593e:	d101      	bne.n	8005944 <dir_sdi+0x90>
 8005940:	2301      	movs	r3, #1
 8005942:	e03c      	b.n	80059be <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d904      	bls.n	8005954 <dir_sdi+0xa0>
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	429a      	cmp	r2, r3
 8005952:	d301      	bcc.n	8005958 <dir_sdi+0xa4>
 8005954:	2302      	movs	r3, #2
 8005956:	e032      	b.n	80059be <dir_sdi+0x10a>
			ofs -= csz;
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005960:	683a      	ldr	r2, [r7, #0]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	429a      	cmp	r2, r3
 8005966:	d2e1      	bcs.n	800592c <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005968:	6979      	ldr	r1, [r7, #20]
 800596a:	6938      	ldr	r0, [r7, #16]
 800596c:	f7ff fcfb 	bl	8005366 <clust2sect>
 8005970:	4602      	mov	r2, r0
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	69db      	ldr	r3, [r3, #28]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d101      	bne.n	8005988 <dir_sdi+0xd4>
 8005984:	2302      	movs	r3, #2
 8005986:	e01a      	b.n	80059be <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	69da      	ldr	r2, [r3, #28]
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	899b      	ldrh	r3, [r3, #12]
 8005990:	4619      	mov	r1, r3
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	fbb3 f3f1 	udiv	r3, r3, r1
 8005998:	441a      	add	r2, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	899b      	ldrh	r3, [r3, #12]
 80059a8:	461a      	mov	r2, r3
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	fbb3 f0f2 	udiv	r0, r3, r2
 80059b0:	fb02 f200 	mul.w	r2, r2, r0
 80059b4:	1a9b      	subs	r3, r3, r2
 80059b6:	18ca      	adds	r2, r1, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3718      	adds	r7, #24
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b086      	sub	sp, #24
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
 80059ce:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	3320      	adds	r3, #32
 80059dc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	69db      	ldr	r3, [r3, #28]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d003      	beq.n	80059ee <dir_next+0x28>
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059ec:	d301      	bcc.n	80059f2 <dir_next+0x2c>
 80059ee:	2304      	movs	r3, #4
 80059f0:	e0bb      	b.n	8005b6a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	899b      	ldrh	r3, [r3, #12]
 80059f6:	461a      	mov	r2, r3
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80059fe:	fb02 f201 	mul.w	r2, r2, r1
 8005a02:	1a9b      	subs	r3, r3, r2
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f040 809d 	bne.w	8005b44 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	1c5a      	adds	r2, r3, #1
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d10b      	bne.n	8005a34 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	095b      	lsrs	r3, r3, #5
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	8912      	ldrh	r2, [r2, #8]
 8005a24:	4293      	cmp	r3, r2
 8005a26:	f0c0 808d 	bcc.w	8005b44 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	61da      	str	r2, [r3, #28]
 8005a30:	2304      	movs	r3, #4
 8005a32:	e09a      	b.n	8005b6a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	899b      	ldrh	r3, [r3, #12]
 8005a38:	461a      	mov	r2, r3
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	8952      	ldrh	r2, [r2, #10]
 8005a44:	3a01      	subs	r2, #1
 8005a46:	4013      	ands	r3, r2
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d17b      	bne.n	8005b44 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	4619      	mov	r1, r3
 8005a54:	4610      	mov	r0, r2
 8005a56:	f7ff fca5 	bl	80053a4 <get_fat>
 8005a5a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d801      	bhi.n	8005a66 <dir_next+0xa0>
 8005a62:	2302      	movs	r3, #2
 8005a64:	e081      	b.n	8005b6a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a6c:	d101      	bne.n	8005a72 <dir_next+0xac>
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e07b      	b.n	8005b6a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d359      	bcc.n	8005b30 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d104      	bne.n	8005a8c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	61da      	str	r2, [r3, #28]
 8005a88:	2304      	movs	r3, #4
 8005a8a:	e06e      	b.n	8005b6a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	4619      	mov	r1, r3
 8005a94:	4610      	mov	r0, r2
 8005a96:	f7ff fe75 	bl	8005784 <create_chain>
 8005a9a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d101      	bne.n	8005aa6 <dir_next+0xe0>
 8005aa2:	2307      	movs	r3, #7
 8005aa4:	e061      	b.n	8005b6a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d101      	bne.n	8005ab0 <dir_next+0xea>
 8005aac:	2302      	movs	r3, #2
 8005aae:	e05c      	b.n	8005b6a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab6:	d101      	bne.n	8005abc <dir_next+0xf6>
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e056      	b.n	8005b6a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f7ff fbe1 	bl	8005284 <sync_window>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d001      	beq.n	8005acc <dir_next+0x106>
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e04e      	b.n	8005b6a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	899b      	ldrh	r3, [r3, #12]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	2100      	movs	r1, #0
 8005ada:	f7ff fa87 	bl	8004fec <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005ade:	2300      	movs	r3, #0
 8005ae0:	613b      	str	r3, [r7, #16]
 8005ae2:	6979      	ldr	r1, [r7, #20]
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f7ff fc3e 	bl	8005366 <clust2sect>
 8005aea:	4602      	mov	r2, r0
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	631a      	str	r2, [r3, #48]	; 0x30
 8005af0:	e012      	b.n	8005b18 <dir_next+0x152>
						fs->wflag = 1;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2201      	movs	r2, #1
 8005af6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f7ff fbc3 	bl	8005284 <sync_window>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d001      	beq.n	8005b08 <dir_next+0x142>
 8005b04:	2301      	movs	r3, #1
 8005b06:	e030      	b.n	8005b6a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	613b      	str	r3, [r7, #16]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b12:	1c5a      	adds	r2, r3, #1
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	631a      	str	r2, [r3, #48]	; 0x30
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	895b      	ldrh	r3, [r3, #10]
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d3e6      	bcc.n	8005af2 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	1ad2      	subs	r2, r2, r3
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005b36:	6979      	ldr	r1, [r7, #20]
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f7ff fc14 	bl	8005366 <clust2sect>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	68ba      	ldr	r2, [r7, #8]
 8005b48:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	899b      	ldrh	r3, [r3, #12]
 8005b54:	461a      	mov	r2, r3
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	fbb3 f0f2 	udiv	r0, r3, r2
 8005b5c:	fb02 f200 	mul.w	r2, r2, r0
 8005b60:	1a9b      	subs	r3, r3, r2
 8005b62:	18ca      	adds	r2, r1, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3718      	adds	r7, #24
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b084      	sub	sp, #16
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
 8005b7a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	331a      	adds	r3, #26
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7ff f9b1 	bl	8004ee8 <ld_word>
 8005b86:	4603      	mov	r3, r0
 8005b88:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	2b03      	cmp	r3, #3
 8005b90:	d109      	bne.n	8005ba6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	3314      	adds	r3, #20
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7ff f9a6 	bl	8004ee8 <ld_word>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	041b      	lsls	r3, r3, #16
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3710      	adds	r7, #16
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8005bba:	2304      	movs	r3, #4
 8005bbc:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8005bc4:	e03c      	b.n	8005c40 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	69db      	ldr	r3, [r3, #28]
 8005bca:	4619      	mov	r1, r3
 8005bcc:	6938      	ldr	r0, [r7, #16]
 8005bce:	f7ff fb9d 	bl	800530c <move_window>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005bd6:	7dfb      	ldrb	r3, [r7, #23]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d136      	bne.n	8005c4a <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a1b      	ldr	r3, [r3, #32]
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8005be4:	7bfb      	ldrb	r3, [r7, #15]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d102      	bne.n	8005bf0 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8005bea:	2304      	movs	r3, #4
 8005bec:	75fb      	strb	r3, [r7, #23]
 8005bee:	e031      	b.n	8005c54 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a1b      	ldr	r3, [r3, #32]
 8005bf4:	330b      	adds	r3, #11
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bfc:	73bb      	strb	r3, [r7, #14]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	7bba      	ldrb	r2, [r7, #14]
 8005c02:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8005c04:	7bfb      	ldrb	r3, [r7, #15]
 8005c06:	2be5      	cmp	r3, #229	; 0xe5
 8005c08:	d011      	beq.n	8005c2e <dir_read+0x7e>
 8005c0a:	7bfb      	ldrb	r3, [r7, #15]
 8005c0c:	2b2e      	cmp	r3, #46	; 0x2e
 8005c0e:	d00e      	beq.n	8005c2e <dir_read+0x7e>
 8005c10:	7bbb      	ldrb	r3, [r7, #14]
 8005c12:	2b0f      	cmp	r3, #15
 8005c14:	d00b      	beq.n	8005c2e <dir_read+0x7e>
 8005c16:	7bbb      	ldrb	r3, [r7, #14]
 8005c18:	f023 0320 	bic.w	r3, r3, #32
 8005c1c:	2b08      	cmp	r3, #8
 8005c1e:	bf0c      	ite	eq
 8005c20:	2301      	moveq	r3, #1
 8005c22:	2300      	movne	r3, #0
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	461a      	mov	r2, r3
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d00f      	beq.n	8005c4e <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8005c2e:	2100      	movs	r1, #0
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f7ff fec8 	bl	80059c6 <dir_next>
 8005c36:	4603      	mov	r3, r0
 8005c38:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005c3a:	7dfb      	ldrb	r3, [r7, #23]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d108      	bne.n	8005c52 <dir_read+0xa2>
	while (dp->sect) {
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	69db      	ldr	r3, [r3, #28]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1be      	bne.n	8005bc6 <dir_read+0x16>
 8005c48:	e004      	b.n	8005c54 <dir_read+0xa4>
		if (res != FR_OK) break;
 8005c4a:	bf00      	nop
 8005c4c:	e002      	b.n	8005c54 <dir_read+0xa4>
				break;
 8005c4e:	bf00      	nop
 8005c50:	e000      	b.n	8005c54 <dir_read+0xa4>
		if (res != FR_OK) break;
 8005c52:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8005c54:	7dfb      	ldrb	r3, [r7, #23]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d002      	beq.n	8005c60 <dir_read+0xb0>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	61da      	str	r2, [r3, #28]
	return res;
 8005c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3718      	adds	r7, #24
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b086      	sub	sp, #24
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005c78:	2100      	movs	r1, #0
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f7ff fe1a 	bl	80058b4 <dir_sdi>
 8005c80:	4603      	mov	r3, r0
 8005c82:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005c84:	7dfb      	ldrb	r3, [r7, #23]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d001      	beq.n	8005c8e <dir_find+0x24>
 8005c8a:	7dfb      	ldrb	r3, [r7, #23]
 8005c8c:	e03e      	b.n	8005d0c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	69db      	ldr	r3, [r3, #28]
 8005c92:	4619      	mov	r1, r3
 8005c94:	6938      	ldr	r0, [r7, #16]
 8005c96:	f7ff fb39 	bl	800530c <move_window>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005c9e:	7dfb      	ldrb	r3, [r7, #23]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d12f      	bne.n	8005d04 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a1b      	ldr	r3, [r3, #32]
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005cac:	7bfb      	ldrb	r3, [r7, #15]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d102      	bne.n	8005cb8 <dir_find+0x4e>
 8005cb2:	2304      	movs	r3, #4
 8005cb4:	75fb      	strb	r3, [r7, #23]
 8005cb6:	e028      	b.n	8005d0a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a1b      	ldr	r3, [r3, #32]
 8005cbc:	330b      	adds	r3, #11
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cc4:	b2da      	uxtb	r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	330b      	adds	r3, #11
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	f003 0308 	and.w	r3, r3, #8
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10a      	bne.n	8005cf0 <dir_find+0x86>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a18      	ldr	r0, [r3, #32]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	3324      	adds	r3, #36	; 0x24
 8005ce2:	220b      	movs	r2, #11
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	f7ff f99c 	bl	8005022 <mem_cmp>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00b      	beq.n	8005d08 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005cf0:	2100      	movs	r1, #0
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f7ff fe67 	bl	80059c6 <dir_next>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005cfc:	7dfb      	ldrb	r3, [r7, #23]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d0c5      	beq.n	8005c8e <dir_find+0x24>
 8005d02:	e002      	b.n	8005d0a <dir_find+0xa0>
		if (res != FR_OK) break;
 8005d04:	bf00      	nop
 8005d06:	e000      	b.n	8005d0a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005d08:	bf00      	nop

	return res;
 8005d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3718      	adds	r7, #24
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	2200      	movs	r2, #0
 8005d22:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	69db      	ldr	r3, [r3, #28]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d04e      	beq.n	8005dca <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	613b      	str	r3, [r7, #16]
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8005d34:	e021      	b.n	8005d7a <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a1a      	ldr	r2, [r3, #32]
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	1c59      	adds	r1, r3, #1
 8005d3e:	6179      	str	r1, [r7, #20]
 8005d40:	4413      	add	r3, r2
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8005d46:	7bfb      	ldrb	r3, [r7, #15]
 8005d48:	2b20      	cmp	r3, #32
 8005d4a:	d100      	bne.n	8005d4e <get_fileinfo+0x3a>
 8005d4c:	e015      	b.n	8005d7a <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8005d4e:	7bfb      	ldrb	r3, [r7, #15]
 8005d50:	2b05      	cmp	r3, #5
 8005d52:	d101      	bne.n	8005d58 <get_fileinfo+0x44>
 8005d54:	23e5      	movs	r3, #229	; 0xe5
 8005d56:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	2b09      	cmp	r3, #9
 8005d5c:	d106      	bne.n	8005d6c <get_fileinfo+0x58>
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	1c5a      	adds	r2, r3, #1
 8005d62:	613a      	str	r2, [r7, #16]
 8005d64:	683a      	ldr	r2, [r7, #0]
 8005d66:	4413      	add	r3, r2
 8005d68:	222e      	movs	r2, #46	; 0x2e
 8005d6a:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	1c5a      	adds	r2, r3, #1
 8005d70:	613a      	str	r2, [r7, #16]
 8005d72:	683a      	ldr	r2, [r7, #0]
 8005d74:	4413      	add	r3, r2
 8005d76:	7bfa      	ldrb	r2, [r7, #15]
 8005d78:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	2b0a      	cmp	r3, #10
 8005d7e:	d9da      	bls.n	8005d36 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8005d80:	683a      	ldr	r2, [r7, #0]
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	4413      	add	r3, r2
 8005d86:	3309      	adds	r3, #9
 8005d88:	2200      	movs	r2, #0
 8005d8a:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a1b      	ldr	r3, [r3, #32]
 8005d90:	7ada      	ldrb	r2, [r3, #11]
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	331c      	adds	r3, #28
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f7ff f8bb 	bl	8004f18 <ld_dword>
 8005da2:	4602      	mov	r2, r0
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a1b      	ldr	r3, [r3, #32]
 8005dac:	3316      	adds	r3, #22
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7ff f8b2 	bl	8004f18 <ld_dword>
 8005db4:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	80da      	strh	r2, [r3, #6]
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	0c1b      	lsrs	r3, r3, #16
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	809a      	strh	r2, [r3, #4]
 8005dc8:	e000      	b.n	8005dcc <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8005dca:	bf00      	nop
}
 8005dcc:	3718      	adds	r7, #24
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
	...

08005dd4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b088      	sub	sp, #32
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	60fb      	str	r3, [r7, #12]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	3324      	adds	r3, #36	; 0x24
 8005de8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005dea:	220b      	movs	r2, #11
 8005dec:	2120      	movs	r1, #32
 8005dee:	68b8      	ldr	r0, [r7, #8]
 8005df0:	f7ff f8fc 	bl	8004fec <mem_set>
	si = i = 0; ni = 8;
 8005df4:	2300      	movs	r3, #0
 8005df6:	613b      	str	r3, [r7, #16]
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	61fb      	str	r3, [r7, #28]
 8005dfc:	2308      	movs	r3, #8
 8005dfe:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	1c5a      	adds	r2, r3, #1
 8005e04:	61fa      	str	r2, [r7, #28]
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	4413      	add	r3, r2
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005e0e:	7efb      	ldrb	r3, [r7, #27]
 8005e10:	2b20      	cmp	r3, #32
 8005e12:	d94e      	bls.n	8005eb2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8005e14:	7efb      	ldrb	r3, [r7, #27]
 8005e16:	2b2f      	cmp	r3, #47	; 0x2f
 8005e18:	d006      	beq.n	8005e28 <create_name+0x54>
 8005e1a:	7efb      	ldrb	r3, [r7, #27]
 8005e1c:	2b5c      	cmp	r3, #92	; 0x5c
 8005e1e:	d110      	bne.n	8005e42 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005e20:	e002      	b.n	8005e28 <create_name+0x54>
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	3301      	adds	r3, #1
 8005e26:	61fb      	str	r3, [r7, #28]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	2b2f      	cmp	r3, #47	; 0x2f
 8005e32:	d0f6      	beq.n	8005e22 <create_name+0x4e>
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	4413      	add	r3, r2
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	2b5c      	cmp	r3, #92	; 0x5c
 8005e3e:	d0f0      	beq.n	8005e22 <create_name+0x4e>
			break;
 8005e40:	e038      	b.n	8005eb4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8005e42:	7efb      	ldrb	r3, [r7, #27]
 8005e44:	2b2e      	cmp	r3, #46	; 0x2e
 8005e46:	d003      	beq.n	8005e50 <create_name+0x7c>
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d30c      	bcc.n	8005e6a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	2b0b      	cmp	r3, #11
 8005e54:	d002      	beq.n	8005e5c <create_name+0x88>
 8005e56:	7efb      	ldrb	r3, [r7, #27]
 8005e58:	2b2e      	cmp	r3, #46	; 0x2e
 8005e5a:	d001      	beq.n	8005e60 <create_name+0x8c>
 8005e5c:	2306      	movs	r3, #6
 8005e5e:	e044      	b.n	8005eea <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8005e60:	2308      	movs	r3, #8
 8005e62:	613b      	str	r3, [r7, #16]
 8005e64:	230b      	movs	r3, #11
 8005e66:	617b      	str	r3, [r7, #20]
			continue;
 8005e68:	e022      	b.n	8005eb0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005e6a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	da04      	bge.n	8005e7c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005e72:	7efb      	ldrb	r3, [r7, #27]
 8005e74:	3b80      	subs	r3, #128	; 0x80
 8005e76:	4a1f      	ldr	r2, [pc, #124]	; (8005ef4 <create_name+0x120>)
 8005e78:	5cd3      	ldrb	r3, [r2, r3]
 8005e7a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005e7c:	7efb      	ldrb	r3, [r7, #27]
 8005e7e:	4619      	mov	r1, r3
 8005e80:	481d      	ldr	r0, [pc, #116]	; (8005ef8 <create_name+0x124>)
 8005e82:	f7ff f8f5 	bl	8005070 <chk_chr>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d001      	beq.n	8005e90 <create_name+0xbc>
 8005e8c:	2306      	movs	r3, #6
 8005e8e:	e02c      	b.n	8005eea <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005e90:	7efb      	ldrb	r3, [r7, #27]
 8005e92:	2b60      	cmp	r3, #96	; 0x60
 8005e94:	d905      	bls.n	8005ea2 <create_name+0xce>
 8005e96:	7efb      	ldrb	r3, [r7, #27]
 8005e98:	2b7a      	cmp	r3, #122	; 0x7a
 8005e9a:	d802      	bhi.n	8005ea2 <create_name+0xce>
 8005e9c:	7efb      	ldrb	r3, [r7, #27]
 8005e9e:	3b20      	subs	r3, #32
 8005ea0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	1c5a      	adds	r2, r3, #1
 8005ea6:	613a      	str	r2, [r7, #16]
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	4413      	add	r3, r2
 8005eac:	7efa      	ldrb	r2, [r7, #27]
 8005eae:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005eb0:	e7a6      	b.n	8005e00 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005eb2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	441a      	add	r2, r3
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d101      	bne.n	8005ec8 <create_name+0xf4>
 8005ec4:	2306      	movs	r3, #6
 8005ec6:	e010      	b.n	8005eea <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	2be5      	cmp	r3, #229	; 0xe5
 8005ece:	d102      	bne.n	8005ed6 <create_name+0x102>
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	2205      	movs	r2, #5
 8005ed4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005ed6:	7efb      	ldrb	r3, [r7, #27]
 8005ed8:	2b20      	cmp	r3, #32
 8005eda:	d801      	bhi.n	8005ee0 <create_name+0x10c>
 8005edc:	2204      	movs	r2, #4
 8005ede:	e000      	b.n	8005ee2 <create_name+0x10e>
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	330b      	adds	r3, #11
 8005ee6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005ee8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3720      	adds	r7, #32
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	08007fac 	.word	0x08007fac
 8005ef8:	08007f34 	.word	0x08007f34

08005efc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005f10:	e002      	b.n	8005f18 <follow_path+0x1c>
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	3301      	adds	r3, #1
 8005f16:	603b      	str	r3, [r7, #0]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	2b2f      	cmp	r3, #47	; 0x2f
 8005f1e:	d0f8      	beq.n	8005f12 <follow_path+0x16>
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	2b5c      	cmp	r3, #92	; 0x5c
 8005f26:	d0f4      	beq.n	8005f12 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	2b1f      	cmp	r3, #31
 8005f34:	d80a      	bhi.n	8005f4c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2280      	movs	r2, #128	; 0x80
 8005f3a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005f3e:	2100      	movs	r1, #0
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f7ff fcb7 	bl	80058b4 <dir_sdi>
 8005f46:	4603      	mov	r3, r0
 8005f48:	75fb      	strb	r3, [r7, #23]
 8005f4a:	e048      	b.n	8005fde <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005f4c:	463b      	mov	r3, r7
 8005f4e:	4619      	mov	r1, r3
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f7ff ff3f 	bl	8005dd4 <create_name>
 8005f56:	4603      	mov	r3, r0
 8005f58:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005f5a:	7dfb      	ldrb	r3, [r7, #23]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d139      	bne.n	8005fd4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f7ff fe82 	bl	8005c6a <dir_find>
 8005f66:	4603      	mov	r3, r0
 8005f68:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005f70:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005f72:	7dfb      	ldrb	r3, [r7, #23]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00a      	beq.n	8005f8e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005f78:	7dfb      	ldrb	r3, [r7, #23]
 8005f7a:	2b04      	cmp	r3, #4
 8005f7c:	d12c      	bne.n	8005fd8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005f7e:	7afb      	ldrb	r3, [r7, #11]
 8005f80:	f003 0304 	and.w	r3, r3, #4
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d127      	bne.n	8005fd8 <follow_path+0xdc>
 8005f88:	2305      	movs	r3, #5
 8005f8a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005f8c:	e024      	b.n	8005fd8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005f8e:	7afb      	ldrb	r3, [r7, #11]
 8005f90:	f003 0304 	and.w	r3, r3, #4
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d121      	bne.n	8005fdc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	799b      	ldrb	r3, [r3, #6]
 8005f9c:	f003 0310 	and.w	r3, r3, #16
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d102      	bne.n	8005faa <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005fa4:	2305      	movs	r3, #5
 8005fa6:	75fb      	strb	r3, [r7, #23]
 8005fa8:	e019      	b.n	8005fde <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	695b      	ldr	r3, [r3, #20]
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	8992      	ldrh	r2, [r2, #12]
 8005fb8:	fbb3 f0f2 	udiv	r0, r3, r2
 8005fbc:	fb02 f200 	mul.w	r2, r2, r0
 8005fc0:	1a9b      	subs	r3, r3, r2
 8005fc2:	440b      	add	r3, r1
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f7ff fdd3 	bl	8005b72 <ld_clust>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005fd2:	e7bb      	b.n	8005f4c <follow_path+0x50>
			if (res != FR_OK) break;
 8005fd4:	bf00      	nop
 8005fd6:	e002      	b.n	8005fde <follow_path+0xe2>
				break;
 8005fd8:	bf00      	nop
 8005fda:	e000      	b.n	8005fde <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005fdc:	bf00      	nop
			}
		}
	}

	return res;
 8005fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3718      	adds	r7, #24
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b087      	sub	sp, #28
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ff4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d031      	beq.n	8006062 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	617b      	str	r3, [r7, #20]
 8006004:	e002      	b.n	800600c <get_ldnumber+0x24>
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	3301      	adds	r3, #1
 800600a:	617b      	str	r3, [r7, #20]
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	2b20      	cmp	r3, #32
 8006012:	d903      	bls.n	800601c <get_ldnumber+0x34>
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	2b3a      	cmp	r3, #58	; 0x3a
 800601a:	d1f4      	bne.n	8006006 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	2b3a      	cmp	r3, #58	; 0x3a
 8006022:	d11c      	bne.n	800605e <get_ldnumber+0x76>
			tp = *path;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	1c5a      	adds	r2, r3, #1
 800602e:	60fa      	str	r2, [r7, #12]
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	3b30      	subs	r3, #48	; 0x30
 8006034:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	2b09      	cmp	r3, #9
 800603a:	d80e      	bhi.n	800605a <get_ldnumber+0x72>
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	429a      	cmp	r2, r3
 8006042:	d10a      	bne.n	800605a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d107      	bne.n	800605a <get_ldnumber+0x72>
					vol = (int)i;
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	3301      	adds	r3, #1
 8006052:	617b      	str	r3, [r7, #20]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	e002      	b.n	8006064 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800605e:	2300      	movs	r3, #0
 8006060:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006062:	693b      	ldr	r3, [r7, #16]
}
 8006064:	4618      	mov	r0, r3
 8006066:	371c      	adds	r7, #28
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	70da      	strb	r2, [r3, #3]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f04f 32ff 	mov.w	r2, #4294967295
 8006086:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006088:	6839      	ldr	r1, [r7, #0]
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f7ff f93e 	bl	800530c <move_window>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d001      	beq.n	800609a <check_fs+0x2a>
 8006096:	2304      	movs	r3, #4
 8006098:	e038      	b.n	800610c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	3334      	adds	r3, #52	; 0x34
 800609e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7fe ff20 	bl	8004ee8 <ld_word>
 80060a8:	4603      	mov	r3, r0
 80060aa:	461a      	mov	r2, r3
 80060ac:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d001      	beq.n	80060b8 <check_fs+0x48>
 80060b4:	2303      	movs	r3, #3
 80060b6:	e029      	b.n	800610c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80060be:	2be9      	cmp	r3, #233	; 0xe9
 80060c0:	d009      	beq.n	80060d6 <check_fs+0x66>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80060c8:	2beb      	cmp	r3, #235	; 0xeb
 80060ca:	d11e      	bne.n	800610a <check_fs+0x9a>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80060d2:	2b90      	cmp	r3, #144	; 0x90
 80060d4:	d119      	bne.n	800610a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	3334      	adds	r3, #52	; 0x34
 80060da:	3336      	adds	r3, #54	; 0x36
 80060dc:	4618      	mov	r0, r3
 80060de:	f7fe ff1b 	bl	8004f18 <ld_dword>
 80060e2:	4603      	mov	r3, r0
 80060e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80060e8:	4a0a      	ldr	r2, [pc, #40]	; (8006114 <check_fs+0xa4>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d101      	bne.n	80060f2 <check_fs+0x82>
 80060ee:	2300      	movs	r3, #0
 80060f0:	e00c      	b.n	800610c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	3334      	adds	r3, #52	; 0x34
 80060f6:	3352      	adds	r3, #82	; 0x52
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7fe ff0d 	bl	8004f18 <ld_dword>
 80060fe:	4603      	mov	r3, r0
 8006100:	4a05      	ldr	r2, [pc, #20]	; (8006118 <check_fs+0xa8>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d101      	bne.n	800610a <check_fs+0x9a>
 8006106:	2300      	movs	r3, #0
 8006108:	e000      	b.n	800610c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800610a:	2302      	movs	r3, #2
}
 800610c:	4618      	mov	r0, r3
 800610e:	3708      	adds	r7, #8
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	00544146 	.word	0x00544146
 8006118:	33544146 	.word	0x33544146

0800611c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b096      	sub	sp, #88	; 0x58
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	4613      	mov	r3, r2
 8006128:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	2200      	movs	r2, #0
 800612e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f7ff ff59 	bl	8005fe8 <get_ldnumber>
 8006136:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800613a:	2b00      	cmp	r3, #0
 800613c:	da01      	bge.n	8006142 <find_volume+0x26>
 800613e:	230b      	movs	r3, #11
 8006140:	e265      	b.n	800660e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006142:	4ab0      	ldr	r2, [pc, #704]	; (8006404 <find_volume+0x2e8>)
 8006144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800614a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800614c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614e:	2b00      	cmp	r3, #0
 8006150:	d101      	bne.n	8006156 <find_volume+0x3a>
 8006152:	230c      	movs	r3, #12
 8006154:	e25b      	b.n	800660e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800615a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800615c:	79fb      	ldrb	r3, [r7, #7]
 800615e:	f023 0301 	bic.w	r3, r3, #1
 8006162:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d01a      	beq.n	80061a2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800616c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616e:	785b      	ldrb	r3, [r3, #1]
 8006170:	4618      	mov	r0, r3
 8006172:	f7fe fe4b 	bl	8004e0c <disk_status>
 8006176:	4603      	mov	r3, r0
 8006178:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800617c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	2b00      	cmp	r3, #0
 8006186:	d10c      	bne.n	80061a2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006188:	79fb      	ldrb	r3, [r7, #7]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d007      	beq.n	800619e <find_volume+0x82>
 800618e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006192:	f003 0304 	and.w	r3, r3, #4
 8006196:	2b00      	cmp	r3, #0
 8006198:	d001      	beq.n	800619e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800619a:	230a      	movs	r3, #10
 800619c:	e237      	b.n	800660e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800619e:	2300      	movs	r3, #0
 80061a0:	e235      	b.n	800660e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80061a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a4:	2200      	movs	r2, #0
 80061a6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80061a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061aa:	b2da      	uxtb	r2, r3
 80061ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ae:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80061b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b2:	785b      	ldrb	r3, [r3, #1]
 80061b4:	4618      	mov	r0, r3
 80061b6:	f7fe fe3b 	bl	8004e30 <disk_initialize>
 80061ba:	4603      	mov	r3, r0
 80061bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80061c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d001      	beq.n	80061d0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80061cc:	2303      	movs	r3, #3
 80061ce:	e21e      	b.n	800660e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80061d0:	79fb      	ldrb	r3, [r7, #7]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d007      	beq.n	80061e6 <find_volume+0xca>
 80061d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80061da:	f003 0304 	and.w	r3, r3, #4
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d001      	beq.n	80061e6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80061e2:	230a      	movs	r3, #10
 80061e4:	e213      	b.n	800660e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80061e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e8:	7858      	ldrb	r0, [r3, #1]
 80061ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ec:	330c      	adds	r3, #12
 80061ee:	461a      	mov	r2, r3
 80061f0:	2102      	movs	r1, #2
 80061f2:	f7fe fe61 	bl	8004eb8 <disk_ioctl>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d001      	beq.n	8006200 <find_volume+0xe4>
 80061fc:	2301      	movs	r3, #1
 80061fe:	e206      	b.n	800660e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006202:	899b      	ldrh	r3, [r3, #12]
 8006204:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006208:	d80d      	bhi.n	8006226 <find_volume+0x10a>
 800620a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620c:	899b      	ldrh	r3, [r3, #12]
 800620e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006212:	d308      	bcc.n	8006226 <find_volume+0x10a>
 8006214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006216:	899b      	ldrh	r3, [r3, #12]
 8006218:	461a      	mov	r2, r3
 800621a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800621c:	899b      	ldrh	r3, [r3, #12]
 800621e:	3b01      	subs	r3, #1
 8006220:	4013      	ands	r3, r2
 8006222:	2b00      	cmp	r3, #0
 8006224:	d001      	beq.n	800622a <find_volume+0x10e>
 8006226:	2301      	movs	r3, #1
 8006228:	e1f1      	b.n	800660e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800622a:	2300      	movs	r3, #0
 800622c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800622e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006230:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006232:	f7ff ff1d 	bl	8006070 <check_fs>
 8006236:	4603      	mov	r3, r0
 8006238:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800623c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006240:	2b02      	cmp	r3, #2
 8006242:	d14b      	bne.n	80062dc <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006244:	2300      	movs	r3, #0
 8006246:	643b      	str	r3, [r7, #64]	; 0x40
 8006248:	e01f      	b.n	800628a <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800624a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800624c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006252:	011b      	lsls	r3, r3, #4
 8006254:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006258:	4413      	add	r3, r2
 800625a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800625c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625e:	3304      	adds	r3, #4
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d006      	beq.n	8006274 <find_volume+0x158>
 8006266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006268:	3308      	adds	r3, #8
 800626a:	4618      	mov	r0, r3
 800626c:	f7fe fe54 	bl	8004f18 <ld_dword>
 8006270:	4602      	mov	r2, r0
 8006272:	e000      	b.n	8006276 <find_volume+0x15a>
 8006274:	2200      	movs	r2, #0
 8006276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800627e:	440b      	add	r3, r1
 8006280:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006286:	3301      	adds	r3, #1
 8006288:	643b      	str	r3, [r7, #64]	; 0x40
 800628a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800628c:	2b03      	cmp	r3, #3
 800628e:	d9dc      	bls.n	800624a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006290:	2300      	movs	r3, #0
 8006292:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006296:	2b00      	cmp	r3, #0
 8006298:	d002      	beq.n	80062a0 <find_volume+0x184>
 800629a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800629c:	3b01      	subs	r3, #1
 800629e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80062a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80062a8:	4413      	add	r3, r2
 80062aa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80062ae:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80062b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d005      	beq.n	80062c2 <find_volume+0x1a6>
 80062b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80062b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80062ba:	f7ff fed9 	bl	8006070 <check_fs>
 80062be:	4603      	mov	r3, r0
 80062c0:	e000      	b.n	80062c4 <find_volume+0x1a8>
 80062c2:	2303      	movs	r3, #3
 80062c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80062c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d905      	bls.n	80062dc <find_volume+0x1c0>
 80062d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062d2:	3301      	adds	r3, #1
 80062d4:	643b      	str	r3, [r7, #64]	; 0x40
 80062d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062d8:	2b03      	cmp	r3, #3
 80062da:	d9e1      	bls.n	80062a0 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80062dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062e0:	2b04      	cmp	r3, #4
 80062e2:	d101      	bne.n	80062e8 <find_volume+0x1cc>
 80062e4:	2301      	movs	r3, #1
 80062e6:	e192      	b.n	800660e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80062e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d901      	bls.n	80062f4 <find_volume+0x1d8>
 80062f0:	230d      	movs	r3, #13
 80062f2:	e18c      	b.n	800660e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80062f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f6:	3334      	adds	r3, #52	; 0x34
 80062f8:	330b      	adds	r3, #11
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7fe fdf4 	bl	8004ee8 <ld_word>
 8006300:	4603      	mov	r3, r0
 8006302:	461a      	mov	r2, r3
 8006304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006306:	899b      	ldrh	r3, [r3, #12]
 8006308:	429a      	cmp	r2, r3
 800630a:	d001      	beq.n	8006310 <find_volume+0x1f4>
 800630c:	230d      	movs	r3, #13
 800630e:	e17e      	b.n	800660e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006312:	3334      	adds	r3, #52	; 0x34
 8006314:	3316      	adds	r3, #22
 8006316:	4618      	mov	r0, r3
 8006318:	f7fe fde6 	bl	8004ee8 <ld_word>
 800631c:	4603      	mov	r3, r0
 800631e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006322:	2b00      	cmp	r3, #0
 8006324:	d106      	bne.n	8006334 <find_volume+0x218>
 8006326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006328:	3334      	adds	r3, #52	; 0x34
 800632a:	3324      	adds	r3, #36	; 0x24
 800632c:	4618      	mov	r0, r3
 800632e:	f7fe fdf3 	bl	8004f18 <ld_dword>
 8006332:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006336:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006338:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800633a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006342:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006346:	789b      	ldrb	r3, [r3, #2]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d005      	beq.n	8006358 <find_volume+0x23c>
 800634c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634e:	789b      	ldrb	r3, [r3, #2]
 8006350:	2b02      	cmp	r3, #2
 8006352:	d001      	beq.n	8006358 <find_volume+0x23c>
 8006354:	230d      	movs	r3, #13
 8006356:	e15a      	b.n	800660e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800635a:	789b      	ldrb	r3, [r3, #2]
 800635c:	461a      	mov	r2, r3
 800635e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006360:	fb02 f303 	mul.w	r3, r2, r3
 8006364:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006368:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800636c:	b29a      	uxth	r2, r3
 800636e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006370:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006374:	895b      	ldrh	r3, [r3, #10]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d008      	beq.n	800638c <find_volume+0x270>
 800637a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800637c:	895b      	ldrh	r3, [r3, #10]
 800637e:	461a      	mov	r2, r3
 8006380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006382:	895b      	ldrh	r3, [r3, #10]
 8006384:	3b01      	subs	r3, #1
 8006386:	4013      	ands	r3, r2
 8006388:	2b00      	cmp	r3, #0
 800638a:	d001      	beq.n	8006390 <find_volume+0x274>
 800638c:	230d      	movs	r3, #13
 800638e:	e13e      	b.n	800660e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006392:	3334      	adds	r3, #52	; 0x34
 8006394:	3311      	adds	r3, #17
 8006396:	4618      	mov	r0, r3
 8006398:	f7fe fda6 	bl	8004ee8 <ld_word>
 800639c:	4603      	mov	r3, r0
 800639e:	461a      	mov	r2, r3
 80063a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80063a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a6:	891b      	ldrh	r3, [r3, #8]
 80063a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063aa:	8992      	ldrh	r2, [r2, #12]
 80063ac:	0952      	lsrs	r2, r2, #5
 80063ae:	b292      	uxth	r2, r2
 80063b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80063b4:	fb02 f201 	mul.w	r2, r2, r1
 80063b8:	1a9b      	subs	r3, r3, r2
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d001      	beq.n	80063c4 <find_volume+0x2a8>
 80063c0:	230d      	movs	r3, #13
 80063c2:	e124      	b.n	800660e <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80063c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c6:	3334      	adds	r3, #52	; 0x34
 80063c8:	3313      	adds	r3, #19
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7fe fd8c 	bl	8004ee8 <ld_word>
 80063d0:	4603      	mov	r3, r0
 80063d2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80063d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d106      	bne.n	80063e8 <find_volume+0x2cc>
 80063da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063dc:	3334      	adds	r3, #52	; 0x34
 80063de:	3320      	adds	r3, #32
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7fe fd99 	bl	8004f18 <ld_dword>
 80063e6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80063e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ea:	3334      	adds	r3, #52	; 0x34
 80063ec:	330e      	adds	r3, #14
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7fe fd7a 	bl	8004ee8 <ld_word>
 80063f4:	4603      	mov	r3, r0
 80063f6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80063f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d104      	bne.n	8006408 <find_volume+0x2ec>
 80063fe:	230d      	movs	r3, #13
 8006400:	e105      	b.n	800660e <find_volume+0x4f2>
 8006402:	bf00      	nop
 8006404:	200000cc 	.word	0x200000cc

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006408:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800640a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800640c:	4413      	add	r3, r2
 800640e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006410:	8911      	ldrh	r1, [r2, #8]
 8006412:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006414:	8992      	ldrh	r2, [r2, #12]
 8006416:	0952      	lsrs	r2, r2, #5
 8006418:	b292      	uxth	r2, r2
 800641a:	fbb1 f2f2 	udiv	r2, r1, r2
 800641e:	b292      	uxth	r2, r2
 8006420:	4413      	add	r3, r2
 8006422:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006424:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006428:	429a      	cmp	r2, r3
 800642a:	d201      	bcs.n	8006430 <find_volume+0x314>
 800642c:	230d      	movs	r3, #13
 800642e:	e0ee      	b.n	800660e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006430:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006438:	8952      	ldrh	r2, [r2, #10]
 800643a:	fbb3 f3f2 	udiv	r3, r3, r2
 800643e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <find_volume+0x32e>
 8006446:	230d      	movs	r3, #13
 8006448:	e0e1      	b.n	800660e <find_volume+0x4f2>
		fmt = FS_FAT32;
 800644a:	2303      	movs	r3, #3
 800644c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006452:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006456:	4293      	cmp	r3, r2
 8006458:	d802      	bhi.n	8006460 <find_volume+0x344>
 800645a:	2302      	movs	r3, #2
 800645c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006462:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006466:	4293      	cmp	r3, r2
 8006468:	d802      	bhi.n	8006470 <find_volume+0x354>
 800646a:	2301      	movs	r3, #1
 800646c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006472:	1c9a      	adds	r2, r3, #2
 8006474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006476:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8006478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800647a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800647c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800647e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006480:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006482:	441a      	add	r2, r3
 8006484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006486:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8006488:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800648a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648c:	441a      	add	r2, r3
 800648e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006490:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8006492:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006496:	2b03      	cmp	r3, #3
 8006498:	d11e      	bne.n	80064d8 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800649a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649c:	3334      	adds	r3, #52	; 0x34
 800649e:	332a      	adds	r3, #42	; 0x2a
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7fe fd21 	bl	8004ee8 <ld_word>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d001      	beq.n	80064b0 <find_volume+0x394>
 80064ac:	230d      	movs	r3, #13
 80064ae:	e0ae      	b.n	800660e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80064b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b2:	891b      	ldrh	r3, [r3, #8]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d001      	beq.n	80064bc <find_volume+0x3a0>
 80064b8:	230d      	movs	r3, #13
 80064ba:	e0a8      	b.n	800660e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80064bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064be:	3334      	adds	r3, #52	; 0x34
 80064c0:	332c      	adds	r3, #44	; 0x2c
 80064c2:	4618      	mov	r0, r3
 80064c4:	f7fe fd28 	bl	8004f18 <ld_dword>
 80064c8:	4602      	mov	r2, r0
 80064ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064cc:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80064ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	647b      	str	r3, [r7, #68]	; 0x44
 80064d6:	e01f      	b.n	8006518 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80064d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064da:	891b      	ldrh	r3, [r3, #8]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d101      	bne.n	80064e4 <find_volume+0x3c8>
 80064e0:	230d      	movs	r3, #13
 80064e2:	e094      	b.n	800660e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80064e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064ea:	441a      	add	r2, r3
 80064ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ee:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80064f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d103      	bne.n	8006500 <find_volume+0x3e4>
 80064f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	005b      	lsls	r3, r3, #1
 80064fe:	e00a      	b.n	8006516 <find_volume+0x3fa>
 8006500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006502:	699a      	ldr	r2, [r3, #24]
 8006504:	4613      	mov	r3, r2
 8006506:	005b      	lsls	r3, r3, #1
 8006508:	4413      	add	r3, r2
 800650a:	085a      	lsrs	r2, r3, #1
 800650c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650e:	699b      	ldr	r3, [r3, #24]
 8006510:	f003 0301 	and.w	r3, r3, #1
 8006514:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006516:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800651a:	69da      	ldr	r2, [r3, #28]
 800651c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800651e:	899b      	ldrh	r3, [r3, #12]
 8006520:	4619      	mov	r1, r3
 8006522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006524:	440b      	add	r3, r1
 8006526:	3b01      	subs	r3, #1
 8006528:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800652a:	8989      	ldrh	r1, [r1, #12]
 800652c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006530:	429a      	cmp	r2, r3
 8006532:	d201      	bcs.n	8006538 <find_volume+0x41c>
 8006534:	230d      	movs	r3, #13
 8006536:	e06a      	b.n	800660e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800653a:	f04f 32ff 	mov.w	r2, #4294967295
 800653e:	615a      	str	r2, [r3, #20]
 8006540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006542:	695a      	ldr	r2, [r3, #20]
 8006544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006546:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8006548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800654a:	2280      	movs	r2, #128	; 0x80
 800654c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800654e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006552:	2b03      	cmp	r3, #3
 8006554:	d149      	bne.n	80065ea <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006558:	3334      	adds	r3, #52	; 0x34
 800655a:	3330      	adds	r3, #48	; 0x30
 800655c:	4618      	mov	r0, r3
 800655e:	f7fe fcc3 	bl	8004ee8 <ld_word>
 8006562:	4603      	mov	r3, r0
 8006564:	2b01      	cmp	r3, #1
 8006566:	d140      	bne.n	80065ea <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006568:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800656a:	3301      	adds	r3, #1
 800656c:	4619      	mov	r1, r3
 800656e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006570:	f7fe fecc 	bl	800530c <move_window>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d137      	bne.n	80065ea <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800657a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800657c:	2200      	movs	r2, #0
 800657e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006582:	3334      	adds	r3, #52	; 0x34
 8006584:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006588:	4618      	mov	r0, r3
 800658a:	f7fe fcad 	bl	8004ee8 <ld_word>
 800658e:	4603      	mov	r3, r0
 8006590:	461a      	mov	r2, r3
 8006592:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006596:	429a      	cmp	r2, r3
 8006598:	d127      	bne.n	80065ea <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800659a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800659c:	3334      	adds	r3, #52	; 0x34
 800659e:	4618      	mov	r0, r3
 80065a0:	f7fe fcba 	bl	8004f18 <ld_dword>
 80065a4:	4603      	mov	r3, r0
 80065a6:	4a1c      	ldr	r2, [pc, #112]	; (8006618 <find_volume+0x4fc>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d11e      	bne.n	80065ea <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80065ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ae:	3334      	adds	r3, #52	; 0x34
 80065b0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80065b4:	4618      	mov	r0, r3
 80065b6:	f7fe fcaf 	bl	8004f18 <ld_dword>
 80065ba:	4603      	mov	r3, r0
 80065bc:	4a17      	ldr	r2, [pc, #92]	; (800661c <find_volume+0x500>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d113      	bne.n	80065ea <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80065c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c4:	3334      	adds	r3, #52	; 0x34
 80065c6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7fe fca4 	bl	8004f18 <ld_dword>
 80065d0:	4602      	mov	r2, r0
 80065d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80065d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d8:	3334      	adds	r3, #52	; 0x34
 80065da:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80065de:	4618      	mov	r0, r3
 80065e0:	f7fe fc9a 	bl	8004f18 <ld_dword>
 80065e4:	4602      	mov	r2, r0
 80065e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80065ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ec:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80065f0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80065f2:	4b0b      	ldr	r3, [pc, #44]	; (8006620 <find_volume+0x504>)
 80065f4:	881b      	ldrh	r3, [r3, #0]
 80065f6:	3301      	adds	r3, #1
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	4b09      	ldr	r3, [pc, #36]	; (8006620 <find_volume+0x504>)
 80065fc:	801a      	strh	r2, [r3, #0]
 80065fe:	4b08      	ldr	r3, [pc, #32]	; (8006620 <find_volume+0x504>)
 8006600:	881a      	ldrh	r2, [r3, #0]
 8006602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006604:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006606:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006608:	f7fe fe18 	bl	800523c <clear_lock>
#endif
	return FR_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3758      	adds	r7, #88	; 0x58
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	41615252 	.word	0x41615252
 800661c:	61417272 	.word	0x61417272
 8006620:	200000d0 	.word	0x200000d0

08006624 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800662e:	2309      	movs	r3, #9
 8006630:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d01c      	beq.n	8006672 <validate+0x4e>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d018      	beq.n	8006672 <validate+0x4e>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d013      	beq.n	8006672 <validate+0x4e>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	889a      	ldrh	r2, [r3, #4]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	88db      	ldrh	r3, [r3, #6]
 8006654:	429a      	cmp	r2, r3
 8006656:	d10c      	bne.n	8006672 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	785b      	ldrb	r3, [r3, #1]
 800665e:	4618      	mov	r0, r3
 8006660:	f7fe fbd4 	bl	8004e0c <disk_status>
 8006664:	4603      	mov	r3, r0
 8006666:	f003 0301 	and.w	r3, r3, #1
 800666a:	2b00      	cmp	r3, #0
 800666c:	d101      	bne.n	8006672 <validate+0x4e>
			res = FR_OK;
 800666e:	2300      	movs	r3, #0
 8006670:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006672:	7bfb      	ldrb	r3, [r7, #15]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d102      	bne.n	800667e <validate+0x5a>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	e000      	b.n	8006680 <validate+0x5c>
 800667e:	2300      	movs	r3, #0
 8006680:	683a      	ldr	r2, [r7, #0]
 8006682:	6013      	str	r3, [r2, #0]
	return res;
 8006684:	7bfb      	ldrb	r3, [r7, #15]
}
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
	...

08006690 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b088      	sub	sp, #32
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	4613      	mov	r3, r2
 800669c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80066a2:	f107 0310 	add.w	r3, r7, #16
 80066a6:	4618      	mov	r0, r3
 80066a8:	f7ff fc9e 	bl	8005fe8 <get_ldnumber>
 80066ac:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	da01      	bge.n	80066b8 <f_mount+0x28>
 80066b4:	230b      	movs	r3, #11
 80066b6:	e02b      	b.n	8006710 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80066b8:	4a17      	ldr	r2, [pc, #92]	; (8006718 <f_mount+0x88>)
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066c0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d005      	beq.n	80066d4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80066c8:	69b8      	ldr	r0, [r7, #24]
 80066ca:	f7fe fdb7 	bl	800523c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	2200      	movs	r2, #0
 80066d2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d002      	beq.n	80066e0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	490d      	ldr	r1, [pc, #52]	; (8006718 <f_mount+0x88>)
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d002      	beq.n	80066f6 <f_mount+0x66>
 80066f0:	79fb      	ldrb	r3, [r7, #7]
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d001      	beq.n	80066fa <f_mount+0x6a>
 80066f6:	2300      	movs	r3, #0
 80066f8:	e00a      	b.n	8006710 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80066fa:	f107 010c 	add.w	r1, r7, #12
 80066fe:	f107 0308 	add.w	r3, r7, #8
 8006702:	2200      	movs	r2, #0
 8006704:	4618      	mov	r0, r3
 8006706:	f7ff fd09 	bl	800611c <find_volume>
 800670a:	4603      	mov	r3, r0
 800670c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800670e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006710:	4618      	mov	r0, r3
 8006712:	3720      	adds	r7, #32
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	200000cc 	.word	0x200000cc

0800671c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b086      	sub	sp, #24
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d101      	bne.n	8006730 <f_opendir+0x14>
 800672c:	2309      	movs	r3, #9
 800672e:	e064      	b.n	80067fa <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8006734:	f107 010c 	add.w	r1, r7, #12
 8006738:	463b      	mov	r3, r7
 800673a:	2200      	movs	r2, #0
 800673c:	4618      	mov	r0, r3
 800673e:	f7ff fced 	bl	800611c <find_volume>
 8006742:	4603      	mov	r3, r0
 8006744:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006746:	7dfb      	ldrb	r3, [r7, #23]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d14f      	bne.n	80067ec <f_opendir+0xd0>
		obj->fs = fs;
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	4619      	mov	r1, r3
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f7ff fbd0 	bl	8005efc <follow_path>
 800675c:	4603      	mov	r3, r0
 800675e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8006760:	7dfb      	ldrb	r3, [r7, #23]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d13d      	bne.n	80067e2 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800676c:	b25b      	sxtb	r3, r3
 800676e:	2b00      	cmp	r3, #0
 8006770:	db12      	blt.n	8006798 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	799b      	ldrb	r3, [r3, #6]
 8006776:	f003 0310 	and.w	r3, r3, #16
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00a      	beq.n	8006794 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a1b      	ldr	r3, [r3, #32]
 8006784:	4619      	mov	r1, r3
 8006786:	4610      	mov	r0, r2
 8006788:	f7ff f9f3 	bl	8005b72 <ld_clust>
 800678c:	4602      	mov	r2, r0
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	609a      	str	r2, [r3, #8]
 8006792:	e001      	b.n	8006798 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8006794:	2305      	movs	r3, #5
 8006796:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8006798:	7dfb      	ldrb	r3, [r7, #23]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d121      	bne.n	80067e2 <f_opendir+0xc6>
				obj->id = fs->id;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	88da      	ldrh	r2, [r3, #6]
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80067a6:	2100      	movs	r1, #0
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f7ff f883 	bl	80058b4 <dir_sdi>
 80067ae:	4603      	mov	r3, r0
 80067b0:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80067b2:	7dfb      	ldrb	r3, [r7, #23]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d114      	bne.n	80067e2 <f_opendir+0xc6>
					if (obj->sclust) {
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d00d      	beq.n	80067dc <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80067c0:	2100      	movs	r1, #0
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f7fe fc70 	bl	80050a8 <inc_lock>
 80067c8:	4602      	mov	r2, r0
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d105      	bne.n	80067e2 <f_opendir+0xc6>
 80067d6:	2312      	movs	r3, #18
 80067d8:	75fb      	strb	r3, [r7, #23]
 80067da:	e002      	b.n	80067e2 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	2200      	movs	r2, #0
 80067e0:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80067e2:	7dfb      	ldrb	r3, [r7, #23]
 80067e4:	2b04      	cmp	r3, #4
 80067e6:	d101      	bne.n	80067ec <f_opendir+0xd0>
 80067e8:	2305      	movs	r3, #5
 80067ea:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80067ec:	7dfb      	ldrb	r3, [r7, #23]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d002      	beq.n	80067f8 <f_opendir+0xdc>
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	2200      	movs	r2, #0
 80067f6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80067f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3718      	adds	r7, #24
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b084      	sub	sp, #16
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f107 0208 	add.w	r2, r7, #8
 8006810:	4611      	mov	r1, r2
 8006812:	4618      	mov	r0, r3
 8006814:	f7ff ff06 	bl	8006624 <validate>
 8006818:	4603      	mov	r3, r0
 800681a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800681c:	7bfb      	ldrb	r3, [r7, #15]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d110      	bne.n	8006844 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d006      	beq.n	8006838 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	4618      	mov	r0, r3
 8006830:	f7fe fcc8 	bl	80051c4 <dec_lock>
 8006834:	4603      	mov	r3, r0
 8006836:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8006838:	7bfb      	ldrb	r3, [r7, #15]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d102      	bne.n	8006844 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8006844:	7bfb      	ldrb	r3, [r7, #15]
}
 8006846:	4618      	mov	r0, r3
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b084      	sub	sp, #16
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
 8006856:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f107 0208 	add.w	r2, r7, #8
 800685e:	4611      	mov	r1, r2
 8006860:	4618      	mov	r0, r3
 8006862:	f7ff fedf 	bl	8006624 <validate>
 8006866:	4603      	mov	r3, r0
 8006868:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800686a:	7bfb      	ldrb	r3, [r7, #15]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d126      	bne.n	80068be <f_readdir+0x70>
		if (!fno) {
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d106      	bne.n	8006884 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8006876:	2100      	movs	r1, #0
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f7ff f81b 	bl	80058b4 <dir_sdi>
 800687e:	4603      	mov	r3, r0
 8006880:	73fb      	strb	r3, [r7, #15]
 8006882:	e01c      	b.n	80068be <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8006884:	2100      	movs	r1, #0
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f7ff f992 	bl	8005bb0 <dir_read>
 800688c:	4603      	mov	r3, r0
 800688e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8006890:	7bfb      	ldrb	r3, [r7, #15]
 8006892:	2b04      	cmp	r3, #4
 8006894:	d101      	bne.n	800689a <f_readdir+0x4c>
 8006896:	2300      	movs	r3, #0
 8006898:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800689a:	7bfb      	ldrb	r3, [r7, #15]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d10e      	bne.n	80068be <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 80068a0:	6839      	ldr	r1, [r7, #0]
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f7ff fa36 	bl	8005d14 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80068a8:	2100      	movs	r1, #0
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f7ff f88b 	bl	80059c6 <dir_next>
 80068b0:	4603      	mov	r3, r0
 80068b2:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80068b4:	7bfb      	ldrb	r3, [r7, #15]
 80068b6:	2b04      	cmp	r3, #4
 80068b8:	d101      	bne.n	80068be <f_readdir+0x70>
 80068ba:	2300      	movs	r3, #0
 80068bc:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80068be:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3710      	adds	r7, #16
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b092      	sub	sp, #72	; 0x48
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80068d4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80068d8:	f107 030c 	add.w	r3, r7, #12
 80068dc:	2200      	movs	r2, #0
 80068de:	4618      	mov	r0, r3
 80068e0:	f7ff fc1c 	bl	800611c <find_volume>
 80068e4:	4603      	mov	r3, r0
 80068e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80068ea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	f040 8099 	bne.w	8006a26 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80068f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80068fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fc:	695a      	ldr	r2, [r3, #20]
 80068fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	3b02      	subs	r3, #2
 8006904:	429a      	cmp	r2, r3
 8006906:	d804      	bhi.n	8006912 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8006908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690a:	695a      	ldr	r2, [r3, #20]
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	601a      	str	r2, [r3, #0]
 8006910:	e089      	b.n	8006a26 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8006912:	2300      	movs	r3, #0
 8006914:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8006916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	2b01      	cmp	r3, #1
 800691c:	d128      	bne.n	8006970 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800691e:	2302      	movs	r3, #2
 8006920:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006924:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8006926:	f107 0314 	add.w	r3, r7, #20
 800692a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800692c:	4618      	mov	r0, r3
 800692e:	f7fe fd39 	bl	80053a4 <get_fat>
 8006932:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8006934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800693a:	d103      	bne.n	8006944 <f_getfree+0x7c>
 800693c:	2301      	movs	r3, #1
 800693e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006942:	e063      	b.n	8006a0c <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8006944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006946:	2b01      	cmp	r3, #1
 8006948:	d103      	bne.n	8006952 <f_getfree+0x8a>
 800694a:	2302      	movs	r3, #2
 800694c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006950:	e05c      	b.n	8006a0c <f_getfree+0x144>
					if (stat == 0) nfree++;
 8006952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006954:	2b00      	cmp	r3, #0
 8006956:	d102      	bne.n	800695e <f_getfree+0x96>
 8006958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800695a:	3301      	adds	r3, #1
 800695c:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800695e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006960:	3301      	adds	r3, #1
 8006962:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006966:	699b      	ldr	r3, [r3, #24]
 8006968:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800696a:	429a      	cmp	r2, r3
 800696c:	d3db      	bcc.n	8006926 <f_getfree+0x5e>
 800696e:	e04d      	b.n	8006a0c <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8006970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006972:	699b      	ldr	r3, [r3, #24]
 8006974:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697a:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800697c:	2300      	movs	r3, #0
 800697e:	637b      	str	r3, [r7, #52]	; 0x34
 8006980:	2300      	movs	r3, #0
 8006982:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8006984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006986:	2b00      	cmp	r3, #0
 8006988:	d113      	bne.n	80069b2 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800698a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800698c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698e:	1c5a      	adds	r2, r3, #1
 8006990:	63ba      	str	r2, [r7, #56]	; 0x38
 8006992:	4619      	mov	r1, r3
 8006994:	f7fe fcba 	bl	800530c <move_window>
 8006998:	4603      	mov	r3, r0
 800699a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800699e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d131      	bne.n	8006a0a <f_getfree+0x142>
							p = fs->win;
 80069a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a8:	3334      	adds	r3, #52	; 0x34
 80069aa:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 80069ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ae:	899b      	ldrh	r3, [r3, #12]
 80069b0:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80069b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d10f      	bne.n	80069da <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80069ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069bc:	f7fe fa94 	bl	8004ee8 <ld_word>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d102      	bne.n	80069cc <f_getfree+0x104>
 80069c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069c8:	3301      	adds	r3, #1
 80069ca:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 80069cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ce:	3302      	adds	r3, #2
 80069d0:	633b      	str	r3, [r7, #48]	; 0x30
 80069d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069d4:	3b02      	subs	r3, #2
 80069d6:	637b      	str	r3, [r7, #52]	; 0x34
 80069d8:	e010      	b.n	80069fc <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80069da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069dc:	f7fe fa9c 	bl	8004f18 <ld_dword>
 80069e0:	4603      	mov	r3, r0
 80069e2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d102      	bne.n	80069f0 <f_getfree+0x128>
 80069ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069ec:	3301      	adds	r3, #1
 80069ee:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 80069f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f2:	3304      	adds	r3, #4
 80069f4:	633b      	str	r3, [r7, #48]	; 0x30
 80069f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069f8:	3b04      	subs	r3, #4
 80069fa:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 80069fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069fe:	3b01      	subs	r3, #1
 8006a00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1bd      	bne.n	8006984 <f_getfree+0xbc>
 8006a08:	e000      	b.n	8006a0c <f_getfree+0x144>
							if (res != FR_OK) break;
 8006a0a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a10:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8006a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a16:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8006a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1a:	791a      	ldrb	r2, [r3, #4]
 8006a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1e:	f042 0201 	orr.w	r2, r2, #1
 8006a22:	b2d2      	uxtb	r2, r2
 8006a24:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8006a26:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3748      	adds	r7, #72	; 0x48
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
	...

08006a34 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b087      	sub	sp, #28
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	4613      	mov	r3, r2
 8006a40:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006a42:	2301      	movs	r3, #1
 8006a44:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006a46:	2300      	movs	r3, #0
 8006a48:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006a4a:	4b1f      	ldr	r3, [pc, #124]	; (8006ac8 <FATFS_LinkDriverEx+0x94>)
 8006a4c:	7a5b      	ldrb	r3, [r3, #9]
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d131      	bne.n	8006ab8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006a54:	4b1c      	ldr	r3, [pc, #112]	; (8006ac8 <FATFS_LinkDriverEx+0x94>)
 8006a56:	7a5b      	ldrb	r3, [r3, #9]
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	4b1a      	ldr	r3, [pc, #104]	; (8006ac8 <FATFS_LinkDriverEx+0x94>)
 8006a5e:	2100      	movs	r1, #0
 8006a60:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006a62:	4b19      	ldr	r3, [pc, #100]	; (8006ac8 <FATFS_LinkDriverEx+0x94>)
 8006a64:	7a5b      	ldrb	r3, [r3, #9]
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	4a17      	ldr	r2, [pc, #92]	; (8006ac8 <FATFS_LinkDriverEx+0x94>)
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	4413      	add	r3, r2
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006a72:	4b15      	ldr	r3, [pc, #84]	; (8006ac8 <FATFS_LinkDriverEx+0x94>)
 8006a74:	7a5b      	ldrb	r3, [r3, #9]
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	461a      	mov	r2, r3
 8006a7a:	4b13      	ldr	r3, [pc, #76]	; (8006ac8 <FATFS_LinkDriverEx+0x94>)
 8006a7c:	4413      	add	r3, r2
 8006a7e:	79fa      	ldrb	r2, [r7, #7]
 8006a80:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006a82:	4b11      	ldr	r3, [pc, #68]	; (8006ac8 <FATFS_LinkDriverEx+0x94>)
 8006a84:	7a5b      	ldrb	r3, [r3, #9]
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	1c5a      	adds	r2, r3, #1
 8006a8a:	b2d1      	uxtb	r1, r2
 8006a8c:	4a0e      	ldr	r2, [pc, #56]	; (8006ac8 <FATFS_LinkDriverEx+0x94>)
 8006a8e:	7251      	strb	r1, [r2, #9]
 8006a90:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006a92:	7dbb      	ldrb	r3, [r7, #22]
 8006a94:	3330      	adds	r3, #48	; 0x30
 8006a96:	b2da      	uxtb	r2, r3
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	223a      	movs	r2, #58	; 0x3a
 8006aa2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	3302      	adds	r3, #2
 8006aa8:	222f      	movs	r2, #47	; 0x2f
 8006aaa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	3303      	adds	r3, #3
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006ab8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	371c      	adds	r7, #28
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	200000f4 	.word	0x200000f4

08006acc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	6839      	ldr	r1, [r7, #0]
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f7ff ffaa 	bl	8006a34 <FATFS_LinkDriverEx>
 8006ae0:	4603      	mov	r3, r0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3708      	adds	r7, #8
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
	...

08006aec <__errno>:
 8006aec:	4b01      	ldr	r3, [pc, #4]	; (8006af4 <__errno+0x8>)
 8006aee:	6818      	ldr	r0, [r3, #0]
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	20000024 	.word	0x20000024

08006af8 <__libc_init_array>:
 8006af8:	b570      	push	{r4, r5, r6, lr}
 8006afa:	4d0d      	ldr	r5, [pc, #52]	; (8006b30 <__libc_init_array+0x38>)
 8006afc:	4c0d      	ldr	r4, [pc, #52]	; (8006b34 <__libc_init_array+0x3c>)
 8006afe:	1b64      	subs	r4, r4, r5
 8006b00:	10a4      	asrs	r4, r4, #2
 8006b02:	2600      	movs	r6, #0
 8006b04:	42a6      	cmp	r6, r4
 8006b06:	d109      	bne.n	8006b1c <__libc_init_array+0x24>
 8006b08:	4d0b      	ldr	r5, [pc, #44]	; (8006b38 <__libc_init_array+0x40>)
 8006b0a:	4c0c      	ldr	r4, [pc, #48]	; (8006b3c <__libc_init_array+0x44>)
 8006b0c:	f001 f9be 	bl	8007e8c <_init>
 8006b10:	1b64      	subs	r4, r4, r5
 8006b12:	10a4      	asrs	r4, r4, #2
 8006b14:	2600      	movs	r6, #0
 8006b16:	42a6      	cmp	r6, r4
 8006b18:	d105      	bne.n	8006b26 <__libc_init_array+0x2e>
 8006b1a:	bd70      	pop	{r4, r5, r6, pc}
 8006b1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b20:	4798      	blx	r3
 8006b22:	3601      	adds	r6, #1
 8006b24:	e7ee      	b.n	8006b04 <__libc_init_array+0xc>
 8006b26:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b2a:	4798      	blx	r3
 8006b2c:	3601      	adds	r6, #1
 8006b2e:	e7f2      	b.n	8006b16 <__libc_init_array+0x1e>
 8006b30:	080080cc 	.word	0x080080cc
 8006b34:	080080cc 	.word	0x080080cc
 8006b38:	080080cc 	.word	0x080080cc
 8006b3c:	080080d0 	.word	0x080080d0

08006b40 <memset>:
 8006b40:	4402      	add	r2, r0
 8006b42:	4603      	mov	r3, r0
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d100      	bne.n	8006b4a <memset+0xa>
 8006b48:	4770      	bx	lr
 8006b4a:	f803 1b01 	strb.w	r1, [r3], #1
 8006b4e:	e7f9      	b.n	8006b44 <memset+0x4>

08006b50 <iprintf>:
 8006b50:	b40f      	push	{r0, r1, r2, r3}
 8006b52:	4b0a      	ldr	r3, [pc, #40]	; (8006b7c <iprintf+0x2c>)
 8006b54:	b513      	push	{r0, r1, r4, lr}
 8006b56:	681c      	ldr	r4, [r3, #0]
 8006b58:	b124      	cbz	r4, 8006b64 <iprintf+0x14>
 8006b5a:	69a3      	ldr	r3, [r4, #24]
 8006b5c:	b913      	cbnz	r3, 8006b64 <iprintf+0x14>
 8006b5e:	4620      	mov	r0, r4
 8006b60:	f000 fa7e 	bl	8007060 <__sinit>
 8006b64:	ab05      	add	r3, sp, #20
 8006b66:	9a04      	ldr	r2, [sp, #16]
 8006b68:	68a1      	ldr	r1, [r4, #8]
 8006b6a:	9301      	str	r3, [sp, #4]
 8006b6c:	4620      	mov	r0, r4
 8006b6e:	f000 fdab 	bl	80076c8 <_vfiprintf_r>
 8006b72:	b002      	add	sp, #8
 8006b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b78:	b004      	add	sp, #16
 8006b7a:	4770      	bx	lr
 8006b7c:	20000024 	.word	0x20000024

08006b80 <_puts_r>:
 8006b80:	b570      	push	{r4, r5, r6, lr}
 8006b82:	460e      	mov	r6, r1
 8006b84:	4605      	mov	r5, r0
 8006b86:	b118      	cbz	r0, 8006b90 <_puts_r+0x10>
 8006b88:	6983      	ldr	r3, [r0, #24]
 8006b8a:	b90b      	cbnz	r3, 8006b90 <_puts_r+0x10>
 8006b8c:	f000 fa68 	bl	8007060 <__sinit>
 8006b90:	69ab      	ldr	r3, [r5, #24]
 8006b92:	68ac      	ldr	r4, [r5, #8]
 8006b94:	b913      	cbnz	r3, 8006b9c <_puts_r+0x1c>
 8006b96:	4628      	mov	r0, r5
 8006b98:	f000 fa62 	bl	8007060 <__sinit>
 8006b9c:	4b2c      	ldr	r3, [pc, #176]	; (8006c50 <_puts_r+0xd0>)
 8006b9e:	429c      	cmp	r4, r3
 8006ba0:	d120      	bne.n	8006be4 <_puts_r+0x64>
 8006ba2:	686c      	ldr	r4, [r5, #4]
 8006ba4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ba6:	07db      	lsls	r3, r3, #31
 8006ba8:	d405      	bmi.n	8006bb6 <_puts_r+0x36>
 8006baa:	89a3      	ldrh	r3, [r4, #12]
 8006bac:	0598      	lsls	r0, r3, #22
 8006bae:	d402      	bmi.n	8006bb6 <_puts_r+0x36>
 8006bb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bb2:	f000 faf3 	bl	800719c <__retarget_lock_acquire_recursive>
 8006bb6:	89a3      	ldrh	r3, [r4, #12]
 8006bb8:	0719      	lsls	r1, r3, #28
 8006bba:	d51d      	bpl.n	8006bf8 <_puts_r+0x78>
 8006bbc:	6923      	ldr	r3, [r4, #16]
 8006bbe:	b1db      	cbz	r3, 8006bf8 <_puts_r+0x78>
 8006bc0:	3e01      	subs	r6, #1
 8006bc2:	68a3      	ldr	r3, [r4, #8]
 8006bc4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	60a3      	str	r3, [r4, #8]
 8006bcc:	bb39      	cbnz	r1, 8006c1e <_puts_r+0x9e>
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	da38      	bge.n	8006c44 <_puts_r+0xc4>
 8006bd2:	4622      	mov	r2, r4
 8006bd4:	210a      	movs	r1, #10
 8006bd6:	4628      	mov	r0, r5
 8006bd8:	f000 f868 	bl	8006cac <__swbuf_r>
 8006bdc:	3001      	adds	r0, #1
 8006bde:	d011      	beq.n	8006c04 <_puts_r+0x84>
 8006be0:	250a      	movs	r5, #10
 8006be2:	e011      	b.n	8006c08 <_puts_r+0x88>
 8006be4:	4b1b      	ldr	r3, [pc, #108]	; (8006c54 <_puts_r+0xd4>)
 8006be6:	429c      	cmp	r4, r3
 8006be8:	d101      	bne.n	8006bee <_puts_r+0x6e>
 8006bea:	68ac      	ldr	r4, [r5, #8]
 8006bec:	e7da      	b.n	8006ba4 <_puts_r+0x24>
 8006bee:	4b1a      	ldr	r3, [pc, #104]	; (8006c58 <_puts_r+0xd8>)
 8006bf0:	429c      	cmp	r4, r3
 8006bf2:	bf08      	it	eq
 8006bf4:	68ec      	ldreq	r4, [r5, #12]
 8006bf6:	e7d5      	b.n	8006ba4 <_puts_r+0x24>
 8006bf8:	4621      	mov	r1, r4
 8006bfa:	4628      	mov	r0, r5
 8006bfc:	f000 f8a8 	bl	8006d50 <__swsetup_r>
 8006c00:	2800      	cmp	r0, #0
 8006c02:	d0dd      	beq.n	8006bc0 <_puts_r+0x40>
 8006c04:	f04f 35ff 	mov.w	r5, #4294967295
 8006c08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c0a:	07da      	lsls	r2, r3, #31
 8006c0c:	d405      	bmi.n	8006c1a <_puts_r+0x9a>
 8006c0e:	89a3      	ldrh	r3, [r4, #12]
 8006c10:	059b      	lsls	r3, r3, #22
 8006c12:	d402      	bmi.n	8006c1a <_puts_r+0x9a>
 8006c14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c16:	f000 fac2 	bl	800719e <__retarget_lock_release_recursive>
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	bd70      	pop	{r4, r5, r6, pc}
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	da04      	bge.n	8006c2c <_puts_r+0xac>
 8006c22:	69a2      	ldr	r2, [r4, #24]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	dc06      	bgt.n	8006c36 <_puts_r+0xb6>
 8006c28:	290a      	cmp	r1, #10
 8006c2a:	d004      	beq.n	8006c36 <_puts_r+0xb6>
 8006c2c:	6823      	ldr	r3, [r4, #0]
 8006c2e:	1c5a      	adds	r2, r3, #1
 8006c30:	6022      	str	r2, [r4, #0]
 8006c32:	7019      	strb	r1, [r3, #0]
 8006c34:	e7c5      	b.n	8006bc2 <_puts_r+0x42>
 8006c36:	4622      	mov	r2, r4
 8006c38:	4628      	mov	r0, r5
 8006c3a:	f000 f837 	bl	8006cac <__swbuf_r>
 8006c3e:	3001      	adds	r0, #1
 8006c40:	d1bf      	bne.n	8006bc2 <_puts_r+0x42>
 8006c42:	e7df      	b.n	8006c04 <_puts_r+0x84>
 8006c44:	6823      	ldr	r3, [r4, #0]
 8006c46:	250a      	movs	r5, #10
 8006c48:	1c5a      	adds	r2, r3, #1
 8006c4a:	6022      	str	r2, [r4, #0]
 8006c4c:	701d      	strb	r5, [r3, #0]
 8006c4e:	e7db      	b.n	8006c08 <_puts_r+0x88>
 8006c50:	08008050 	.word	0x08008050
 8006c54:	08008070 	.word	0x08008070
 8006c58:	08008030 	.word	0x08008030

08006c5c <puts>:
 8006c5c:	4b02      	ldr	r3, [pc, #8]	; (8006c68 <puts+0xc>)
 8006c5e:	4601      	mov	r1, r0
 8006c60:	6818      	ldr	r0, [r3, #0]
 8006c62:	f7ff bf8d 	b.w	8006b80 <_puts_r>
 8006c66:	bf00      	nop
 8006c68:	20000024 	.word	0x20000024

08006c6c <siprintf>:
 8006c6c:	b40e      	push	{r1, r2, r3}
 8006c6e:	b500      	push	{lr}
 8006c70:	b09c      	sub	sp, #112	; 0x70
 8006c72:	ab1d      	add	r3, sp, #116	; 0x74
 8006c74:	9002      	str	r0, [sp, #8]
 8006c76:	9006      	str	r0, [sp, #24]
 8006c78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c7c:	4809      	ldr	r0, [pc, #36]	; (8006ca4 <siprintf+0x38>)
 8006c7e:	9107      	str	r1, [sp, #28]
 8006c80:	9104      	str	r1, [sp, #16]
 8006c82:	4909      	ldr	r1, [pc, #36]	; (8006ca8 <siprintf+0x3c>)
 8006c84:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c88:	9105      	str	r1, [sp, #20]
 8006c8a:	6800      	ldr	r0, [r0, #0]
 8006c8c:	9301      	str	r3, [sp, #4]
 8006c8e:	a902      	add	r1, sp, #8
 8006c90:	f000 fbf0 	bl	8007474 <_svfiprintf_r>
 8006c94:	9b02      	ldr	r3, [sp, #8]
 8006c96:	2200      	movs	r2, #0
 8006c98:	701a      	strb	r2, [r3, #0]
 8006c9a:	b01c      	add	sp, #112	; 0x70
 8006c9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ca0:	b003      	add	sp, #12
 8006ca2:	4770      	bx	lr
 8006ca4:	20000024 	.word	0x20000024
 8006ca8:	ffff0208 	.word	0xffff0208

08006cac <__swbuf_r>:
 8006cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cae:	460e      	mov	r6, r1
 8006cb0:	4614      	mov	r4, r2
 8006cb2:	4605      	mov	r5, r0
 8006cb4:	b118      	cbz	r0, 8006cbe <__swbuf_r+0x12>
 8006cb6:	6983      	ldr	r3, [r0, #24]
 8006cb8:	b90b      	cbnz	r3, 8006cbe <__swbuf_r+0x12>
 8006cba:	f000 f9d1 	bl	8007060 <__sinit>
 8006cbe:	4b21      	ldr	r3, [pc, #132]	; (8006d44 <__swbuf_r+0x98>)
 8006cc0:	429c      	cmp	r4, r3
 8006cc2:	d12b      	bne.n	8006d1c <__swbuf_r+0x70>
 8006cc4:	686c      	ldr	r4, [r5, #4]
 8006cc6:	69a3      	ldr	r3, [r4, #24]
 8006cc8:	60a3      	str	r3, [r4, #8]
 8006cca:	89a3      	ldrh	r3, [r4, #12]
 8006ccc:	071a      	lsls	r2, r3, #28
 8006cce:	d52f      	bpl.n	8006d30 <__swbuf_r+0x84>
 8006cd0:	6923      	ldr	r3, [r4, #16]
 8006cd2:	b36b      	cbz	r3, 8006d30 <__swbuf_r+0x84>
 8006cd4:	6923      	ldr	r3, [r4, #16]
 8006cd6:	6820      	ldr	r0, [r4, #0]
 8006cd8:	1ac0      	subs	r0, r0, r3
 8006cda:	6963      	ldr	r3, [r4, #20]
 8006cdc:	b2f6      	uxtb	r6, r6
 8006cde:	4283      	cmp	r3, r0
 8006ce0:	4637      	mov	r7, r6
 8006ce2:	dc04      	bgt.n	8006cee <__swbuf_r+0x42>
 8006ce4:	4621      	mov	r1, r4
 8006ce6:	4628      	mov	r0, r5
 8006ce8:	f000 f926 	bl	8006f38 <_fflush_r>
 8006cec:	bb30      	cbnz	r0, 8006d3c <__swbuf_r+0x90>
 8006cee:	68a3      	ldr	r3, [r4, #8]
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	60a3      	str	r3, [r4, #8]
 8006cf4:	6823      	ldr	r3, [r4, #0]
 8006cf6:	1c5a      	adds	r2, r3, #1
 8006cf8:	6022      	str	r2, [r4, #0]
 8006cfa:	701e      	strb	r6, [r3, #0]
 8006cfc:	6963      	ldr	r3, [r4, #20]
 8006cfe:	3001      	adds	r0, #1
 8006d00:	4283      	cmp	r3, r0
 8006d02:	d004      	beq.n	8006d0e <__swbuf_r+0x62>
 8006d04:	89a3      	ldrh	r3, [r4, #12]
 8006d06:	07db      	lsls	r3, r3, #31
 8006d08:	d506      	bpl.n	8006d18 <__swbuf_r+0x6c>
 8006d0a:	2e0a      	cmp	r6, #10
 8006d0c:	d104      	bne.n	8006d18 <__swbuf_r+0x6c>
 8006d0e:	4621      	mov	r1, r4
 8006d10:	4628      	mov	r0, r5
 8006d12:	f000 f911 	bl	8006f38 <_fflush_r>
 8006d16:	b988      	cbnz	r0, 8006d3c <__swbuf_r+0x90>
 8006d18:	4638      	mov	r0, r7
 8006d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d1c:	4b0a      	ldr	r3, [pc, #40]	; (8006d48 <__swbuf_r+0x9c>)
 8006d1e:	429c      	cmp	r4, r3
 8006d20:	d101      	bne.n	8006d26 <__swbuf_r+0x7a>
 8006d22:	68ac      	ldr	r4, [r5, #8]
 8006d24:	e7cf      	b.n	8006cc6 <__swbuf_r+0x1a>
 8006d26:	4b09      	ldr	r3, [pc, #36]	; (8006d4c <__swbuf_r+0xa0>)
 8006d28:	429c      	cmp	r4, r3
 8006d2a:	bf08      	it	eq
 8006d2c:	68ec      	ldreq	r4, [r5, #12]
 8006d2e:	e7ca      	b.n	8006cc6 <__swbuf_r+0x1a>
 8006d30:	4621      	mov	r1, r4
 8006d32:	4628      	mov	r0, r5
 8006d34:	f000 f80c 	bl	8006d50 <__swsetup_r>
 8006d38:	2800      	cmp	r0, #0
 8006d3a:	d0cb      	beq.n	8006cd4 <__swbuf_r+0x28>
 8006d3c:	f04f 37ff 	mov.w	r7, #4294967295
 8006d40:	e7ea      	b.n	8006d18 <__swbuf_r+0x6c>
 8006d42:	bf00      	nop
 8006d44:	08008050 	.word	0x08008050
 8006d48:	08008070 	.word	0x08008070
 8006d4c:	08008030 	.word	0x08008030

08006d50 <__swsetup_r>:
 8006d50:	4b32      	ldr	r3, [pc, #200]	; (8006e1c <__swsetup_r+0xcc>)
 8006d52:	b570      	push	{r4, r5, r6, lr}
 8006d54:	681d      	ldr	r5, [r3, #0]
 8006d56:	4606      	mov	r6, r0
 8006d58:	460c      	mov	r4, r1
 8006d5a:	b125      	cbz	r5, 8006d66 <__swsetup_r+0x16>
 8006d5c:	69ab      	ldr	r3, [r5, #24]
 8006d5e:	b913      	cbnz	r3, 8006d66 <__swsetup_r+0x16>
 8006d60:	4628      	mov	r0, r5
 8006d62:	f000 f97d 	bl	8007060 <__sinit>
 8006d66:	4b2e      	ldr	r3, [pc, #184]	; (8006e20 <__swsetup_r+0xd0>)
 8006d68:	429c      	cmp	r4, r3
 8006d6a:	d10f      	bne.n	8006d8c <__swsetup_r+0x3c>
 8006d6c:	686c      	ldr	r4, [r5, #4]
 8006d6e:	89a3      	ldrh	r3, [r4, #12]
 8006d70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d74:	0719      	lsls	r1, r3, #28
 8006d76:	d42c      	bmi.n	8006dd2 <__swsetup_r+0x82>
 8006d78:	06dd      	lsls	r5, r3, #27
 8006d7a:	d411      	bmi.n	8006da0 <__swsetup_r+0x50>
 8006d7c:	2309      	movs	r3, #9
 8006d7e:	6033      	str	r3, [r6, #0]
 8006d80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d84:	81a3      	strh	r3, [r4, #12]
 8006d86:	f04f 30ff 	mov.w	r0, #4294967295
 8006d8a:	e03e      	b.n	8006e0a <__swsetup_r+0xba>
 8006d8c:	4b25      	ldr	r3, [pc, #148]	; (8006e24 <__swsetup_r+0xd4>)
 8006d8e:	429c      	cmp	r4, r3
 8006d90:	d101      	bne.n	8006d96 <__swsetup_r+0x46>
 8006d92:	68ac      	ldr	r4, [r5, #8]
 8006d94:	e7eb      	b.n	8006d6e <__swsetup_r+0x1e>
 8006d96:	4b24      	ldr	r3, [pc, #144]	; (8006e28 <__swsetup_r+0xd8>)
 8006d98:	429c      	cmp	r4, r3
 8006d9a:	bf08      	it	eq
 8006d9c:	68ec      	ldreq	r4, [r5, #12]
 8006d9e:	e7e6      	b.n	8006d6e <__swsetup_r+0x1e>
 8006da0:	0758      	lsls	r0, r3, #29
 8006da2:	d512      	bpl.n	8006dca <__swsetup_r+0x7a>
 8006da4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006da6:	b141      	cbz	r1, 8006dba <__swsetup_r+0x6a>
 8006da8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006dac:	4299      	cmp	r1, r3
 8006dae:	d002      	beq.n	8006db6 <__swsetup_r+0x66>
 8006db0:	4630      	mov	r0, r6
 8006db2:	f000 fa59 	bl	8007268 <_free_r>
 8006db6:	2300      	movs	r3, #0
 8006db8:	6363      	str	r3, [r4, #52]	; 0x34
 8006dba:	89a3      	ldrh	r3, [r4, #12]
 8006dbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006dc0:	81a3      	strh	r3, [r4, #12]
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	6063      	str	r3, [r4, #4]
 8006dc6:	6923      	ldr	r3, [r4, #16]
 8006dc8:	6023      	str	r3, [r4, #0]
 8006dca:	89a3      	ldrh	r3, [r4, #12]
 8006dcc:	f043 0308 	orr.w	r3, r3, #8
 8006dd0:	81a3      	strh	r3, [r4, #12]
 8006dd2:	6923      	ldr	r3, [r4, #16]
 8006dd4:	b94b      	cbnz	r3, 8006dea <__swsetup_r+0x9a>
 8006dd6:	89a3      	ldrh	r3, [r4, #12]
 8006dd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006ddc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006de0:	d003      	beq.n	8006dea <__swsetup_r+0x9a>
 8006de2:	4621      	mov	r1, r4
 8006de4:	4630      	mov	r0, r6
 8006de6:	f000 f9ff 	bl	80071e8 <__smakebuf_r>
 8006dea:	89a0      	ldrh	r0, [r4, #12]
 8006dec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006df0:	f010 0301 	ands.w	r3, r0, #1
 8006df4:	d00a      	beq.n	8006e0c <__swsetup_r+0xbc>
 8006df6:	2300      	movs	r3, #0
 8006df8:	60a3      	str	r3, [r4, #8]
 8006dfa:	6963      	ldr	r3, [r4, #20]
 8006dfc:	425b      	negs	r3, r3
 8006dfe:	61a3      	str	r3, [r4, #24]
 8006e00:	6923      	ldr	r3, [r4, #16]
 8006e02:	b943      	cbnz	r3, 8006e16 <__swsetup_r+0xc6>
 8006e04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006e08:	d1ba      	bne.n	8006d80 <__swsetup_r+0x30>
 8006e0a:	bd70      	pop	{r4, r5, r6, pc}
 8006e0c:	0781      	lsls	r1, r0, #30
 8006e0e:	bf58      	it	pl
 8006e10:	6963      	ldrpl	r3, [r4, #20]
 8006e12:	60a3      	str	r3, [r4, #8]
 8006e14:	e7f4      	b.n	8006e00 <__swsetup_r+0xb0>
 8006e16:	2000      	movs	r0, #0
 8006e18:	e7f7      	b.n	8006e0a <__swsetup_r+0xba>
 8006e1a:	bf00      	nop
 8006e1c:	20000024 	.word	0x20000024
 8006e20:	08008050 	.word	0x08008050
 8006e24:	08008070 	.word	0x08008070
 8006e28:	08008030 	.word	0x08008030

08006e2c <__sflush_r>:
 8006e2c:	898a      	ldrh	r2, [r1, #12]
 8006e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e32:	4605      	mov	r5, r0
 8006e34:	0710      	lsls	r0, r2, #28
 8006e36:	460c      	mov	r4, r1
 8006e38:	d458      	bmi.n	8006eec <__sflush_r+0xc0>
 8006e3a:	684b      	ldr	r3, [r1, #4]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	dc05      	bgt.n	8006e4c <__sflush_r+0x20>
 8006e40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	dc02      	bgt.n	8006e4c <__sflush_r+0x20>
 8006e46:	2000      	movs	r0, #0
 8006e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e4e:	2e00      	cmp	r6, #0
 8006e50:	d0f9      	beq.n	8006e46 <__sflush_r+0x1a>
 8006e52:	2300      	movs	r3, #0
 8006e54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e58:	682f      	ldr	r7, [r5, #0]
 8006e5a:	602b      	str	r3, [r5, #0]
 8006e5c:	d032      	beq.n	8006ec4 <__sflush_r+0x98>
 8006e5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e60:	89a3      	ldrh	r3, [r4, #12]
 8006e62:	075a      	lsls	r2, r3, #29
 8006e64:	d505      	bpl.n	8006e72 <__sflush_r+0x46>
 8006e66:	6863      	ldr	r3, [r4, #4]
 8006e68:	1ac0      	subs	r0, r0, r3
 8006e6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e6c:	b10b      	cbz	r3, 8006e72 <__sflush_r+0x46>
 8006e6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e70:	1ac0      	subs	r0, r0, r3
 8006e72:	2300      	movs	r3, #0
 8006e74:	4602      	mov	r2, r0
 8006e76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e78:	6a21      	ldr	r1, [r4, #32]
 8006e7a:	4628      	mov	r0, r5
 8006e7c:	47b0      	blx	r6
 8006e7e:	1c43      	adds	r3, r0, #1
 8006e80:	89a3      	ldrh	r3, [r4, #12]
 8006e82:	d106      	bne.n	8006e92 <__sflush_r+0x66>
 8006e84:	6829      	ldr	r1, [r5, #0]
 8006e86:	291d      	cmp	r1, #29
 8006e88:	d82c      	bhi.n	8006ee4 <__sflush_r+0xb8>
 8006e8a:	4a2a      	ldr	r2, [pc, #168]	; (8006f34 <__sflush_r+0x108>)
 8006e8c:	40ca      	lsrs	r2, r1
 8006e8e:	07d6      	lsls	r6, r2, #31
 8006e90:	d528      	bpl.n	8006ee4 <__sflush_r+0xb8>
 8006e92:	2200      	movs	r2, #0
 8006e94:	6062      	str	r2, [r4, #4]
 8006e96:	04d9      	lsls	r1, r3, #19
 8006e98:	6922      	ldr	r2, [r4, #16]
 8006e9a:	6022      	str	r2, [r4, #0]
 8006e9c:	d504      	bpl.n	8006ea8 <__sflush_r+0x7c>
 8006e9e:	1c42      	adds	r2, r0, #1
 8006ea0:	d101      	bne.n	8006ea6 <__sflush_r+0x7a>
 8006ea2:	682b      	ldr	r3, [r5, #0]
 8006ea4:	b903      	cbnz	r3, 8006ea8 <__sflush_r+0x7c>
 8006ea6:	6560      	str	r0, [r4, #84]	; 0x54
 8006ea8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006eaa:	602f      	str	r7, [r5, #0]
 8006eac:	2900      	cmp	r1, #0
 8006eae:	d0ca      	beq.n	8006e46 <__sflush_r+0x1a>
 8006eb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006eb4:	4299      	cmp	r1, r3
 8006eb6:	d002      	beq.n	8006ebe <__sflush_r+0x92>
 8006eb8:	4628      	mov	r0, r5
 8006eba:	f000 f9d5 	bl	8007268 <_free_r>
 8006ebe:	2000      	movs	r0, #0
 8006ec0:	6360      	str	r0, [r4, #52]	; 0x34
 8006ec2:	e7c1      	b.n	8006e48 <__sflush_r+0x1c>
 8006ec4:	6a21      	ldr	r1, [r4, #32]
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	4628      	mov	r0, r5
 8006eca:	47b0      	blx	r6
 8006ecc:	1c41      	adds	r1, r0, #1
 8006ece:	d1c7      	bne.n	8006e60 <__sflush_r+0x34>
 8006ed0:	682b      	ldr	r3, [r5, #0]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d0c4      	beq.n	8006e60 <__sflush_r+0x34>
 8006ed6:	2b1d      	cmp	r3, #29
 8006ed8:	d001      	beq.n	8006ede <__sflush_r+0xb2>
 8006eda:	2b16      	cmp	r3, #22
 8006edc:	d101      	bne.n	8006ee2 <__sflush_r+0xb6>
 8006ede:	602f      	str	r7, [r5, #0]
 8006ee0:	e7b1      	b.n	8006e46 <__sflush_r+0x1a>
 8006ee2:	89a3      	ldrh	r3, [r4, #12]
 8006ee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ee8:	81a3      	strh	r3, [r4, #12]
 8006eea:	e7ad      	b.n	8006e48 <__sflush_r+0x1c>
 8006eec:	690f      	ldr	r7, [r1, #16]
 8006eee:	2f00      	cmp	r7, #0
 8006ef0:	d0a9      	beq.n	8006e46 <__sflush_r+0x1a>
 8006ef2:	0793      	lsls	r3, r2, #30
 8006ef4:	680e      	ldr	r6, [r1, #0]
 8006ef6:	bf08      	it	eq
 8006ef8:	694b      	ldreq	r3, [r1, #20]
 8006efa:	600f      	str	r7, [r1, #0]
 8006efc:	bf18      	it	ne
 8006efe:	2300      	movne	r3, #0
 8006f00:	eba6 0807 	sub.w	r8, r6, r7
 8006f04:	608b      	str	r3, [r1, #8]
 8006f06:	f1b8 0f00 	cmp.w	r8, #0
 8006f0a:	dd9c      	ble.n	8006e46 <__sflush_r+0x1a>
 8006f0c:	6a21      	ldr	r1, [r4, #32]
 8006f0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006f10:	4643      	mov	r3, r8
 8006f12:	463a      	mov	r2, r7
 8006f14:	4628      	mov	r0, r5
 8006f16:	47b0      	blx	r6
 8006f18:	2800      	cmp	r0, #0
 8006f1a:	dc06      	bgt.n	8006f2a <__sflush_r+0xfe>
 8006f1c:	89a3      	ldrh	r3, [r4, #12]
 8006f1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f22:	81a3      	strh	r3, [r4, #12]
 8006f24:	f04f 30ff 	mov.w	r0, #4294967295
 8006f28:	e78e      	b.n	8006e48 <__sflush_r+0x1c>
 8006f2a:	4407      	add	r7, r0
 8006f2c:	eba8 0800 	sub.w	r8, r8, r0
 8006f30:	e7e9      	b.n	8006f06 <__sflush_r+0xda>
 8006f32:	bf00      	nop
 8006f34:	20400001 	.word	0x20400001

08006f38 <_fflush_r>:
 8006f38:	b538      	push	{r3, r4, r5, lr}
 8006f3a:	690b      	ldr	r3, [r1, #16]
 8006f3c:	4605      	mov	r5, r0
 8006f3e:	460c      	mov	r4, r1
 8006f40:	b913      	cbnz	r3, 8006f48 <_fflush_r+0x10>
 8006f42:	2500      	movs	r5, #0
 8006f44:	4628      	mov	r0, r5
 8006f46:	bd38      	pop	{r3, r4, r5, pc}
 8006f48:	b118      	cbz	r0, 8006f52 <_fflush_r+0x1a>
 8006f4a:	6983      	ldr	r3, [r0, #24]
 8006f4c:	b90b      	cbnz	r3, 8006f52 <_fflush_r+0x1a>
 8006f4e:	f000 f887 	bl	8007060 <__sinit>
 8006f52:	4b14      	ldr	r3, [pc, #80]	; (8006fa4 <_fflush_r+0x6c>)
 8006f54:	429c      	cmp	r4, r3
 8006f56:	d11b      	bne.n	8006f90 <_fflush_r+0x58>
 8006f58:	686c      	ldr	r4, [r5, #4]
 8006f5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d0ef      	beq.n	8006f42 <_fflush_r+0xa>
 8006f62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f64:	07d0      	lsls	r0, r2, #31
 8006f66:	d404      	bmi.n	8006f72 <_fflush_r+0x3a>
 8006f68:	0599      	lsls	r1, r3, #22
 8006f6a:	d402      	bmi.n	8006f72 <_fflush_r+0x3a>
 8006f6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f6e:	f000 f915 	bl	800719c <__retarget_lock_acquire_recursive>
 8006f72:	4628      	mov	r0, r5
 8006f74:	4621      	mov	r1, r4
 8006f76:	f7ff ff59 	bl	8006e2c <__sflush_r>
 8006f7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f7c:	07da      	lsls	r2, r3, #31
 8006f7e:	4605      	mov	r5, r0
 8006f80:	d4e0      	bmi.n	8006f44 <_fflush_r+0xc>
 8006f82:	89a3      	ldrh	r3, [r4, #12]
 8006f84:	059b      	lsls	r3, r3, #22
 8006f86:	d4dd      	bmi.n	8006f44 <_fflush_r+0xc>
 8006f88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f8a:	f000 f908 	bl	800719e <__retarget_lock_release_recursive>
 8006f8e:	e7d9      	b.n	8006f44 <_fflush_r+0xc>
 8006f90:	4b05      	ldr	r3, [pc, #20]	; (8006fa8 <_fflush_r+0x70>)
 8006f92:	429c      	cmp	r4, r3
 8006f94:	d101      	bne.n	8006f9a <_fflush_r+0x62>
 8006f96:	68ac      	ldr	r4, [r5, #8]
 8006f98:	e7df      	b.n	8006f5a <_fflush_r+0x22>
 8006f9a:	4b04      	ldr	r3, [pc, #16]	; (8006fac <_fflush_r+0x74>)
 8006f9c:	429c      	cmp	r4, r3
 8006f9e:	bf08      	it	eq
 8006fa0:	68ec      	ldreq	r4, [r5, #12]
 8006fa2:	e7da      	b.n	8006f5a <_fflush_r+0x22>
 8006fa4:	08008050 	.word	0x08008050
 8006fa8:	08008070 	.word	0x08008070
 8006fac:	08008030 	.word	0x08008030

08006fb0 <std>:
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	b510      	push	{r4, lr}
 8006fb4:	4604      	mov	r4, r0
 8006fb6:	e9c0 3300 	strd	r3, r3, [r0]
 8006fba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006fbe:	6083      	str	r3, [r0, #8]
 8006fc0:	8181      	strh	r1, [r0, #12]
 8006fc2:	6643      	str	r3, [r0, #100]	; 0x64
 8006fc4:	81c2      	strh	r2, [r0, #14]
 8006fc6:	6183      	str	r3, [r0, #24]
 8006fc8:	4619      	mov	r1, r3
 8006fca:	2208      	movs	r2, #8
 8006fcc:	305c      	adds	r0, #92	; 0x5c
 8006fce:	f7ff fdb7 	bl	8006b40 <memset>
 8006fd2:	4b05      	ldr	r3, [pc, #20]	; (8006fe8 <std+0x38>)
 8006fd4:	6263      	str	r3, [r4, #36]	; 0x24
 8006fd6:	4b05      	ldr	r3, [pc, #20]	; (8006fec <std+0x3c>)
 8006fd8:	62a3      	str	r3, [r4, #40]	; 0x28
 8006fda:	4b05      	ldr	r3, [pc, #20]	; (8006ff0 <std+0x40>)
 8006fdc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006fde:	4b05      	ldr	r3, [pc, #20]	; (8006ff4 <std+0x44>)
 8006fe0:	6224      	str	r4, [r4, #32]
 8006fe2:	6323      	str	r3, [r4, #48]	; 0x30
 8006fe4:	bd10      	pop	{r4, pc}
 8006fe6:	bf00      	nop
 8006fe8:	08007c71 	.word	0x08007c71
 8006fec:	08007c93 	.word	0x08007c93
 8006ff0:	08007ccb 	.word	0x08007ccb
 8006ff4:	08007cef 	.word	0x08007cef

08006ff8 <_cleanup_r>:
 8006ff8:	4901      	ldr	r1, [pc, #4]	; (8007000 <_cleanup_r+0x8>)
 8006ffa:	f000 b8af 	b.w	800715c <_fwalk_reent>
 8006ffe:	bf00      	nop
 8007000:	08006f39 	.word	0x08006f39

08007004 <__sfmoreglue>:
 8007004:	b570      	push	{r4, r5, r6, lr}
 8007006:	1e4a      	subs	r2, r1, #1
 8007008:	2568      	movs	r5, #104	; 0x68
 800700a:	4355      	muls	r5, r2
 800700c:	460e      	mov	r6, r1
 800700e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007012:	f000 f979 	bl	8007308 <_malloc_r>
 8007016:	4604      	mov	r4, r0
 8007018:	b140      	cbz	r0, 800702c <__sfmoreglue+0x28>
 800701a:	2100      	movs	r1, #0
 800701c:	e9c0 1600 	strd	r1, r6, [r0]
 8007020:	300c      	adds	r0, #12
 8007022:	60a0      	str	r0, [r4, #8]
 8007024:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007028:	f7ff fd8a 	bl	8006b40 <memset>
 800702c:	4620      	mov	r0, r4
 800702e:	bd70      	pop	{r4, r5, r6, pc}

08007030 <__sfp_lock_acquire>:
 8007030:	4801      	ldr	r0, [pc, #4]	; (8007038 <__sfp_lock_acquire+0x8>)
 8007032:	f000 b8b3 	b.w	800719c <__retarget_lock_acquire_recursive>
 8007036:	bf00      	nop
 8007038:	20004374 	.word	0x20004374

0800703c <__sfp_lock_release>:
 800703c:	4801      	ldr	r0, [pc, #4]	; (8007044 <__sfp_lock_release+0x8>)
 800703e:	f000 b8ae 	b.w	800719e <__retarget_lock_release_recursive>
 8007042:	bf00      	nop
 8007044:	20004374 	.word	0x20004374

08007048 <__sinit_lock_acquire>:
 8007048:	4801      	ldr	r0, [pc, #4]	; (8007050 <__sinit_lock_acquire+0x8>)
 800704a:	f000 b8a7 	b.w	800719c <__retarget_lock_acquire_recursive>
 800704e:	bf00      	nop
 8007050:	2000436f 	.word	0x2000436f

08007054 <__sinit_lock_release>:
 8007054:	4801      	ldr	r0, [pc, #4]	; (800705c <__sinit_lock_release+0x8>)
 8007056:	f000 b8a2 	b.w	800719e <__retarget_lock_release_recursive>
 800705a:	bf00      	nop
 800705c:	2000436f 	.word	0x2000436f

08007060 <__sinit>:
 8007060:	b510      	push	{r4, lr}
 8007062:	4604      	mov	r4, r0
 8007064:	f7ff fff0 	bl	8007048 <__sinit_lock_acquire>
 8007068:	69a3      	ldr	r3, [r4, #24]
 800706a:	b11b      	cbz	r3, 8007074 <__sinit+0x14>
 800706c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007070:	f7ff bff0 	b.w	8007054 <__sinit_lock_release>
 8007074:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007078:	6523      	str	r3, [r4, #80]	; 0x50
 800707a:	4b13      	ldr	r3, [pc, #76]	; (80070c8 <__sinit+0x68>)
 800707c:	4a13      	ldr	r2, [pc, #76]	; (80070cc <__sinit+0x6c>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	62a2      	str	r2, [r4, #40]	; 0x28
 8007082:	42a3      	cmp	r3, r4
 8007084:	bf04      	itt	eq
 8007086:	2301      	moveq	r3, #1
 8007088:	61a3      	streq	r3, [r4, #24]
 800708a:	4620      	mov	r0, r4
 800708c:	f000 f820 	bl	80070d0 <__sfp>
 8007090:	6060      	str	r0, [r4, #4]
 8007092:	4620      	mov	r0, r4
 8007094:	f000 f81c 	bl	80070d0 <__sfp>
 8007098:	60a0      	str	r0, [r4, #8]
 800709a:	4620      	mov	r0, r4
 800709c:	f000 f818 	bl	80070d0 <__sfp>
 80070a0:	2200      	movs	r2, #0
 80070a2:	60e0      	str	r0, [r4, #12]
 80070a4:	2104      	movs	r1, #4
 80070a6:	6860      	ldr	r0, [r4, #4]
 80070a8:	f7ff ff82 	bl	8006fb0 <std>
 80070ac:	68a0      	ldr	r0, [r4, #8]
 80070ae:	2201      	movs	r2, #1
 80070b0:	2109      	movs	r1, #9
 80070b2:	f7ff ff7d 	bl	8006fb0 <std>
 80070b6:	68e0      	ldr	r0, [r4, #12]
 80070b8:	2202      	movs	r2, #2
 80070ba:	2112      	movs	r1, #18
 80070bc:	f7ff ff78 	bl	8006fb0 <std>
 80070c0:	2301      	movs	r3, #1
 80070c2:	61a3      	str	r3, [r4, #24]
 80070c4:	e7d2      	b.n	800706c <__sinit+0xc>
 80070c6:	bf00      	nop
 80070c8:	0800802c 	.word	0x0800802c
 80070cc:	08006ff9 	.word	0x08006ff9

080070d0 <__sfp>:
 80070d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070d2:	4607      	mov	r7, r0
 80070d4:	f7ff ffac 	bl	8007030 <__sfp_lock_acquire>
 80070d8:	4b1e      	ldr	r3, [pc, #120]	; (8007154 <__sfp+0x84>)
 80070da:	681e      	ldr	r6, [r3, #0]
 80070dc:	69b3      	ldr	r3, [r6, #24]
 80070de:	b913      	cbnz	r3, 80070e6 <__sfp+0x16>
 80070e0:	4630      	mov	r0, r6
 80070e2:	f7ff ffbd 	bl	8007060 <__sinit>
 80070e6:	3648      	adds	r6, #72	; 0x48
 80070e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80070ec:	3b01      	subs	r3, #1
 80070ee:	d503      	bpl.n	80070f8 <__sfp+0x28>
 80070f0:	6833      	ldr	r3, [r6, #0]
 80070f2:	b30b      	cbz	r3, 8007138 <__sfp+0x68>
 80070f4:	6836      	ldr	r6, [r6, #0]
 80070f6:	e7f7      	b.n	80070e8 <__sfp+0x18>
 80070f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80070fc:	b9d5      	cbnz	r5, 8007134 <__sfp+0x64>
 80070fe:	4b16      	ldr	r3, [pc, #88]	; (8007158 <__sfp+0x88>)
 8007100:	60e3      	str	r3, [r4, #12]
 8007102:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007106:	6665      	str	r5, [r4, #100]	; 0x64
 8007108:	f000 f847 	bl	800719a <__retarget_lock_init_recursive>
 800710c:	f7ff ff96 	bl	800703c <__sfp_lock_release>
 8007110:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007114:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007118:	6025      	str	r5, [r4, #0]
 800711a:	61a5      	str	r5, [r4, #24]
 800711c:	2208      	movs	r2, #8
 800711e:	4629      	mov	r1, r5
 8007120:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007124:	f7ff fd0c 	bl	8006b40 <memset>
 8007128:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800712c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007130:	4620      	mov	r0, r4
 8007132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007134:	3468      	adds	r4, #104	; 0x68
 8007136:	e7d9      	b.n	80070ec <__sfp+0x1c>
 8007138:	2104      	movs	r1, #4
 800713a:	4638      	mov	r0, r7
 800713c:	f7ff ff62 	bl	8007004 <__sfmoreglue>
 8007140:	4604      	mov	r4, r0
 8007142:	6030      	str	r0, [r6, #0]
 8007144:	2800      	cmp	r0, #0
 8007146:	d1d5      	bne.n	80070f4 <__sfp+0x24>
 8007148:	f7ff ff78 	bl	800703c <__sfp_lock_release>
 800714c:	230c      	movs	r3, #12
 800714e:	603b      	str	r3, [r7, #0]
 8007150:	e7ee      	b.n	8007130 <__sfp+0x60>
 8007152:	bf00      	nop
 8007154:	0800802c 	.word	0x0800802c
 8007158:	ffff0001 	.word	0xffff0001

0800715c <_fwalk_reent>:
 800715c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007160:	4606      	mov	r6, r0
 8007162:	4688      	mov	r8, r1
 8007164:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007168:	2700      	movs	r7, #0
 800716a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800716e:	f1b9 0901 	subs.w	r9, r9, #1
 8007172:	d505      	bpl.n	8007180 <_fwalk_reent+0x24>
 8007174:	6824      	ldr	r4, [r4, #0]
 8007176:	2c00      	cmp	r4, #0
 8007178:	d1f7      	bne.n	800716a <_fwalk_reent+0xe>
 800717a:	4638      	mov	r0, r7
 800717c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007180:	89ab      	ldrh	r3, [r5, #12]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d907      	bls.n	8007196 <_fwalk_reent+0x3a>
 8007186:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800718a:	3301      	adds	r3, #1
 800718c:	d003      	beq.n	8007196 <_fwalk_reent+0x3a>
 800718e:	4629      	mov	r1, r5
 8007190:	4630      	mov	r0, r6
 8007192:	47c0      	blx	r8
 8007194:	4307      	orrs	r7, r0
 8007196:	3568      	adds	r5, #104	; 0x68
 8007198:	e7e9      	b.n	800716e <_fwalk_reent+0x12>

0800719a <__retarget_lock_init_recursive>:
 800719a:	4770      	bx	lr

0800719c <__retarget_lock_acquire_recursive>:
 800719c:	4770      	bx	lr

0800719e <__retarget_lock_release_recursive>:
 800719e:	4770      	bx	lr

080071a0 <__swhatbuf_r>:
 80071a0:	b570      	push	{r4, r5, r6, lr}
 80071a2:	460e      	mov	r6, r1
 80071a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071a8:	2900      	cmp	r1, #0
 80071aa:	b096      	sub	sp, #88	; 0x58
 80071ac:	4614      	mov	r4, r2
 80071ae:	461d      	mov	r5, r3
 80071b0:	da07      	bge.n	80071c2 <__swhatbuf_r+0x22>
 80071b2:	2300      	movs	r3, #0
 80071b4:	602b      	str	r3, [r5, #0]
 80071b6:	89b3      	ldrh	r3, [r6, #12]
 80071b8:	061a      	lsls	r2, r3, #24
 80071ba:	d410      	bmi.n	80071de <__swhatbuf_r+0x3e>
 80071bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071c0:	e00e      	b.n	80071e0 <__swhatbuf_r+0x40>
 80071c2:	466a      	mov	r2, sp
 80071c4:	f000 fdba 	bl	8007d3c <_fstat_r>
 80071c8:	2800      	cmp	r0, #0
 80071ca:	dbf2      	blt.n	80071b2 <__swhatbuf_r+0x12>
 80071cc:	9a01      	ldr	r2, [sp, #4]
 80071ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80071d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80071d6:	425a      	negs	r2, r3
 80071d8:	415a      	adcs	r2, r3
 80071da:	602a      	str	r2, [r5, #0]
 80071dc:	e7ee      	b.n	80071bc <__swhatbuf_r+0x1c>
 80071de:	2340      	movs	r3, #64	; 0x40
 80071e0:	2000      	movs	r0, #0
 80071e2:	6023      	str	r3, [r4, #0]
 80071e4:	b016      	add	sp, #88	; 0x58
 80071e6:	bd70      	pop	{r4, r5, r6, pc}

080071e8 <__smakebuf_r>:
 80071e8:	898b      	ldrh	r3, [r1, #12]
 80071ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80071ec:	079d      	lsls	r5, r3, #30
 80071ee:	4606      	mov	r6, r0
 80071f0:	460c      	mov	r4, r1
 80071f2:	d507      	bpl.n	8007204 <__smakebuf_r+0x1c>
 80071f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80071f8:	6023      	str	r3, [r4, #0]
 80071fa:	6123      	str	r3, [r4, #16]
 80071fc:	2301      	movs	r3, #1
 80071fe:	6163      	str	r3, [r4, #20]
 8007200:	b002      	add	sp, #8
 8007202:	bd70      	pop	{r4, r5, r6, pc}
 8007204:	ab01      	add	r3, sp, #4
 8007206:	466a      	mov	r2, sp
 8007208:	f7ff ffca 	bl	80071a0 <__swhatbuf_r>
 800720c:	9900      	ldr	r1, [sp, #0]
 800720e:	4605      	mov	r5, r0
 8007210:	4630      	mov	r0, r6
 8007212:	f000 f879 	bl	8007308 <_malloc_r>
 8007216:	b948      	cbnz	r0, 800722c <__smakebuf_r+0x44>
 8007218:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800721c:	059a      	lsls	r2, r3, #22
 800721e:	d4ef      	bmi.n	8007200 <__smakebuf_r+0x18>
 8007220:	f023 0303 	bic.w	r3, r3, #3
 8007224:	f043 0302 	orr.w	r3, r3, #2
 8007228:	81a3      	strh	r3, [r4, #12]
 800722a:	e7e3      	b.n	80071f4 <__smakebuf_r+0xc>
 800722c:	4b0d      	ldr	r3, [pc, #52]	; (8007264 <__smakebuf_r+0x7c>)
 800722e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007230:	89a3      	ldrh	r3, [r4, #12]
 8007232:	6020      	str	r0, [r4, #0]
 8007234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007238:	81a3      	strh	r3, [r4, #12]
 800723a:	9b00      	ldr	r3, [sp, #0]
 800723c:	6163      	str	r3, [r4, #20]
 800723e:	9b01      	ldr	r3, [sp, #4]
 8007240:	6120      	str	r0, [r4, #16]
 8007242:	b15b      	cbz	r3, 800725c <__smakebuf_r+0x74>
 8007244:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007248:	4630      	mov	r0, r6
 800724a:	f000 fd89 	bl	8007d60 <_isatty_r>
 800724e:	b128      	cbz	r0, 800725c <__smakebuf_r+0x74>
 8007250:	89a3      	ldrh	r3, [r4, #12]
 8007252:	f023 0303 	bic.w	r3, r3, #3
 8007256:	f043 0301 	orr.w	r3, r3, #1
 800725a:	81a3      	strh	r3, [r4, #12]
 800725c:	89a0      	ldrh	r0, [r4, #12]
 800725e:	4305      	orrs	r5, r0
 8007260:	81a5      	strh	r5, [r4, #12]
 8007262:	e7cd      	b.n	8007200 <__smakebuf_r+0x18>
 8007264:	08006ff9 	.word	0x08006ff9

08007268 <_free_r>:
 8007268:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800726a:	2900      	cmp	r1, #0
 800726c:	d048      	beq.n	8007300 <_free_r+0x98>
 800726e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007272:	9001      	str	r0, [sp, #4]
 8007274:	2b00      	cmp	r3, #0
 8007276:	f1a1 0404 	sub.w	r4, r1, #4
 800727a:	bfb8      	it	lt
 800727c:	18e4      	addlt	r4, r4, r3
 800727e:	f000 fdb9 	bl	8007df4 <__malloc_lock>
 8007282:	4a20      	ldr	r2, [pc, #128]	; (8007304 <_free_r+0x9c>)
 8007284:	9801      	ldr	r0, [sp, #4]
 8007286:	6813      	ldr	r3, [r2, #0]
 8007288:	4615      	mov	r5, r2
 800728a:	b933      	cbnz	r3, 800729a <_free_r+0x32>
 800728c:	6063      	str	r3, [r4, #4]
 800728e:	6014      	str	r4, [r2, #0]
 8007290:	b003      	add	sp, #12
 8007292:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007296:	f000 bdb3 	b.w	8007e00 <__malloc_unlock>
 800729a:	42a3      	cmp	r3, r4
 800729c:	d90b      	bls.n	80072b6 <_free_r+0x4e>
 800729e:	6821      	ldr	r1, [r4, #0]
 80072a0:	1862      	adds	r2, r4, r1
 80072a2:	4293      	cmp	r3, r2
 80072a4:	bf04      	itt	eq
 80072a6:	681a      	ldreq	r2, [r3, #0]
 80072a8:	685b      	ldreq	r3, [r3, #4]
 80072aa:	6063      	str	r3, [r4, #4]
 80072ac:	bf04      	itt	eq
 80072ae:	1852      	addeq	r2, r2, r1
 80072b0:	6022      	streq	r2, [r4, #0]
 80072b2:	602c      	str	r4, [r5, #0]
 80072b4:	e7ec      	b.n	8007290 <_free_r+0x28>
 80072b6:	461a      	mov	r2, r3
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	b10b      	cbz	r3, 80072c0 <_free_r+0x58>
 80072bc:	42a3      	cmp	r3, r4
 80072be:	d9fa      	bls.n	80072b6 <_free_r+0x4e>
 80072c0:	6811      	ldr	r1, [r2, #0]
 80072c2:	1855      	adds	r5, r2, r1
 80072c4:	42a5      	cmp	r5, r4
 80072c6:	d10b      	bne.n	80072e0 <_free_r+0x78>
 80072c8:	6824      	ldr	r4, [r4, #0]
 80072ca:	4421      	add	r1, r4
 80072cc:	1854      	adds	r4, r2, r1
 80072ce:	42a3      	cmp	r3, r4
 80072d0:	6011      	str	r1, [r2, #0]
 80072d2:	d1dd      	bne.n	8007290 <_free_r+0x28>
 80072d4:	681c      	ldr	r4, [r3, #0]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	6053      	str	r3, [r2, #4]
 80072da:	4421      	add	r1, r4
 80072dc:	6011      	str	r1, [r2, #0]
 80072de:	e7d7      	b.n	8007290 <_free_r+0x28>
 80072e0:	d902      	bls.n	80072e8 <_free_r+0x80>
 80072e2:	230c      	movs	r3, #12
 80072e4:	6003      	str	r3, [r0, #0]
 80072e6:	e7d3      	b.n	8007290 <_free_r+0x28>
 80072e8:	6825      	ldr	r5, [r4, #0]
 80072ea:	1961      	adds	r1, r4, r5
 80072ec:	428b      	cmp	r3, r1
 80072ee:	bf04      	itt	eq
 80072f0:	6819      	ldreq	r1, [r3, #0]
 80072f2:	685b      	ldreq	r3, [r3, #4]
 80072f4:	6063      	str	r3, [r4, #4]
 80072f6:	bf04      	itt	eq
 80072f8:	1949      	addeq	r1, r1, r5
 80072fa:	6021      	streq	r1, [r4, #0]
 80072fc:	6054      	str	r4, [r2, #4]
 80072fe:	e7c7      	b.n	8007290 <_free_r+0x28>
 8007300:	b003      	add	sp, #12
 8007302:	bd30      	pop	{r4, r5, pc}
 8007304:	20000100 	.word	0x20000100

08007308 <_malloc_r>:
 8007308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800730a:	1ccd      	adds	r5, r1, #3
 800730c:	f025 0503 	bic.w	r5, r5, #3
 8007310:	3508      	adds	r5, #8
 8007312:	2d0c      	cmp	r5, #12
 8007314:	bf38      	it	cc
 8007316:	250c      	movcc	r5, #12
 8007318:	2d00      	cmp	r5, #0
 800731a:	4606      	mov	r6, r0
 800731c:	db01      	blt.n	8007322 <_malloc_r+0x1a>
 800731e:	42a9      	cmp	r1, r5
 8007320:	d903      	bls.n	800732a <_malloc_r+0x22>
 8007322:	230c      	movs	r3, #12
 8007324:	6033      	str	r3, [r6, #0]
 8007326:	2000      	movs	r0, #0
 8007328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800732a:	f000 fd63 	bl	8007df4 <__malloc_lock>
 800732e:	4921      	ldr	r1, [pc, #132]	; (80073b4 <_malloc_r+0xac>)
 8007330:	680a      	ldr	r2, [r1, #0]
 8007332:	4614      	mov	r4, r2
 8007334:	b99c      	cbnz	r4, 800735e <_malloc_r+0x56>
 8007336:	4f20      	ldr	r7, [pc, #128]	; (80073b8 <_malloc_r+0xb0>)
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	b923      	cbnz	r3, 8007346 <_malloc_r+0x3e>
 800733c:	4621      	mov	r1, r4
 800733e:	4630      	mov	r0, r6
 8007340:	f000 fc86 	bl	8007c50 <_sbrk_r>
 8007344:	6038      	str	r0, [r7, #0]
 8007346:	4629      	mov	r1, r5
 8007348:	4630      	mov	r0, r6
 800734a:	f000 fc81 	bl	8007c50 <_sbrk_r>
 800734e:	1c43      	adds	r3, r0, #1
 8007350:	d123      	bne.n	800739a <_malloc_r+0x92>
 8007352:	230c      	movs	r3, #12
 8007354:	6033      	str	r3, [r6, #0]
 8007356:	4630      	mov	r0, r6
 8007358:	f000 fd52 	bl	8007e00 <__malloc_unlock>
 800735c:	e7e3      	b.n	8007326 <_malloc_r+0x1e>
 800735e:	6823      	ldr	r3, [r4, #0]
 8007360:	1b5b      	subs	r3, r3, r5
 8007362:	d417      	bmi.n	8007394 <_malloc_r+0x8c>
 8007364:	2b0b      	cmp	r3, #11
 8007366:	d903      	bls.n	8007370 <_malloc_r+0x68>
 8007368:	6023      	str	r3, [r4, #0]
 800736a:	441c      	add	r4, r3
 800736c:	6025      	str	r5, [r4, #0]
 800736e:	e004      	b.n	800737a <_malloc_r+0x72>
 8007370:	6863      	ldr	r3, [r4, #4]
 8007372:	42a2      	cmp	r2, r4
 8007374:	bf0c      	ite	eq
 8007376:	600b      	streq	r3, [r1, #0]
 8007378:	6053      	strne	r3, [r2, #4]
 800737a:	4630      	mov	r0, r6
 800737c:	f000 fd40 	bl	8007e00 <__malloc_unlock>
 8007380:	f104 000b 	add.w	r0, r4, #11
 8007384:	1d23      	adds	r3, r4, #4
 8007386:	f020 0007 	bic.w	r0, r0, #7
 800738a:	1ac2      	subs	r2, r0, r3
 800738c:	d0cc      	beq.n	8007328 <_malloc_r+0x20>
 800738e:	1a1b      	subs	r3, r3, r0
 8007390:	50a3      	str	r3, [r4, r2]
 8007392:	e7c9      	b.n	8007328 <_malloc_r+0x20>
 8007394:	4622      	mov	r2, r4
 8007396:	6864      	ldr	r4, [r4, #4]
 8007398:	e7cc      	b.n	8007334 <_malloc_r+0x2c>
 800739a:	1cc4      	adds	r4, r0, #3
 800739c:	f024 0403 	bic.w	r4, r4, #3
 80073a0:	42a0      	cmp	r0, r4
 80073a2:	d0e3      	beq.n	800736c <_malloc_r+0x64>
 80073a4:	1a21      	subs	r1, r4, r0
 80073a6:	4630      	mov	r0, r6
 80073a8:	f000 fc52 	bl	8007c50 <_sbrk_r>
 80073ac:	3001      	adds	r0, #1
 80073ae:	d1dd      	bne.n	800736c <_malloc_r+0x64>
 80073b0:	e7cf      	b.n	8007352 <_malloc_r+0x4a>
 80073b2:	bf00      	nop
 80073b4:	20000100 	.word	0x20000100
 80073b8:	20000104 	.word	0x20000104

080073bc <__ssputs_r>:
 80073bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073c0:	688e      	ldr	r6, [r1, #8]
 80073c2:	429e      	cmp	r6, r3
 80073c4:	4682      	mov	sl, r0
 80073c6:	460c      	mov	r4, r1
 80073c8:	4690      	mov	r8, r2
 80073ca:	461f      	mov	r7, r3
 80073cc:	d838      	bhi.n	8007440 <__ssputs_r+0x84>
 80073ce:	898a      	ldrh	r2, [r1, #12]
 80073d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80073d4:	d032      	beq.n	800743c <__ssputs_r+0x80>
 80073d6:	6825      	ldr	r5, [r4, #0]
 80073d8:	6909      	ldr	r1, [r1, #16]
 80073da:	eba5 0901 	sub.w	r9, r5, r1
 80073de:	6965      	ldr	r5, [r4, #20]
 80073e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80073e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80073e8:	3301      	adds	r3, #1
 80073ea:	444b      	add	r3, r9
 80073ec:	106d      	asrs	r5, r5, #1
 80073ee:	429d      	cmp	r5, r3
 80073f0:	bf38      	it	cc
 80073f2:	461d      	movcc	r5, r3
 80073f4:	0553      	lsls	r3, r2, #21
 80073f6:	d531      	bpl.n	800745c <__ssputs_r+0xa0>
 80073f8:	4629      	mov	r1, r5
 80073fa:	f7ff ff85 	bl	8007308 <_malloc_r>
 80073fe:	4606      	mov	r6, r0
 8007400:	b950      	cbnz	r0, 8007418 <__ssputs_r+0x5c>
 8007402:	230c      	movs	r3, #12
 8007404:	f8ca 3000 	str.w	r3, [sl]
 8007408:	89a3      	ldrh	r3, [r4, #12]
 800740a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800740e:	81a3      	strh	r3, [r4, #12]
 8007410:	f04f 30ff 	mov.w	r0, #4294967295
 8007414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007418:	6921      	ldr	r1, [r4, #16]
 800741a:	464a      	mov	r2, r9
 800741c:	f000 fcc2 	bl	8007da4 <memcpy>
 8007420:	89a3      	ldrh	r3, [r4, #12]
 8007422:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800742a:	81a3      	strh	r3, [r4, #12]
 800742c:	6126      	str	r6, [r4, #16]
 800742e:	6165      	str	r5, [r4, #20]
 8007430:	444e      	add	r6, r9
 8007432:	eba5 0509 	sub.w	r5, r5, r9
 8007436:	6026      	str	r6, [r4, #0]
 8007438:	60a5      	str	r5, [r4, #8]
 800743a:	463e      	mov	r6, r7
 800743c:	42be      	cmp	r6, r7
 800743e:	d900      	bls.n	8007442 <__ssputs_r+0x86>
 8007440:	463e      	mov	r6, r7
 8007442:	4632      	mov	r2, r6
 8007444:	6820      	ldr	r0, [r4, #0]
 8007446:	4641      	mov	r1, r8
 8007448:	f000 fcba 	bl	8007dc0 <memmove>
 800744c:	68a3      	ldr	r3, [r4, #8]
 800744e:	6822      	ldr	r2, [r4, #0]
 8007450:	1b9b      	subs	r3, r3, r6
 8007452:	4432      	add	r2, r6
 8007454:	60a3      	str	r3, [r4, #8]
 8007456:	6022      	str	r2, [r4, #0]
 8007458:	2000      	movs	r0, #0
 800745a:	e7db      	b.n	8007414 <__ssputs_r+0x58>
 800745c:	462a      	mov	r2, r5
 800745e:	f000 fcd5 	bl	8007e0c <_realloc_r>
 8007462:	4606      	mov	r6, r0
 8007464:	2800      	cmp	r0, #0
 8007466:	d1e1      	bne.n	800742c <__ssputs_r+0x70>
 8007468:	6921      	ldr	r1, [r4, #16]
 800746a:	4650      	mov	r0, sl
 800746c:	f7ff fefc 	bl	8007268 <_free_r>
 8007470:	e7c7      	b.n	8007402 <__ssputs_r+0x46>
	...

08007474 <_svfiprintf_r>:
 8007474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007478:	4698      	mov	r8, r3
 800747a:	898b      	ldrh	r3, [r1, #12]
 800747c:	061b      	lsls	r3, r3, #24
 800747e:	b09d      	sub	sp, #116	; 0x74
 8007480:	4607      	mov	r7, r0
 8007482:	460d      	mov	r5, r1
 8007484:	4614      	mov	r4, r2
 8007486:	d50e      	bpl.n	80074a6 <_svfiprintf_r+0x32>
 8007488:	690b      	ldr	r3, [r1, #16]
 800748a:	b963      	cbnz	r3, 80074a6 <_svfiprintf_r+0x32>
 800748c:	2140      	movs	r1, #64	; 0x40
 800748e:	f7ff ff3b 	bl	8007308 <_malloc_r>
 8007492:	6028      	str	r0, [r5, #0]
 8007494:	6128      	str	r0, [r5, #16]
 8007496:	b920      	cbnz	r0, 80074a2 <_svfiprintf_r+0x2e>
 8007498:	230c      	movs	r3, #12
 800749a:	603b      	str	r3, [r7, #0]
 800749c:	f04f 30ff 	mov.w	r0, #4294967295
 80074a0:	e0d1      	b.n	8007646 <_svfiprintf_r+0x1d2>
 80074a2:	2340      	movs	r3, #64	; 0x40
 80074a4:	616b      	str	r3, [r5, #20]
 80074a6:	2300      	movs	r3, #0
 80074a8:	9309      	str	r3, [sp, #36]	; 0x24
 80074aa:	2320      	movs	r3, #32
 80074ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80074b4:	2330      	movs	r3, #48	; 0x30
 80074b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007660 <_svfiprintf_r+0x1ec>
 80074ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074be:	f04f 0901 	mov.w	r9, #1
 80074c2:	4623      	mov	r3, r4
 80074c4:	469a      	mov	sl, r3
 80074c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074ca:	b10a      	cbz	r2, 80074d0 <_svfiprintf_r+0x5c>
 80074cc:	2a25      	cmp	r2, #37	; 0x25
 80074ce:	d1f9      	bne.n	80074c4 <_svfiprintf_r+0x50>
 80074d0:	ebba 0b04 	subs.w	fp, sl, r4
 80074d4:	d00b      	beq.n	80074ee <_svfiprintf_r+0x7a>
 80074d6:	465b      	mov	r3, fp
 80074d8:	4622      	mov	r2, r4
 80074da:	4629      	mov	r1, r5
 80074dc:	4638      	mov	r0, r7
 80074de:	f7ff ff6d 	bl	80073bc <__ssputs_r>
 80074e2:	3001      	adds	r0, #1
 80074e4:	f000 80aa 	beq.w	800763c <_svfiprintf_r+0x1c8>
 80074e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074ea:	445a      	add	r2, fp
 80074ec:	9209      	str	r2, [sp, #36]	; 0x24
 80074ee:	f89a 3000 	ldrb.w	r3, [sl]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	f000 80a2 	beq.w	800763c <_svfiprintf_r+0x1c8>
 80074f8:	2300      	movs	r3, #0
 80074fa:	f04f 32ff 	mov.w	r2, #4294967295
 80074fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007502:	f10a 0a01 	add.w	sl, sl, #1
 8007506:	9304      	str	r3, [sp, #16]
 8007508:	9307      	str	r3, [sp, #28]
 800750a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800750e:	931a      	str	r3, [sp, #104]	; 0x68
 8007510:	4654      	mov	r4, sl
 8007512:	2205      	movs	r2, #5
 8007514:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007518:	4851      	ldr	r0, [pc, #324]	; (8007660 <_svfiprintf_r+0x1ec>)
 800751a:	f7f8 fe71 	bl	8000200 <memchr>
 800751e:	9a04      	ldr	r2, [sp, #16]
 8007520:	b9d8      	cbnz	r0, 800755a <_svfiprintf_r+0xe6>
 8007522:	06d0      	lsls	r0, r2, #27
 8007524:	bf44      	itt	mi
 8007526:	2320      	movmi	r3, #32
 8007528:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800752c:	0711      	lsls	r1, r2, #28
 800752e:	bf44      	itt	mi
 8007530:	232b      	movmi	r3, #43	; 0x2b
 8007532:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007536:	f89a 3000 	ldrb.w	r3, [sl]
 800753a:	2b2a      	cmp	r3, #42	; 0x2a
 800753c:	d015      	beq.n	800756a <_svfiprintf_r+0xf6>
 800753e:	9a07      	ldr	r2, [sp, #28]
 8007540:	4654      	mov	r4, sl
 8007542:	2000      	movs	r0, #0
 8007544:	f04f 0c0a 	mov.w	ip, #10
 8007548:	4621      	mov	r1, r4
 800754a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800754e:	3b30      	subs	r3, #48	; 0x30
 8007550:	2b09      	cmp	r3, #9
 8007552:	d94e      	bls.n	80075f2 <_svfiprintf_r+0x17e>
 8007554:	b1b0      	cbz	r0, 8007584 <_svfiprintf_r+0x110>
 8007556:	9207      	str	r2, [sp, #28]
 8007558:	e014      	b.n	8007584 <_svfiprintf_r+0x110>
 800755a:	eba0 0308 	sub.w	r3, r0, r8
 800755e:	fa09 f303 	lsl.w	r3, r9, r3
 8007562:	4313      	orrs	r3, r2
 8007564:	9304      	str	r3, [sp, #16]
 8007566:	46a2      	mov	sl, r4
 8007568:	e7d2      	b.n	8007510 <_svfiprintf_r+0x9c>
 800756a:	9b03      	ldr	r3, [sp, #12]
 800756c:	1d19      	adds	r1, r3, #4
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	9103      	str	r1, [sp, #12]
 8007572:	2b00      	cmp	r3, #0
 8007574:	bfbb      	ittet	lt
 8007576:	425b      	neglt	r3, r3
 8007578:	f042 0202 	orrlt.w	r2, r2, #2
 800757c:	9307      	strge	r3, [sp, #28]
 800757e:	9307      	strlt	r3, [sp, #28]
 8007580:	bfb8      	it	lt
 8007582:	9204      	strlt	r2, [sp, #16]
 8007584:	7823      	ldrb	r3, [r4, #0]
 8007586:	2b2e      	cmp	r3, #46	; 0x2e
 8007588:	d10c      	bne.n	80075a4 <_svfiprintf_r+0x130>
 800758a:	7863      	ldrb	r3, [r4, #1]
 800758c:	2b2a      	cmp	r3, #42	; 0x2a
 800758e:	d135      	bne.n	80075fc <_svfiprintf_r+0x188>
 8007590:	9b03      	ldr	r3, [sp, #12]
 8007592:	1d1a      	adds	r2, r3, #4
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	9203      	str	r2, [sp, #12]
 8007598:	2b00      	cmp	r3, #0
 800759a:	bfb8      	it	lt
 800759c:	f04f 33ff 	movlt.w	r3, #4294967295
 80075a0:	3402      	adds	r4, #2
 80075a2:	9305      	str	r3, [sp, #20]
 80075a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007670 <_svfiprintf_r+0x1fc>
 80075a8:	7821      	ldrb	r1, [r4, #0]
 80075aa:	2203      	movs	r2, #3
 80075ac:	4650      	mov	r0, sl
 80075ae:	f7f8 fe27 	bl	8000200 <memchr>
 80075b2:	b140      	cbz	r0, 80075c6 <_svfiprintf_r+0x152>
 80075b4:	2340      	movs	r3, #64	; 0x40
 80075b6:	eba0 000a 	sub.w	r0, r0, sl
 80075ba:	fa03 f000 	lsl.w	r0, r3, r0
 80075be:	9b04      	ldr	r3, [sp, #16]
 80075c0:	4303      	orrs	r3, r0
 80075c2:	3401      	adds	r4, #1
 80075c4:	9304      	str	r3, [sp, #16]
 80075c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075ca:	4826      	ldr	r0, [pc, #152]	; (8007664 <_svfiprintf_r+0x1f0>)
 80075cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075d0:	2206      	movs	r2, #6
 80075d2:	f7f8 fe15 	bl	8000200 <memchr>
 80075d6:	2800      	cmp	r0, #0
 80075d8:	d038      	beq.n	800764c <_svfiprintf_r+0x1d8>
 80075da:	4b23      	ldr	r3, [pc, #140]	; (8007668 <_svfiprintf_r+0x1f4>)
 80075dc:	bb1b      	cbnz	r3, 8007626 <_svfiprintf_r+0x1b2>
 80075de:	9b03      	ldr	r3, [sp, #12]
 80075e0:	3307      	adds	r3, #7
 80075e2:	f023 0307 	bic.w	r3, r3, #7
 80075e6:	3308      	adds	r3, #8
 80075e8:	9303      	str	r3, [sp, #12]
 80075ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075ec:	4433      	add	r3, r6
 80075ee:	9309      	str	r3, [sp, #36]	; 0x24
 80075f0:	e767      	b.n	80074c2 <_svfiprintf_r+0x4e>
 80075f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80075f6:	460c      	mov	r4, r1
 80075f8:	2001      	movs	r0, #1
 80075fa:	e7a5      	b.n	8007548 <_svfiprintf_r+0xd4>
 80075fc:	2300      	movs	r3, #0
 80075fe:	3401      	adds	r4, #1
 8007600:	9305      	str	r3, [sp, #20]
 8007602:	4619      	mov	r1, r3
 8007604:	f04f 0c0a 	mov.w	ip, #10
 8007608:	4620      	mov	r0, r4
 800760a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800760e:	3a30      	subs	r2, #48	; 0x30
 8007610:	2a09      	cmp	r2, #9
 8007612:	d903      	bls.n	800761c <_svfiprintf_r+0x1a8>
 8007614:	2b00      	cmp	r3, #0
 8007616:	d0c5      	beq.n	80075a4 <_svfiprintf_r+0x130>
 8007618:	9105      	str	r1, [sp, #20]
 800761a:	e7c3      	b.n	80075a4 <_svfiprintf_r+0x130>
 800761c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007620:	4604      	mov	r4, r0
 8007622:	2301      	movs	r3, #1
 8007624:	e7f0      	b.n	8007608 <_svfiprintf_r+0x194>
 8007626:	ab03      	add	r3, sp, #12
 8007628:	9300      	str	r3, [sp, #0]
 800762a:	462a      	mov	r2, r5
 800762c:	4b0f      	ldr	r3, [pc, #60]	; (800766c <_svfiprintf_r+0x1f8>)
 800762e:	a904      	add	r1, sp, #16
 8007630:	4638      	mov	r0, r7
 8007632:	f3af 8000 	nop.w
 8007636:	1c42      	adds	r2, r0, #1
 8007638:	4606      	mov	r6, r0
 800763a:	d1d6      	bne.n	80075ea <_svfiprintf_r+0x176>
 800763c:	89ab      	ldrh	r3, [r5, #12]
 800763e:	065b      	lsls	r3, r3, #25
 8007640:	f53f af2c 	bmi.w	800749c <_svfiprintf_r+0x28>
 8007644:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007646:	b01d      	add	sp, #116	; 0x74
 8007648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800764c:	ab03      	add	r3, sp, #12
 800764e:	9300      	str	r3, [sp, #0]
 8007650:	462a      	mov	r2, r5
 8007652:	4b06      	ldr	r3, [pc, #24]	; (800766c <_svfiprintf_r+0x1f8>)
 8007654:	a904      	add	r1, sp, #16
 8007656:	4638      	mov	r0, r7
 8007658:	f000 f9d4 	bl	8007a04 <_printf_i>
 800765c:	e7eb      	b.n	8007636 <_svfiprintf_r+0x1c2>
 800765e:	bf00      	nop
 8007660:	08008090 	.word	0x08008090
 8007664:	0800809a 	.word	0x0800809a
 8007668:	00000000 	.word	0x00000000
 800766c:	080073bd 	.word	0x080073bd
 8007670:	08008096 	.word	0x08008096

08007674 <__sfputc_r>:
 8007674:	6893      	ldr	r3, [r2, #8]
 8007676:	3b01      	subs	r3, #1
 8007678:	2b00      	cmp	r3, #0
 800767a:	b410      	push	{r4}
 800767c:	6093      	str	r3, [r2, #8]
 800767e:	da08      	bge.n	8007692 <__sfputc_r+0x1e>
 8007680:	6994      	ldr	r4, [r2, #24]
 8007682:	42a3      	cmp	r3, r4
 8007684:	db01      	blt.n	800768a <__sfputc_r+0x16>
 8007686:	290a      	cmp	r1, #10
 8007688:	d103      	bne.n	8007692 <__sfputc_r+0x1e>
 800768a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800768e:	f7ff bb0d 	b.w	8006cac <__swbuf_r>
 8007692:	6813      	ldr	r3, [r2, #0]
 8007694:	1c58      	adds	r0, r3, #1
 8007696:	6010      	str	r0, [r2, #0]
 8007698:	7019      	strb	r1, [r3, #0]
 800769a:	4608      	mov	r0, r1
 800769c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076a0:	4770      	bx	lr

080076a2 <__sfputs_r>:
 80076a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076a4:	4606      	mov	r6, r0
 80076a6:	460f      	mov	r7, r1
 80076a8:	4614      	mov	r4, r2
 80076aa:	18d5      	adds	r5, r2, r3
 80076ac:	42ac      	cmp	r4, r5
 80076ae:	d101      	bne.n	80076b4 <__sfputs_r+0x12>
 80076b0:	2000      	movs	r0, #0
 80076b2:	e007      	b.n	80076c4 <__sfputs_r+0x22>
 80076b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076b8:	463a      	mov	r2, r7
 80076ba:	4630      	mov	r0, r6
 80076bc:	f7ff ffda 	bl	8007674 <__sfputc_r>
 80076c0:	1c43      	adds	r3, r0, #1
 80076c2:	d1f3      	bne.n	80076ac <__sfputs_r+0xa>
 80076c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080076c8 <_vfiprintf_r>:
 80076c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076cc:	460d      	mov	r5, r1
 80076ce:	b09d      	sub	sp, #116	; 0x74
 80076d0:	4614      	mov	r4, r2
 80076d2:	4698      	mov	r8, r3
 80076d4:	4606      	mov	r6, r0
 80076d6:	b118      	cbz	r0, 80076e0 <_vfiprintf_r+0x18>
 80076d8:	6983      	ldr	r3, [r0, #24]
 80076da:	b90b      	cbnz	r3, 80076e0 <_vfiprintf_r+0x18>
 80076dc:	f7ff fcc0 	bl	8007060 <__sinit>
 80076e0:	4b89      	ldr	r3, [pc, #548]	; (8007908 <_vfiprintf_r+0x240>)
 80076e2:	429d      	cmp	r5, r3
 80076e4:	d11b      	bne.n	800771e <_vfiprintf_r+0x56>
 80076e6:	6875      	ldr	r5, [r6, #4]
 80076e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076ea:	07d9      	lsls	r1, r3, #31
 80076ec:	d405      	bmi.n	80076fa <_vfiprintf_r+0x32>
 80076ee:	89ab      	ldrh	r3, [r5, #12]
 80076f0:	059a      	lsls	r2, r3, #22
 80076f2:	d402      	bmi.n	80076fa <_vfiprintf_r+0x32>
 80076f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076f6:	f7ff fd51 	bl	800719c <__retarget_lock_acquire_recursive>
 80076fa:	89ab      	ldrh	r3, [r5, #12]
 80076fc:	071b      	lsls	r3, r3, #28
 80076fe:	d501      	bpl.n	8007704 <_vfiprintf_r+0x3c>
 8007700:	692b      	ldr	r3, [r5, #16]
 8007702:	b9eb      	cbnz	r3, 8007740 <_vfiprintf_r+0x78>
 8007704:	4629      	mov	r1, r5
 8007706:	4630      	mov	r0, r6
 8007708:	f7ff fb22 	bl	8006d50 <__swsetup_r>
 800770c:	b1c0      	cbz	r0, 8007740 <_vfiprintf_r+0x78>
 800770e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007710:	07dc      	lsls	r4, r3, #31
 8007712:	d50e      	bpl.n	8007732 <_vfiprintf_r+0x6a>
 8007714:	f04f 30ff 	mov.w	r0, #4294967295
 8007718:	b01d      	add	sp, #116	; 0x74
 800771a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800771e:	4b7b      	ldr	r3, [pc, #492]	; (800790c <_vfiprintf_r+0x244>)
 8007720:	429d      	cmp	r5, r3
 8007722:	d101      	bne.n	8007728 <_vfiprintf_r+0x60>
 8007724:	68b5      	ldr	r5, [r6, #8]
 8007726:	e7df      	b.n	80076e8 <_vfiprintf_r+0x20>
 8007728:	4b79      	ldr	r3, [pc, #484]	; (8007910 <_vfiprintf_r+0x248>)
 800772a:	429d      	cmp	r5, r3
 800772c:	bf08      	it	eq
 800772e:	68f5      	ldreq	r5, [r6, #12]
 8007730:	e7da      	b.n	80076e8 <_vfiprintf_r+0x20>
 8007732:	89ab      	ldrh	r3, [r5, #12]
 8007734:	0598      	lsls	r0, r3, #22
 8007736:	d4ed      	bmi.n	8007714 <_vfiprintf_r+0x4c>
 8007738:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800773a:	f7ff fd30 	bl	800719e <__retarget_lock_release_recursive>
 800773e:	e7e9      	b.n	8007714 <_vfiprintf_r+0x4c>
 8007740:	2300      	movs	r3, #0
 8007742:	9309      	str	r3, [sp, #36]	; 0x24
 8007744:	2320      	movs	r3, #32
 8007746:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800774a:	f8cd 800c 	str.w	r8, [sp, #12]
 800774e:	2330      	movs	r3, #48	; 0x30
 8007750:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007914 <_vfiprintf_r+0x24c>
 8007754:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007758:	f04f 0901 	mov.w	r9, #1
 800775c:	4623      	mov	r3, r4
 800775e:	469a      	mov	sl, r3
 8007760:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007764:	b10a      	cbz	r2, 800776a <_vfiprintf_r+0xa2>
 8007766:	2a25      	cmp	r2, #37	; 0x25
 8007768:	d1f9      	bne.n	800775e <_vfiprintf_r+0x96>
 800776a:	ebba 0b04 	subs.w	fp, sl, r4
 800776e:	d00b      	beq.n	8007788 <_vfiprintf_r+0xc0>
 8007770:	465b      	mov	r3, fp
 8007772:	4622      	mov	r2, r4
 8007774:	4629      	mov	r1, r5
 8007776:	4630      	mov	r0, r6
 8007778:	f7ff ff93 	bl	80076a2 <__sfputs_r>
 800777c:	3001      	adds	r0, #1
 800777e:	f000 80aa 	beq.w	80078d6 <_vfiprintf_r+0x20e>
 8007782:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007784:	445a      	add	r2, fp
 8007786:	9209      	str	r2, [sp, #36]	; 0x24
 8007788:	f89a 3000 	ldrb.w	r3, [sl]
 800778c:	2b00      	cmp	r3, #0
 800778e:	f000 80a2 	beq.w	80078d6 <_vfiprintf_r+0x20e>
 8007792:	2300      	movs	r3, #0
 8007794:	f04f 32ff 	mov.w	r2, #4294967295
 8007798:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800779c:	f10a 0a01 	add.w	sl, sl, #1
 80077a0:	9304      	str	r3, [sp, #16]
 80077a2:	9307      	str	r3, [sp, #28]
 80077a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077a8:	931a      	str	r3, [sp, #104]	; 0x68
 80077aa:	4654      	mov	r4, sl
 80077ac:	2205      	movs	r2, #5
 80077ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077b2:	4858      	ldr	r0, [pc, #352]	; (8007914 <_vfiprintf_r+0x24c>)
 80077b4:	f7f8 fd24 	bl	8000200 <memchr>
 80077b8:	9a04      	ldr	r2, [sp, #16]
 80077ba:	b9d8      	cbnz	r0, 80077f4 <_vfiprintf_r+0x12c>
 80077bc:	06d1      	lsls	r1, r2, #27
 80077be:	bf44      	itt	mi
 80077c0:	2320      	movmi	r3, #32
 80077c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077c6:	0713      	lsls	r3, r2, #28
 80077c8:	bf44      	itt	mi
 80077ca:	232b      	movmi	r3, #43	; 0x2b
 80077cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077d0:	f89a 3000 	ldrb.w	r3, [sl]
 80077d4:	2b2a      	cmp	r3, #42	; 0x2a
 80077d6:	d015      	beq.n	8007804 <_vfiprintf_r+0x13c>
 80077d8:	9a07      	ldr	r2, [sp, #28]
 80077da:	4654      	mov	r4, sl
 80077dc:	2000      	movs	r0, #0
 80077de:	f04f 0c0a 	mov.w	ip, #10
 80077e2:	4621      	mov	r1, r4
 80077e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077e8:	3b30      	subs	r3, #48	; 0x30
 80077ea:	2b09      	cmp	r3, #9
 80077ec:	d94e      	bls.n	800788c <_vfiprintf_r+0x1c4>
 80077ee:	b1b0      	cbz	r0, 800781e <_vfiprintf_r+0x156>
 80077f0:	9207      	str	r2, [sp, #28]
 80077f2:	e014      	b.n	800781e <_vfiprintf_r+0x156>
 80077f4:	eba0 0308 	sub.w	r3, r0, r8
 80077f8:	fa09 f303 	lsl.w	r3, r9, r3
 80077fc:	4313      	orrs	r3, r2
 80077fe:	9304      	str	r3, [sp, #16]
 8007800:	46a2      	mov	sl, r4
 8007802:	e7d2      	b.n	80077aa <_vfiprintf_r+0xe2>
 8007804:	9b03      	ldr	r3, [sp, #12]
 8007806:	1d19      	adds	r1, r3, #4
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	9103      	str	r1, [sp, #12]
 800780c:	2b00      	cmp	r3, #0
 800780e:	bfbb      	ittet	lt
 8007810:	425b      	neglt	r3, r3
 8007812:	f042 0202 	orrlt.w	r2, r2, #2
 8007816:	9307      	strge	r3, [sp, #28]
 8007818:	9307      	strlt	r3, [sp, #28]
 800781a:	bfb8      	it	lt
 800781c:	9204      	strlt	r2, [sp, #16]
 800781e:	7823      	ldrb	r3, [r4, #0]
 8007820:	2b2e      	cmp	r3, #46	; 0x2e
 8007822:	d10c      	bne.n	800783e <_vfiprintf_r+0x176>
 8007824:	7863      	ldrb	r3, [r4, #1]
 8007826:	2b2a      	cmp	r3, #42	; 0x2a
 8007828:	d135      	bne.n	8007896 <_vfiprintf_r+0x1ce>
 800782a:	9b03      	ldr	r3, [sp, #12]
 800782c:	1d1a      	adds	r2, r3, #4
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	9203      	str	r2, [sp, #12]
 8007832:	2b00      	cmp	r3, #0
 8007834:	bfb8      	it	lt
 8007836:	f04f 33ff 	movlt.w	r3, #4294967295
 800783a:	3402      	adds	r4, #2
 800783c:	9305      	str	r3, [sp, #20]
 800783e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007924 <_vfiprintf_r+0x25c>
 8007842:	7821      	ldrb	r1, [r4, #0]
 8007844:	2203      	movs	r2, #3
 8007846:	4650      	mov	r0, sl
 8007848:	f7f8 fcda 	bl	8000200 <memchr>
 800784c:	b140      	cbz	r0, 8007860 <_vfiprintf_r+0x198>
 800784e:	2340      	movs	r3, #64	; 0x40
 8007850:	eba0 000a 	sub.w	r0, r0, sl
 8007854:	fa03 f000 	lsl.w	r0, r3, r0
 8007858:	9b04      	ldr	r3, [sp, #16]
 800785a:	4303      	orrs	r3, r0
 800785c:	3401      	adds	r4, #1
 800785e:	9304      	str	r3, [sp, #16]
 8007860:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007864:	482c      	ldr	r0, [pc, #176]	; (8007918 <_vfiprintf_r+0x250>)
 8007866:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800786a:	2206      	movs	r2, #6
 800786c:	f7f8 fcc8 	bl	8000200 <memchr>
 8007870:	2800      	cmp	r0, #0
 8007872:	d03f      	beq.n	80078f4 <_vfiprintf_r+0x22c>
 8007874:	4b29      	ldr	r3, [pc, #164]	; (800791c <_vfiprintf_r+0x254>)
 8007876:	bb1b      	cbnz	r3, 80078c0 <_vfiprintf_r+0x1f8>
 8007878:	9b03      	ldr	r3, [sp, #12]
 800787a:	3307      	adds	r3, #7
 800787c:	f023 0307 	bic.w	r3, r3, #7
 8007880:	3308      	adds	r3, #8
 8007882:	9303      	str	r3, [sp, #12]
 8007884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007886:	443b      	add	r3, r7
 8007888:	9309      	str	r3, [sp, #36]	; 0x24
 800788a:	e767      	b.n	800775c <_vfiprintf_r+0x94>
 800788c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007890:	460c      	mov	r4, r1
 8007892:	2001      	movs	r0, #1
 8007894:	e7a5      	b.n	80077e2 <_vfiprintf_r+0x11a>
 8007896:	2300      	movs	r3, #0
 8007898:	3401      	adds	r4, #1
 800789a:	9305      	str	r3, [sp, #20]
 800789c:	4619      	mov	r1, r3
 800789e:	f04f 0c0a 	mov.w	ip, #10
 80078a2:	4620      	mov	r0, r4
 80078a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078a8:	3a30      	subs	r2, #48	; 0x30
 80078aa:	2a09      	cmp	r2, #9
 80078ac:	d903      	bls.n	80078b6 <_vfiprintf_r+0x1ee>
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d0c5      	beq.n	800783e <_vfiprintf_r+0x176>
 80078b2:	9105      	str	r1, [sp, #20]
 80078b4:	e7c3      	b.n	800783e <_vfiprintf_r+0x176>
 80078b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80078ba:	4604      	mov	r4, r0
 80078bc:	2301      	movs	r3, #1
 80078be:	e7f0      	b.n	80078a2 <_vfiprintf_r+0x1da>
 80078c0:	ab03      	add	r3, sp, #12
 80078c2:	9300      	str	r3, [sp, #0]
 80078c4:	462a      	mov	r2, r5
 80078c6:	4b16      	ldr	r3, [pc, #88]	; (8007920 <_vfiprintf_r+0x258>)
 80078c8:	a904      	add	r1, sp, #16
 80078ca:	4630      	mov	r0, r6
 80078cc:	f3af 8000 	nop.w
 80078d0:	4607      	mov	r7, r0
 80078d2:	1c78      	adds	r0, r7, #1
 80078d4:	d1d6      	bne.n	8007884 <_vfiprintf_r+0x1bc>
 80078d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078d8:	07d9      	lsls	r1, r3, #31
 80078da:	d405      	bmi.n	80078e8 <_vfiprintf_r+0x220>
 80078dc:	89ab      	ldrh	r3, [r5, #12]
 80078de:	059a      	lsls	r2, r3, #22
 80078e0:	d402      	bmi.n	80078e8 <_vfiprintf_r+0x220>
 80078e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078e4:	f7ff fc5b 	bl	800719e <__retarget_lock_release_recursive>
 80078e8:	89ab      	ldrh	r3, [r5, #12]
 80078ea:	065b      	lsls	r3, r3, #25
 80078ec:	f53f af12 	bmi.w	8007714 <_vfiprintf_r+0x4c>
 80078f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078f2:	e711      	b.n	8007718 <_vfiprintf_r+0x50>
 80078f4:	ab03      	add	r3, sp, #12
 80078f6:	9300      	str	r3, [sp, #0]
 80078f8:	462a      	mov	r2, r5
 80078fa:	4b09      	ldr	r3, [pc, #36]	; (8007920 <_vfiprintf_r+0x258>)
 80078fc:	a904      	add	r1, sp, #16
 80078fe:	4630      	mov	r0, r6
 8007900:	f000 f880 	bl	8007a04 <_printf_i>
 8007904:	e7e4      	b.n	80078d0 <_vfiprintf_r+0x208>
 8007906:	bf00      	nop
 8007908:	08008050 	.word	0x08008050
 800790c:	08008070 	.word	0x08008070
 8007910:	08008030 	.word	0x08008030
 8007914:	08008090 	.word	0x08008090
 8007918:	0800809a 	.word	0x0800809a
 800791c:	00000000 	.word	0x00000000
 8007920:	080076a3 	.word	0x080076a3
 8007924:	08008096 	.word	0x08008096

08007928 <_printf_common>:
 8007928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800792c:	4616      	mov	r6, r2
 800792e:	4699      	mov	r9, r3
 8007930:	688a      	ldr	r2, [r1, #8]
 8007932:	690b      	ldr	r3, [r1, #16]
 8007934:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007938:	4293      	cmp	r3, r2
 800793a:	bfb8      	it	lt
 800793c:	4613      	movlt	r3, r2
 800793e:	6033      	str	r3, [r6, #0]
 8007940:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007944:	4607      	mov	r7, r0
 8007946:	460c      	mov	r4, r1
 8007948:	b10a      	cbz	r2, 800794e <_printf_common+0x26>
 800794a:	3301      	adds	r3, #1
 800794c:	6033      	str	r3, [r6, #0]
 800794e:	6823      	ldr	r3, [r4, #0]
 8007950:	0699      	lsls	r1, r3, #26
 8007952:	bf42      	ittt	mi
 8007954:	6833      	ldrmi	r3, [r6, #0]
 8007956:	3302      	addmi	r3, #2
 8007958:	6033      	strmi	r3, [r6, #0]
 800795a:	6825      	ldr	r5, [r4, #0]
 800795c:	f015 0506 	ands.w	r5, r5, #6
 8007960:	d106      	bne.n	8007970 <_printf_common+0x48>
 8007962:	f104 0a19 	add.w	sl, r4, #25
 8007966:	68e3      	ldr	r3, [r4, #12]
 8007968:	6832      	ldr	r2, [r6, #0]
 800796a:	1a9b      	subs	r3, r3, r2
 800796c:	42ab      	cmp	r3, r5
 800796e:	dc26      	bgt.n	80079be <_printf_common+0x96>
 8007970:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007974:	1e13      	subs	r3, r2, #0
 8007976:	6822      	ldr	r2, [r4, #0]
 8007978:	bf18      	it	ne
 800797a:	2301      	movne	r3, #1
 800797c:	0692      	lsls	r2, r2, #26
 800797e:	d42b      	bmi.n	80079d8 <_printf_common+0xb0>
 8007980:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007984:	4649      	mov	r1, r9
 8007986:	4638      	mov	r0, r7
 8007988:	47c0      	blx	r8
 800798a:	3001      	adds	r0, #1
 800798c:	d01e      	beq.n	80079cc <_printf_common+0xa4>
 800798e:	6823      	ldr	r3, [r4, #0]
 8007990:	68e5      	ldr	r5, [r4, #12]
 8007992:	6832      	ldr	r2, [r6, #0]
 8007994:	f003 0306 	and.w	r3, r3, #6
 8007998:	2b04      	cmp	r3, #4
 800799a:	bf08      	it	eq
 800799c:	1aad      	subeq	r5, r5, r2
 800799e:	68a3      	ldr	r3, [r4, #8]
 80079a0:	6922      	ldr	r2, [r4, #16]
 80079a2:	bf0c      	ite	eq
 80079a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079a8:	2500      	movne	r5, #0
 80079aa:	4293      	cmp	r3, r2
 80079ac:	bfc4      	itt	gt
 80079ae:	1a9b      	subgt	r3, r3, r2
 80079b0:	18ed      	addgt	r5, r5, r3
 80079b2:	2600      	movs	r6, #0
 80079b4:	341a      	adds	r4, #26
 80079b6:	42b5      	cmp	r5, r6
 80079b8:	d11a      	bne.n	80079f0 <_printf_common+0xc8>
 80079ba:	2000      	movs	r0, #0
 80079bc:	e008      	b.n	80079d0 <_printf_common+0xa8>
 80079be:	2301      	movs	r3, #1
 80079c0:	4652      	mov	r2, sl
 80079c2:	4649      	mov	r1, r9
 80079c4:	4638      	mov	r0, r7
 80079c6:	47c0      	blx	r8
 80079c8:	3001      	adds	r0, #1
 80079ca:	d103      	bne.n	80079d4 <_printf_common+0xac>
 80079cc:	f04f 30ff 	mov.w	r0, #4294967295
 80079d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079d4:	3501      	adds	r5, #1
 80079d6:	e7c6      	b.n	8007966 <_printf_common+0x3e>
 80079d8:	18e1      	adds	r1, r4, r3
 80079da:	1c5a      	adds	r2, r3, #1
 80079dc:	2030      	movs	r0, #48	; 0x30
 80079de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80079e2:	4422      	add	r2, r4
 80079e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80079e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079ec:	3302      	adds	r3, #2
 80079ee:	e7c7      	b.n	8007980 <_printf_common+0x58>
 80079f0:	2301      	movs	r3, #1
 80079f2:	4622      	mov	r2, r4
 80079f4:	4649      	mov	r1, r9
 80079f6:	4638      	mov	r0, r7
 80079f8:	47c0      	blx	r8
 80079fa:	3001      	adds	r0, #1
 80079fc:	d0e6      	beq.n	80079cc <_printf_common+0xa4>
 80079fe:	3601      	adds	r6, #1
 8007a00:	e7d9      	b.n	80079b6 <_printf_common+0x8e>
	...

08007a04 <_printf_i>:
 8007a04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a08:	460c      	mov	r4, r1
 8007a0a:	4691      	mov	r9, r2
 8007a0c:	7e27      	ldrb	r7, [r4, #24]
 8007a0e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007a10:	2f78      	cmp	r7, #120	; 0x78
 8007a12:	4680      	mov	r8, r0
 8007a14:	469a      	mov	sl, r3
 8007a16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a1a:	d807      	bhi.n	8007a2c <_printf_i+0x28>
 8007a1c:	2f62      	cmp	r7, #98	; 0x62
 8007a1e:	d80a      	bhi.n	8007a36 <_printf_i+0x32>
 8007a20:	2f00      	cmp	r7, #0
 8007a22:	f000 80d8 	beq.w	8007bd6 <_printf_i+0x1d2>
 8007a26:	2f58      	cmp	r7, #88	; 0x58
 8007a28:	f000 80a3 	beq.w	8007b72 <_printf_i+0x16e>
 8007a2c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007a30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a34:	e03a      	b.n	8007aac <_printf_i+0xa8>
 8007a36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a3a:	2b15      	cmp	r3, #21
 8007a3c:	d8f6      	bhi.n	8007a2c <_printf_i+0x28>
 8007a3e:	a001      	add	r0, pc, #4	; (adr r0, 8007a44 <_printf_i+0x40>)
 8007a40:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007a44:	08007a9d 	.word	0x08007a9d
 8007a48:	08007ab1 	.word	0x08007ab1
 8007a4c:	08007a2d 	.word	0x08007a2d
 8007a50:	08007a2d 	.word	0x08007a2d
 8007a54:	08007a2d 	.word	0x08007a2d
 8007a58:	08007a2d 	.word	0x08007a2d
 8007a5c:	08007ab1 	.word	0x08007ab1
 8007a60:	08007a2d 	.word	0x08007a2d
 8007a64:	08007a2d 	.word	0x08007a2d
 8007a68:	08007a2d 	.word	0x08007a2d
 8007a6c:	08007a2d 	.word	0x08007a2d
 8007a70:	08007bbd 	.word	0x08007bbd
 8007a74:	08007ae1 	.word	0x08007ae1
 8007a78:	08007b9f 	.word	0x08007b9f
 8007a7c:	08007a2d 	.word	0x08007a2d
 8007a80:	08007a2d 	.word	0x08007a2d
 8007a84:	08007bdf 	.word	0x08007bdf
 8007a88:	08007a2d 	.word	0x08007a2d
 8007a8c:	08007ae1 	.word	0x08007ae1
 8007a90:	08007a2d 	.word	0x08007a2d
 8007a94:	08007a2d 	.word	0x08007a2d
 8007a98:	08007ba7 	.word	0x08007ba7
 8007a9c:	680b      	ldr	r3, [r1, #0]
 8007a9e:	1d1a      	adds	r2, r3, #4
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	600a      	str	r2, [r1, #0]
 8007aa4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007aa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007aac:	2301      	movs	r3, #1
 8007aae:	e0a3      	b.n	8007bf8 <_printf_i+0x1f4>
 8007ab0:	6825      	ldr	r5, [r4, #0]
 8007ab2:	6808      	ldr	r0, [r1, #0]
 8007ab4:	062e      	lsls	r6, r5, #24
 8007ab6:	f100 0304 	add.w	r3, r0, #4
 8007aba:	d50a      	bpl.n	8007ad2 <_printf_i+0xce>
 8007abc:	6805      	ldr	r5, [r0, #0]
 8007abe:	600b      	str	r3, [r1, #0]
 8007ac0:	2d00      	cmp	r5, #0
 8007ac2:	da03      	bge.n	8007acc <_printf_i+0xc8>
 8007ac4:	232d      	movs	r3, #45	; 0x2d
 8007ac6:	426d      	negs	r5, r5
 8007ac8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007acc:	485e      	ldr	r0, [pc, #376]	; (8007c48 <_printf_i+0x244>)
 8007ace:	230a      	movs	r3, #10
 8007ad0:	e019      	b.n	8007b06 <_printf_i+0x102>
 8007ad2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007ad6:	6805      	ldr	r5, [r0, #0]
 8007ad8:	600b      	str	r3, [r1, #0]
 8007ada:	bf18      	it	ne
 8007adc:	b22d      	sxthne	r5, r5
 8007ade:	e7ef      	b.n	8007ac0 <_printf_i+0xbc>
 8007ae0:	680b      	ldr	r3, [r1, #0]
 8007ae2:	6825      	ldr	r5, [r4, #0]
 8007ae4:	1d18      	adds	r0, r3, #4
 8007ae6:	6008      	str	r0, [r1, #0]
 8007ae8:	0628      	lsls	r0, r5, #24
 8007aea:	d501      	bpl.n	8007af0 <_printf_i+0xec>
 8007aec:	681d      	ldr	r5, [r3, #0]
 8007aee:	e002      	b.n	8007af6 <_printf_i+0xf2>
 8007af0:	0669      	lsls	r1, r5, #25
 8007af2:	d5fb      	bpl.n	8007aec <_printf_i+0xe8>
 8007af4:	881d      	ldrh	r5, [r3, #0]
 8007af6:	4854      	ldr	r0, [pc, #336]	; (8007c48 <_printf_i+0x244>)
 8007af8:	2f6f      	cmp	r7, #111	; 0x6f
 8007afa:	bf0c      	ite	eq
 8007afc:	2308      	moveq	r3, #8
 8007afe:	230a      	movne	r3, #10
 8007b00:	2100      	movs	r1, #0
 8007b02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b06:	6866      	ldr	r6, [r4, #4]
 8007b08:	60a6      	str	r6, [r4, #8]
 8007b0a:	2e00      	cmp	r6, #0
 8007b0c:	bfa2      	ittt	ge
 8007b0e:	6821      	ldrge	r1, [r4, #0]
 8007b10:	f021 0104 	bicge.w	r1, r1, #4
 8007b14:	6021      	strge	r1, [r4, #0]
 8007b16:	b90d      	cbnz	r5, 8007b1c <_printf_i+0x118>
 8007b18:	2e00      	cmp	r6, #0
 8007b1a:	d04d      	beq.n	8007bb8 <_printf_i+0x1b4>
 8007b1c:	4616      	mov	r6, r2
 8007b1e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007b22:	fb03 5711 	mls	r7, r3, r1, r5
 8007b26:	5dc7      	ldrb	r7, [r0, r7]
 8007b28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007b2c:	462f      	mov	r7, r5
 8007b2e:	42bb      	cmp	r3, r7
 8007b30:	460d      	mov	r5, r1
 8007b32:	d9f4      	bls.n	8007b1e <_printf_i+0x11a>
 8007b34:	2b08      	cmp	r3, #8
 8007b36:	d10b      	bne.n	8007b50 <_printf_i+0x14c>
 8007b38:	6823      	ldr	r3, [r4, #0]
 8007b3a:	07df      	lsls	r7, r3, #31
 8007b3c:	d508      	bpl.n	8007b50 <_printf_i+0x14c>
 8007b3e:	6923      	ldr	r3, [r4, #16]
 8007b40:	6861      	ldr	r1, [r4, #4]
 8007b42:	4299      	cmp	r1, r3
 8007b44:	bfde      	ittt	le
 8007b46:	2330      	movle	r3, #48	; 0x30
 8007b48:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007b4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007b50:	1b92      	subs	r2, r2, r6
 8007b52:	6122      	str	r2, [r4, #16]
 8007b54:	f8cd a000 	str.w	sl, [sp]
 8007b58:	464b      	mov	r3, r9
 8007b5a:	aa03      	add	r2, sp, #12
 8007b5c:	4621      	mov	r1, r4
 8007b5e:	4640      	mov	r0, r8
 8007b60:	f7ff fee2 	bl	8007928 <_printf_common>
 8007b64:	3001      	adds	r0, #1
 8007b66:	d14c      	bne.n	8007c02 <_printf_i+0x1fe>
 8007b68:	f04f 30ff 	mov.w	r0, #4294967295
 8007b6c:	b004      	add	sp, #16
 8007b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b72:	4835      	ldr	r0, [pc, #212]	; (8007c48 <_printf_i+0x244>)
 8007b74:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007b78:	6823      	ldr	r3, [r4, #0]
 8007b7a:	680e      	ldr	r6, [r1, #0]
 8007b7c:	061f      	lsls	r7, r3, #24
 8007b7e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007b82:	600e      	str	r6, [r1, #0]
 8007b84:	d514      	bpl.n	8007bb0 <_printf_i+0x1ac>
 8007b86:	07d9      	lsls	r1, r3, #31
 8007b88:	bf44      	itt	mi
 8007b8a:	f043 0320 	orrmi.w	r3, r3, #32
 8007b8e:	6023      	strmi	r3, [r4, #0]
 8007b90:	b91d      	cbnz	r5, 8007b9a <_printf_i+0x196>
 8007b92:	6823      	ldr	r3, [r4, #0]
 8007b94:	f023 0320 	bic.w	r3, r3, #32
 8007b98:	6023      	str	r3, [r4, #0]
 8007b9a:	2310      	movs	r3, #16
 8007b9c:	e7b0      	b.n	8007b00 <_printf_i+0xfc>
 8007b9e:	6823      	ldr	r3, [r4, #0]
 8007ba0:	f043 0320 	orr.w	r3, r3, #32
 8007ba4:	6023      	str	r3, [r4, #0]
 8007ba6:	2378      	movs	r3, #120	; 0x78
 8007ba8:	4828      	ldr	r0, [pc, #160]	; (8007c4c <_printf_i+0x248>)
 8007baa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007bae:	e7e3      	b.n	8007b78 <_printf_i+0x174>
 8007bb0:	065e      	lsls	r6, r3, #25
 8007bb2:	bf48      	it	mi
 8007bb4:	b2ad      	uxthmi	r5, r5
 8007bb6:	e7e6      	b.n	8007b86 <_printf_i+0x182>
 8007bb8:	4616      	mov	r6, r2
 8007bba:	e7bb      	b.n	8007b34 <_printf_i+0x130>
 8007bbc:	680b      	ldr	r3, [r1, #0]
 8007bbe:	6826      	ldr	r6, [r4, #0]
 8007bc0:	6960      	ldr	r0, [r4, #20]
 8007bc2:	1d1d      	adds	r5, r3, #4
 8007bc4:	600d      	str	r5, [r1, #0]
 8007bc6:	0635      	lsls	r5, r6, #24
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	d501      	bpl.n	8007bd0 <_printf_i+0x1cc>
 8007bcc:	6018      	str	r0, [r3, #0]
 8007bce:	e002      	b.n	8007bd6 <_printf_i+0x1d2>
 8007bd0:	0671      	lsls	r1, r6, #25
 8007bd2:	d5fb      	bpl.n	8007bcc <_printf_i+0x1c8>
 8007bd4:	8018      	strh	r0, [r3, #0]
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	6123      	str	r3, [r4, #16]
 8007bda:	4616      	mov	r6, r2
 8007bdc:	e7ba      	b.n	8007b54 <_printf_i+0x150>
 8007bde:	680b      	ldr	r3, [r1, #0]
 8007be0:	1d1a      	adds	r2, r3, #4
 8007be2:	600a      	str	r2, [r1, #0]
 8007be4:	681e      	ldr	r6, [r3, #0]
 8007be6:	6862      	ldr	r2, [r4, #4]
 8007be8:	2100      	movs	r1, #0
 8007bea:	4630      	mov	r0, r6
 8007bec:	f7f8 fb08 	bl	8000200 <memchr>
 8007bf0:	b108      	cbz	r0, 8007bf6 <_printf_i+0x1f2>
 8007bf2:	1b80      	subs	r0, r0, r6
 8007bf4:	6060      	str	r0, [r4, #4]
 8007bf6:	6863      	ldr	r3, [r4, #4]
 8007bf8:	6123      	str	r3, [r4, #16]
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c00:	e7a8      	b.n	8007b54 <_printf_i+0x150>
 8007c02:	6923      	ldr	r3, [r4, #16]
 8007c04:	4632      	mov	r2, r6
 8007c06:	4649      	mov	r1, r9
 8007c08:	4640      	mov	r0, r8
 8007c0a:	47d0      	blx	sl
 8007c0c:	3001      	adds	r0, #1
 8007c0e:	d0ab      	beq.n	8007b68 <_printf_i+0x164>
 8007c10:	6823      	ldr	r3, [r4, #0]
 8007c12:	079b      	lsls	r3, r3, #30
 8007c14:	d413      	bmi.n	8007c3e <_printf_i+0x23a>
 8007c16:	68e0      	ldr	r0, [r4, #12]
 8007c18:	9b03      	ldr	r3, [sp, #12]
 8007c1a:	4298      	cmp	r0, r3
 8007c1c:	bfb8      	it	lt
 8007c1e:	4618      	movlt	r0, r3
 8007c20:	e7a4      	b.n	8007b6c <_printf_i+0x168>
 8007c22:	2301      	movs	r3, #1
 8007c24:	4632      	mov	r2, r6
 8007c26:	4649      	mov	r1, r9
 8007c28:	4640      	mov	r0, r8
 8007c2a:	47d0      	blx	sl
 8007c2c:	3001      	adds	r0, #1
 8007c2e:	d09b      	beq.n	8007b68 <_printf_i+0x164>
 8007c30:	3501      	adds	r5, #1
 8007c32:	68e3      	ldr	r3, [r4, #12]
 8007c34:	9903      	ldr	r1, [sp, #12]
 8007c36:	1a5b      	subs	r3, r3, r1
 8007c38:	42ab      	cmp	r3, r5
 8007c3a:	dcf2      	bgt.n	8007c22 <_printf_i+0x21e>
 8007c3c:	e7eb      	b.n	8007c16 <_printf_i+0x212>
 8007c3e:	2500      	movs	r5, #0
 8007c40:	f104 0619 	add.w	r6, r4, #25
 8007c44:	e7f5      	b.n	8007c32 <_printf_i+0x22e>
 8007c46:	bf00      	nop
 8007c48:	080080a1 	.word	0x080080a1
 8007c4c:	080080b2 	.word	0x080080b2

08007c50 <_sbrk_r>:
 8007c50:	b538      	push	{r3, r4, r5, lr}
 8007c52:	4d06      	ldr	r5, [pc, #24]	; (8007c6c <_sbrk_r+0x1c>)
 8007c54:	2300      	movs	r3, #0
 8007c56:	4604      	mov	r4, r0
 8007c58:	4608      	mov	r0, r1
 8007c5a:	602b      	str	r3, [r5, #0]
 8007c5c:	f7f9 fcf6 	bl	800164c <_sbrk>
 8007c60:	1c43      	adds	r3, r0, #1
 8007c62:	d102      	bne.n	8007c6a <_sbrk_r+0x1a>
 8007c64:	682b      	ldr	r3, [r5, #0]
 8007c66:	b103      	cbz	r3, 8007c6a <_sbrk_r+0x1a>
 8007c68:	6023      	str	r3, [r4, #0]
 8007c6a:	bd38      	pop	{r3, r4, r5, pc}
 8007c6c:	20004378 	.word	0x20004378

08007c70 <__sread>:
 8007c70:	b510      	push	{r4, lr}
 8007c72:	460c      	mov	r4, r1
 8007c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c78:	f000 f8ee 	bl	8007e58 <_read_r>
 8007c7c:	2800      	cmp	r0, #0
 8007c7e:	bfab      	itete	ge
 8007c80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007c82:	89a3      	ldrhlt	r3, [r4, #12]
 8007c84:	181b      	addge	r3, r3, r0
 8007c86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007c8a:	bfac      	ite	ge
 8007c8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007c8e:	81a3      	strhlt	r3, [r4, #12]
 8007c90:	bd10      	pop	{r4, pc}

08007c92 <__swrite>:
 8007c92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c96:	461f      	mov	r7, r3
 8007c98:	898b      	ldrh	r3, [r1, #12]
 8007c9a:	05db      	lsls	r3, r3, #23
 8007c9c:	4605      	mov	r5, r0
 8007c9e:	460c      	mov	r4, r1
 8007ca0:	4616      	mov	r6, r2
 8007ca2:	d505      	bpl.n	8007cb0 <__swrite+0x1e>
 8007ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ca8:	2302      	movs	r3, #2
 8007caa:	2200      	movs	r2, #0
 8007cac:	f000 f868 	bl	8007d80 <_lseek_r>
 8007cb0:	89a3      	ldrh	r3, [r4, #12]
 8007cb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007cba:	81a3      	strh	r3, [r4, #12]
 8007cbc:	4632      	mov	r2, r6
 8007cbe:	463b      	mov	r3, r7
 8007cc0:	4628      	mov	r0, r5
 8007cc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cc6:	f000 b817 	b.w	8007cf8 <_write_r>

08007cca <__sseek>:
 8007cca:	b510      	push	{r4, lr}
 8007ccc:	460c      	mov	r4, r1
 8007cce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cd2:	f000 f855 	bl	8007d80 <_lseek_r>
 8007cd6:	1c43      	adds	r3, r0, #1
 8007cd8:	89a3      	ldrh	r3, [r4, #12]
 8007cda:	bf15      	itete	ne
 8007cdc:	6560      	strne	r0, [r4, #84]	; 0x54
 8007cde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007ce2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007ce6:	81a3      	strheq	r3, [r4, #12]
 8007ce8:	bf18      	it	ne
 8007cea:	81a3      	strhne	r3, [r4, #12]
 8007cec:	bd10      	pop	{r4, pc}

08007cee <__sclose>:
 8007cee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cf2:	f000 b813 	b.w	8007d1c <_close_r>
	...

08007cf8 <_write_r>:
 8007cf8:	b538      	push	{r3, r4, r5, lr}
 8007cfa:	4d07      	ldr	r5, [pc, #28]	; (8007d18 <_write_r+0x20>)
 8007cfc:	4604      	mov	r4, r0
 8007cfe:	4608      	mov	r0, r1
 8007d00:	4611      	mov	r1, r2
 8007d02:	2200      	movs	r2, #0
 8007d04:	602a      	str	r2, [r5, #0]
 8007d06:	461a      	mov	r2, r3
 8007d08:	f7f9 f900 	bl	8000f0c <_write>
 8007d0c:	1c43      	adds	r3, r0, #1
 8007d0e:	d102      	bne.n	8007d16 <_write_r+0x1e>
 8007d10:	682b      	ldr	r3, [r5, #0]
 8007d12:	b103      	cbz	r3, 8007d16 <_write_r+0x1e>
 8007d14:	6023      	str	r3, [r4, #0]
 8007d16:	bd38      	pop	{r3, r4, r5, pc}
 8007d18:	20004378 	.word	0x20004378

08007d1c <_close_r>:
 8007d1c:	b538      	push	{r3, r4, r5, lr}
 8007d1e:	4d06      	ldr	r5, [pc, #24]	; (8007d38 <_close_r+0x1c>)
 8007d20:	2300      	movs	r3, #0
 8007d22:	4604      	mov	r4, r0
 8007d24:	4608      	mov	r0, r1
 8007d26:	602b      	str	r3, [r5, #0]
 8007d28:	f7f9 fc5b 	bl	80015e2 <_close>
 8007d2c:	1c43      	adds	r3, r0, #1
 8007d2e:	d102      	bne.n	8007d36 <_close_r+0x1a>
 8007d30:	682b      	ldr	r3, [r5, #0]
 8007d32:	b103      	cbz	r3, 8007d36 <_close_r+0x1a>
 8007d34:	6023      	str	r3, [r4, #0]
 8007d36:	bd38      	pop	{r3, r4, r5, pc}
 8007d38:	20004378 	.word	0x20004378

08007d3c <_fstat_r>:
 8007d3c:	b538      	push	{r3, r4, r5, lr}
 8007d3e:	4d07      	ldr	r5, [pc, #28]	; (8007d5c <_fstat_r+0x20>)
 8007d40:	2300      	movs	r3, #0
 8007d42:	4604      	mov	r4, r0
 8007d44:	4608      	mov	r0, r1
 8007d46:	4611      	mov	r1, r2
 8007d48:	602b      	str	r3, [r5, #0]
 8007d4a:	f7f9 fc56 	bl	80015fa <_fstat>
 8007d4e:	1c43      	adds	r3, r0, #1
 8007d50:	d102      	bne.n	8007d58 <_fstat_r+0x1c>
 8007d52:	682b      	ldr	r3, [r5, #0]
 8007d54:	b103      	cbz	r3, 8007d58 <_fstat_r+0x1c>
 8007d56:	6023      	str	r3, [r4, #0]
 8007d58:	bd38      	pop	{r3, r4, r5, pc}
 8007d5a:	bf00      	nop
 8007d5c:	20004378 	.word	0x20004378

08007d60 <_isatty_r>:
 8007d60:	b538      	push	{r3, r4, r5, lr}
 8007d62:	4d06      	ldr	r5, [pc, #24]	; (8007d7c <_isatty_r+0x1c>)
 8007d64:	2300      	movs	r3, #0
 8007d66:	4604      	mov	r4, r0
 8007d68:	4608      	mov	r0, r1
 8007d6a:	602b      	str	r3, [r5, #0]
 8007d6c:	f7f9 fc55 	bl	800161a <_isatty>
 8007d70:	1c43      	adds	r3, r0, #1
 8007d72:	d102      	bne.n	8007d7a <_isatty_r+0x1a>
 8007d74:	682b      	ldr	r3, [r5, #0]
 8007d76:	b103      	cbz	r3, 8007d7a <_isatty_r+0x1a>
 8007d78:	6023      	str	r3, [r4, #0]
 8007d7a:	bd38      	pop	{r3, r4, r5, pc}
 8007d7c:	20004378 	.word	0x20004378

08007d80 <_lseek_r>:
 8007d80:	b538      	push	{r3, r4, r5, lr}
 8007d82:	4d07      	ldr	r5, [pc, #28]	; (8007da0 <_lseek_r+0x20>)
 8007d84:	4604      	mov	r4, r0
 8007d86:	4608      	mov	r0, r1
 8007d88:	4611      	mov	r1, r2
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	602a      	str	r2, [r5, #0]
 8007d8e:	461a      	mov	r2, r3
 8007d90:	f7f9 fc4e 	bl	8001630 <_lseek>
 8007d94:	1c43      	adds	r3, r0, #1
 8007d96:	d102      	bne.n	8007d9e <_lseek_r+0x1e>
 8007d98:	682b      	ldr	r3, [r5, #0]
 8007d9a:	b103      	cbz	r3, 8007d9e <_lseek_r+0x1e>
 8007d9c:	6023      	str	r3, [r4, #0]
 8007d9e:	bd38      	pop	{r3, r4, r5, pc}
 8007da0:	20004378 	.word	0x20004378

08007da4 <memcpy>:
 8007da4:	440a      	add	r2, r1
 8007da6:	4291      	cmp	r1, r2
 8007da8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007dac:	d100      	bne.n	8007db0 <memcpy+0xc>
 8007dae:	4770      	bx	lr
 8007db0:	b510      	push	{r4, lr}
 8007db2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007db6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007dba:	4291      	cmp	r1, r2
 8007dbc:	d1f9      	bne.n	8007db2 <memcpy+0xe>
 8007dbe:	bd10      	pop	{r4, pc}

08007dc0 <memmove>:
 8007dc0:	4288      	cmp	r0, r1
 8007dc2:	b510      	push	{r4, lr}
 8007dc4:	eb01 0402 	add.w	r4, r1, r2
 8007dc8:	d902      	bls.n	8007dd0 <memmove+0x10>
 8007dca:	4284      	cmp	r4, r0
 8007dcc:	4623      	mov	r3, r4
 8007dce:	d807      	bhi.n	8007de0 <memmove+0x20>
 8007dd0:	1e43      	subs	r3, r0, #1
 8007dd2:	42a1      	cmp	r1, r4
 8007dd4:	d008      	beq.n	8007de8 <memmove+0x28>
 8007dd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007dda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007dde:	e7f8      	b.n	8007dd2 <memmove+0x12>
 8007de0:	4402      	add	r2, r0
 8007de2:	4601      	mov	r1, r0
 8007de4:	428a      	cmp	r2, r1
 8007de6:	d100      	bne.n	8007dea <memmove+0x2a>
 8007de8:	bd10      	pop	{r4, pc}
 8007dea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007dee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007df2:	e7f7      	b.n	8007de4 <memmove+0x24>

08007df4 <__malloc_lock>:
 8007df4:	4801      	ldr	r0, [pc, #4]	; (8007dfc <__malloc_lock+0x8>)
 8007df6:	f7ff b9d1 	b.w	800719c <__retarget_lock_acquire_recursive>
 8007dfa:	bf00      	nop
 8007dfc:	20004370 	.word	0x20004370

08007e00 <__malloc_unlock>:
 8007e00:	4801      	ldr	r0, [pc, #4]	; (8007e08 <__malloc_unlock+0x8>)
 8007e02:	f7ff b9cc 	b.w	800719e <__retarget_lock_release_recursive>
 8007e06:	bf00      	nop
 8007e08:	20004370 	.word	0x20004370

08007e0c <_realloc_r>:
 8007e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e0e:	4607      	mov	r7, r0
 8007e10:	4614      	mov	r4, r2
 8007e12:	460e      	mov	r6, r1
 8007e14:	b921      	cbnz	r1, 8007e20 <_realloc_r+0x14>
 8007e16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007e1a:	4611      	mov	r1, r2
 8007e1c:	f7ff ba74 	b.w	8007308 <_malloc_r>
 8007e20:	b922      	cbnz	r2, 8007e2c <_realloc_r+0x20>
 8007e22:	f7ff fa21 	bl	8007268 <_free_r>
 8007e26:	4625      	mov	r5, r4
 8007e28:	4628      	mov	r0, r5
 8007e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e2c:	f000 f826 	bl	8007e7c <_malloc_usable_size_r>
 8007e30:	42a0      	cmp	r0, r4
 8007e32:	d20f      	bcs.n	8007e54 <_realloc_r+0x48>
 8007e34:	4621      	mov	r1, r4
 8007e36:	4638      	mov	r0, r7
 8007e38:	f7ff fa66 	bl	8007308 <_malloc_r>
 8007e3c:	4605      	mov	r5, r0
 8007e3e:	2800      	cmp	r0, #0
 8007e40:	d0f2      	beq.n	8007e28 <_realloc_r+0x1c>
 8007e42:	4631      	mov	r1, r6
 8007e44:	4622      	mov	r2, r4
 8007e46:	f7ff ffad 	bl	8007da4 <memcpy>
 8007e4a:	4631      	mov	r1, r6
 8007e4c:	4638      	mov	r0, r7
 8007e4e:	f7ff fa0b 	bl	8007268 <_free_r>
 8007e52:	e7e9      	b.n	8007e28 <_realloc_r+0x1c>
 8007e54:	4635      	mov	r5, r6
 8007e56:	e7e7      	b.n	8007e28 <_realloc_r+0x1c>

08007e58 <_read_r>:
 8007e58:	b538      	push	{r3, r4, r5, lr}
 8007e5a:	4d07      	ldr	r5, [pc, #28]	; (8007e78 <_read_r+0x20>)
 8007e5c:	4604      	mov	r4, r0
 8007e5e:	4608      	mov	r0, r1
 8007e60:	4611      	mov	r1, r2
 8007e62:	2200      	movs	r2, #0
 8007e64:	602a      	str	r2, [r5, #0]
 8007e66:	461a      	mov	r2, r3
 8007e68:	f7f9 fb9e 	bl	80015a8 <_read>
 8007e6c:	1c43      	adds	r3, r0, #1
 8007e6e:	d102      	bne.n	8007e76 <_read_r+0x1e>
 8007e70:	682b      	ldr	r3, [r5, #0]
 8007e72:	b103      	cbz	r3, 8007e76 <_read_r+0x1e>
 8007e74:	6023      	str	r3, [r4, #0]
 8007e76:	bd38      	pop	{r3, r4, r5, pc}
 8007e78:	20004378 	.word	0x20004378

08007e7c <_malloc_usable_size_r>:
 8007e7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e80:	1f18      	subs	r0, r3, #4
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	bfbc      	itt	lt
 8007e86:	580b      	ldrlt	r3, [r1, r0]
 8007e88:	18c0      	addlt	r0, r0, r3
 8007e8a:	4770      	bx	lr

08007e8c <_init>:
 8007e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e8e:	bf00      	nop
 8007e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e92:	bc08      	pop	{r3}
 8007e94:	469e      	mov	lr, r3
 8007e96:	4770      	bx	lr

08007e98 <_fini>:
 8007e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e9a:	bf00      	nop
 8007e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e9e:	bc08      	pop	{r3}
 8007ea0:	469e      	mov	lr, r3
 8007ea2:	4770      	bx	lr
